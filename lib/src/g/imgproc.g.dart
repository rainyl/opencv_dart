// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CLAHE, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_CLAHE_apply(
  CLAHE self,
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(CLAHEPtr)>()
external void cv_CLAHE_close(
  CLAHEPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_CLAHE_collectGarbage(
  CLAHE self,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<CLAHE>)>()
external ffi.Pointer<CvStatus> cv_CLAHE_create(
  ffi.Pointer<CLAHE> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Double, CvSize, ffi.Pointer<CLAHE>)>()
external ffi.Pointer<CvStatus> cv_CLAHE_create_1(
  double clipLimit,
  CvSize tileGridSize,
  ffi.Pointer<CLAHE> rval,
);

@ffi.Native<ffi.Double Function(CLAHE)>()
external double cv_CLAHE_getClipLimit(
  CLAHE self,
);

@ffi.Native<ffi.Pointer<CvSize> Function(CLAHE)>()
external ffi.Pointer<CvSize> cv_CLAHE_getTilesGridSize(
  CLAHE self,
);

@ffi.Native<ffi.Void Function(CLAHE, ffi.Double)>()
external void cv_CLAHE_setClipLimit(
  CLAHE self,
  double clipLimit,
);

@ffi.Native<ffi.Void Function(CLAHE, CvSize)>()
external void cv_CLAHE_setTilesGridSize(
  CLAHE self,
  CvSize size,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Double, ffi.Double,
        ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_GaussianBlur(
  Mat src,
  Mat dst,
  CvSize ps,
  double sX,
  double sY,
  int bt,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Double, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HoughCircles(
  Mat src,
  Mat circles,
  int method,
  double dp,
  double minDist,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double,
        ffi.Double, ffi.Double, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HoughCircles_1(
  Mat src,
  Mat circles,
  int method,
  double dp,
  double minDist,
  double param1,
  double param2,
  int minRadius,
  int maxRadius,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Double, ffi.Double, ffi.Double, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HoughLines(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  double srn,
  double stn,
  double min_theta,
  double max_theta,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HoughLinesP(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Double, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HoughLinesP_1(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  double minLineLength,
  double maxLineGap,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        Mat,
        ffi.Int,
        ffi.Int,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HoughLinesPointSet(
  Mat points,
  Mat lines,
  int lines_max,
  int threshold,
  double min_rho,
  double max_rho,
  double rho_step,
  double min_theta,
  double max_theta,
  double theta_step,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Double,
        ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Laplacian(
  Mat src,
  Mat dst,
  int dDepth,
  int kSize,
  double scale,
  double delta,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int,
        ffi.Double, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Scharr(
  Mat src,
  Mat dst,
  int dDepth,
  int dx,
  int dy,
  double scale,
  double delta,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Double, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Sobel(
  Mat src,
  Mat dst,
  int ddepth,
  int dx,
  int dy,
  int ksize,
  double scale,
  double delta,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(Subdiv2DPtr)>()
external void cv_Subdiv2D_close(
  Subdiv2DPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Subdiv2D>)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_create(
  ffi.Pointer<Subdiv2D> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CvRect, ffi.Pointer<Subdiv2D>)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_create_1(
  CvRect rect,
  ffi.Pointer<Subdiv2D> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<CvPoint2f>,
        ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_edgeDst(
  Subdiv2D self,
  int edge,
  ffi.Pointer<CvPoint2f> dstpt,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<CvPoint2f>,
        ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_edgeOrg(
  Subdiv2D self,
  int edge,
  ffi.Pointer<CvPoint2f> orgpt,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, ffi.Pointer<CvPoint2f>,
        ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_findNearest(
  Subdiv2D self,
  CvPoint2f pt,
  ffi.Pointer<CvPoint2f> nearestPt,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_getEdge(
  Subdiv2D self,
  int edge,
  int nextEdgeType,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<ffi.Pointer<Vec4f>>,
        ffi.Pointer<ffi.Size>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_getEdgeList(
  Subdiv2D self,
  ffi.Pointer<ffi.Pointer<Vec4f>> rval,
  ffi.Pointer<ffi.Size> size,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Pointer<VecI32>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_getLeadingEdgeList(
  Subdiv2D self,
  ffi.Pointer<VecI32> leadingEdgeList,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<ffi.Pointer<Vec6f>>,
        ffi.Pointer<ffi.Size>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_getTriangleList(
  Subdiv2D self,
  ffi.Pointer<ffi.Pointer<Vec6f>> rval,
  ffi.Pointer<ffi.Size> size,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>,
        ffi.Pointer<CvPoint2f>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_getVertex(
  Subdiv2D self,
  int vertex,
  ffi.Pointer<ffi.Int> firstEdge,
  ffi.Pointer<CvPoint2f> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, VecI32, ffi.Pointer<VecVecPoint2f>,
        ffi.Pointer<VecPoint2f>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_getVoronoiFacetList(
  Subdiv2D self,
  VecI32 idx,
  ffi.Pointer<VecVecPoint2f> facetList,
  ffi.Pointer<VecPoint2f> facetCenters,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, CvRect, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_initDelaunay(
  Subdiv2D self,
  CvRect rect,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_insert(
  Subdiv2D self,
  CvPoint2f pt,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, VecPoint2f, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_insertVec(
  Subdiv2D self,
  VecPoint2f ptvec,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_locate(
  Subdiv2D self,
  CvPoint2f pt,
  ffi.Pointer<ffi.Int> edge,
  ffi.Pointer<ffi.Int> vertex,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_nextEdge(
  Subdiv2D self,
  int edge,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_rotateEdge(
  Subdiv2D self,
  int edge,
  int rotate,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Subdiv2D_symEdge(
  Subdiv2D self,
  int edge,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_accumulate(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_accumulateProduct(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_accumulateProduct_1(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_accumulateSquare(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_accumulateSquare_1(
  Mat src,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_accumulate_1(
  Mat src,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_accumulatedWeighted(
  Mat src,
  Mat dst,
  double alpha,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_accumulatedWeighted_1(
  Mat src,
  Mat dst,
  double alpha,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int, ffi.Int,
        ffi.Int, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_adaptiveThreshold(
  Mat src,
  Mat dst,
  double maxValue,
  int adaptiveTyp,
  int typ,
  int blockSize,
  double c,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_applyColorMap(
  Mat src,
  Mat dst,
  int colormap,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_applyColorMap_1(
  Mat src,
  Mat dst,
  Mat colormap,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Double, ffi.Bool,
        ffi.Pointer<VecPoint>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_approxPolyDP(
  VecPoint curve,
  double epsilon,
  bool closed,
  ffi.Pointer<VecPoint> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Double, ffi.Bool,
        ffi.Pointer<VecPoint2f>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_approxPolyDP2f(
  VecPoint2f curve,
  double epsilon,
  bool closed,
  ffi.Pointer<VecPoint2f> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Int, ffi.Float, ffi.Bool,
        ffi.Pointer<VecPoint>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_approxPolyN(
  VecPoint curve,
  int nsides,
  double epsilon_percentage,
  bool ensure_convex,
  ffi.Pointer<VecPoint> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Int, ffi.Float, ffi.Bool,
        ffi.Pointer<VecPoint2f>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_approxPolyN2f(
  VecPoint2f curve,
  int nsides,
  double epsilon_percentage,
  bool ensure_convex,
  ffi.Pointer<VecPoint2f> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Bool, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_arcLength(
  VecPoint curve,
  bool is_closed,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, ffi.Bool, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_arcLength2f(
  VecPoint2f curve,
  bool is_closed,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, Scalar, ffi.Int,
        ffi.Int, ffi.Int, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_arrowedLine(
  Mat img,
  CvPoint pt1,
  CvPoint pt2,
  Scalar color,
  int thickness,
  int line_type,
  int shift,
  double tipLength,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Double, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bilateralFilter(
  Mat src,
  Mat dst,
  int d,
  double sc,
  double ss,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_blur(
  Mat src,
  Mat dst,
  CvSize ps,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Pointer<CvRect>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_boundingRect(
  VecPoint pts,
  ffi.Pointer<CvRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, ffi.Pointer<CvRect>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_boundingRect2f(
  VecPoint2f pts,
  ffi.Pointer<CvRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, CvSize, CvPoint, ffi.Bool,
        ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_boxFilter(
  Mat src,
  Mat dst,
  int ddepth,
  CvSize ps,
  CvPoint anchor,
  bool normalize,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RotatedRect, ffi.Pointer<VecPoint2f>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_boxPoints(
  RotatedRect rect,
  ffi.Pointer<VecPoint2f> boxPts,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, VecI32, Mat, Mat, VecF32, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_calcBackProject(
  VecMat mats,
  VecI32 chans,
  Mat hist,
  Mat backProject,
  VecF32 rng,
  double scale,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecMat, VecI32, Mat, Mat, VecI32, VecF32,
        ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_calcHist(
  VecMat mats,
  VecI32 chans,
  Mat mask,
  Mat hist,
  VecI32 sz,
  VecF32 rng,
  bool acc,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_canny(
  Mat src,
  Mat edges,
  double t1,
  double t2,
  int apertureSize,
  bool l2gradient,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, CvPoint, ffi.Int, Scalar, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_circle(
  Mat img,
  CvPoint center,
  int radius,
  Scalar color,
  int thickness,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, CvPoint, ffi.Int, Scalar, ffi.Int,
        ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_circle_1(
  Mat img,
  CvPoint center,
  int radius,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CvRect, CvPoint, CvPoint, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_clipLine(
  CvRect imgRect,
  CvPoint pt1,
  CvPoint pt2,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_compareHist(
  Mat hist1,
  Mat hist2,
  int method,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_connectedComponents(
  Mat src,
  Mat dst,
  int connectivity,
  int ltype,
  int ccltype,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int,
        ffi.Int, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_connectedComponents_1(
  Mat src,
  Mat labels,
  Mat stats,
  Mat centroids,
  int connectivity,
  int ltype,
  int ccltype,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_contourArea(
  VecPoint pts,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_contourArea2f(
  VecPoint2f pts,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, Mat, ffi.Bool, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_convexHull(
  VecPoint points,
  Mat hull,
  bool clockwise,
  bool returnPoints,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, Mat, ffi.Bool, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_convexHull2f(
  VecPoint2f points,
  Mat hull,
  bool clockwise,
  bool returnPoints,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_convexityDefects(
  VecPoint points,
  Mat hull,
  Mat result,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_convexityDefects2f(
  VecPoint2f points,
  Mat hull,
  Mat result,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecPoint2f, CvSize, CvSize, TermCriteria, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_cornerSubPix(
  Mat img,
  VecPoint2f corners,
  CvSize winSize,
  CvSize zeroZone,
  TermCriteria criteria,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_cvtColor(
  Mat src,
  Mat dst,
  int code,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_dilate(
  Mat src,
  Mat dst,
  Mat kernel,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, CvPoint, ffi.Int, ffi.Int, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_dilate_1(
  Mat src,
  Mat dst,
  Mat kernel,
  CvPoint anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_distanceTransform(
  Mat src,
  Mat dst,
  Mat labels,
  int distanceType,
  int maskSize,
  int labelType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_drawContours(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int,
        ffi.Int, VecVec4i, ffi.Int, CvPoint, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_drawContours_1(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
  int lineType,
  VecVec4i hierarchy,
  int maxLevel,
  CvPoint offset,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, ffi.Double,
        ffi.Double, ffi.Double, Scalar, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ellipse(
  Mat img,
  CvPoint center,
  CvPoint axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        CvPoint,
        CvPoint,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        Scalar,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ellipse_1(
  Mat img,
  CvPoint center,
  CvPoint axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_equalizeHist(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_erode(
  Mat src,
  Mat dst,
  Mat kernel,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, CvPoint, ffi.Int, ffi.Int, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_erode_1(
  Mat src,
  Mat dst,
  Mat kernel,
  CvPoint anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fillPoly(
  Mat img,
  VecVecPoint points,
  Scalar color,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar, ffi.Int, ffi.Int,
        CvPoint, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fillPoly_1(
  Mat img,
  VecVecPoint points,
  Scalar color,
  int lineType,
  int shift,
  CvPoint offset,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, CvPoint, ffi.Double,
        ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_filter2D(
  Mat src,
  Mat dst,
  int ddepth,
  Mat kernel,
  CvPoint anchor,
  double delta,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecVecPoint>,
        ffi.Pointer<VecVec4i>, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findContours(
  Mat src,
  ffi.Pointer<VecVecPoint> out_contours,
  ffi.Pointer<VecVec4i> out_hierarchy,
  int mode,
  int method,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecVecPoint2f>,
        ffi.Pointer<VecVec4i>, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findContours2f(
  Mat src,
  ffi.Pointer<VecVecPoint2f> out_contours,
  ffi.Pointer<VecVec4i> out_hierarchy,
  int mode,
  int method,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Pointer<RotatedRect>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fitEllipse(
  VecPoint pts,
  ffi.Pointer<RotatedRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, ffi.Pointer<RotatedRect>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fitEllipse2f(
  VecPoint2f pts,
  ffi.Pointer<RotatedRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, Mat, ffi.Int, ffi.Double,
        ffi.Double, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fitLine(
  VecPoint pts,
  Mat line,
  int distType,
  double param,
  double reps,
  double aeps,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, Mat, ffi.Int, ffi.Double,
        ffi.Double, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fitLine2f(
  VecPoint2f pts,
  Mat line,
  int distType,
  double param,
  double reps,
  double aeps,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        Mat,
        CvPoint,
        Scalar,
        ffi.Pointer<CvRect>,
        Scalar,
        Scalar,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_floodFill(
  Mat src,
  Mat mask,
  CvPoint seedPoint,
  Scalar newVal,
  ffi.Pointer<CvRect> rect,
  Scalar loDiff,
  Scalar upDiff,
  int flags,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, VecPoint, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getAffineTransform(
  VecPoint src,
  VecPoint dst,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getAffineTransform2f(
  VecPoint2f src,
  VecPoint2f dst,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getGaussianKernel(
  int ksize,
  double sigma,
  int ktype,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, VecPoint, ffi.Pointer<Mat>, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getPerspectiveTransform(
  VecPoint src,
  VecPoint dst,
  ffi.Pointer<Mat> rval,
  int solveMethod,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>,
        ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getPerspectiveTransform2f(
  VecPoint2f src,
  VecPoint2f dst,
  ffi.Pointer<Mat> rval,
  int solveMethod,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, CvSize, CvPoint2f, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getRectSubPix(
  Mat src,
  CvSize patchSize,
  CvPoint2f center,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CvPoint2f, ffi.Double, ffi.Double,
        ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getRotationMatrix2D(
  CvPoint2f center,
  double angle,
  double scale,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, CvSize, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getStructuringElement(
  int shape,
  CvSize ksize,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Double,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<CvSize>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getTextSize(
  ffi.Pointer<ffi.Char> text,
  int fontFace,
  double fontScale,
  int thickness,
  ffi.Pointer<ffi.Int> baseline,
  ffi.Pointer<CvSize> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        ffi.Pointer<VecPoint2f>,
        ffi.Int,
        ffi.Double,
        ffi.Double,
        Mat,
        ffi.Int,
        ffi.Bool,
        ffi.Double,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_goodFeaturesToTrack(
  Mat img,
  ffi.Pointer<VecPoint2f> corners,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  bool useHarrisDetector,
  double k,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        ffi.Pointer<VecPoint2f>,
        ffi.Int,
        ffi.Double,
        ffi.Double,
        Mat,
        ffi.Int,
        ffi.Int,
        ffi.Bool,
        ffi.Double,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_goodFeaturesToTrack_1(
  Mat img,
  ffi.Pointer<VecPoint2f> corners,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  int gradientSize,
  bool useHarrisDetector,
  double k,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, CvRect, Mat, Mat, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_grabCut(
  Mat img,
  Mat mask,
  CvRect rect,
  Mat bgdModel,
  Mat fgdModel,
  int iterCount,
  int mode,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_integral(
  Mat src,
  Mat sum,
  Mat sqsum,
  Mat tilted,
  int sdepth,
  int sqdepth,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<VecPoint>,
        ffi.Bool, ffi.Pointer<ffi.Float>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_intersectConvexConvex(
  VecPoint p1,
  VecPoint p2,
  ffi.Pointer<VecPoint> p12,
  bool handleNested,
  ffi.Pointer<ffi.Float> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_invertAffineTransform(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Bool Function(VecPoint)>()
external bool cv_isContourConvex(
  VecPoint contour,
);

@ffi.Native<ffi.Bool Function(VecPoint2f)>()
external bool cv_isContourConvex2f(
  VecPoint2f contour,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, Scalar, ffi.Int,
        ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_line(
  Mat img,
  CvPoint pt1,
  CvPoint pt2,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, CvPoint2f, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_linearPolar(
  Mat src,
  Mat dst,
  CvPoint2f center,
  double maxRadius,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, CvPoint2f, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_logPolar(
  Mat src,
  Mat dst,
  CvPoint2f center,
  double m,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Int, ffi.Double,
        ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_matchShapes(
  VecPoint contour1,
  VecPoint contour2,
  int method,
  double parameter,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_matchTemplate(
  Mat image,
  Mat templ,
  Mat result,
  int method,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_medianBlur(
  Mat src,
  Mat dst,
  int ksize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Pointer<RotatedRect>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_minAreaRect(
  VecPoint pts,
  ffi.Pointer<RotatedRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, ffi.Pointer<RotatedRect>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_minAreaRect2f(
  VecPoint2f pts,
  ffi.Pointer<RotatedRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<CvPoint2f>,
        ffi.Pointer<ffi.Float>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_minEnclosingCircle(
  VecPoint pts,
  ffi.Pointer<CvPoint2f> center,
  ffi.Pointer<ffi.Float> radius,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<CvPoint2f>,
        ffi.Pointer<ffi.Float>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_minEnclosingCircle2f(
  VecPoint2f pts,
  ffi.Pointer<CvPoint2f> center,
  ffi.Pointer<ffi.Float> radius,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Bool, ffi.Pointer<Moment>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_moments(
  Mat src,
  bool binaryImage,
  ffi.Pointer<Moment> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_morphologyDefaultBorderValue(
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_morphologyEx(
  Mat src,
  Mat dst,
  int op,
  Mat kernel,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, CvPoint, ffi.Int,
        ffi.Int, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_morphologyEx_1(
  Mat src,
  Mat dst,
  int op,
  Mat kernel,
  CvPoint pt,
  int iterations,
  int borderType,
  Scalar borderValue,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<ffi.Double>,
        ffi.Pointer<CvPoint2f>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_phaseCorrelate(
  Mat src1,
  Mat src2,
  Mat window,
  ffi.Pointer<ffi.Double> response,
  ffi.Pointer<CvPoint2f> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, CvPoint2f, ffi.Bool,
        ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_pointPolygonTest(
  VecPoint pts,
  CvPoint2f pt,
  bool measureDist,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, CvPoint2f, ffi.Bool,
        ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_pointPolygonTest2f(
  VecPoint2f pts,
  CvPoint2f pt,
  bool measureDist,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, ffi.Bool, Scalar, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_polylines(
  Mat img,
  VecVecPoint points,
  bool isClosed,
  Scalar color,
  int thickness,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, CvPoint, ffi.Int,
        ffi.Double, Scalar, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_putText(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  CvPoint org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, CvPoint, ffi.Int,
        ffi.Double, Scalar, ffi.Int, ffi.Int, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_putText_1(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  CvPoint org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
  int lineType,
  bool bottomLeftOrigin,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, CvSize, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_pyrDown(
  Mat src,
  Mat dst,
  CvSize dstsize,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, CvSize, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_pyrUp(
  Mat src,
  Mat dst,
  CvSize dstsize,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, CvRect, Scalar, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_rectangle(
  Mat img,
  CvRect rect,
  Scalar color,
  int thickness,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, CvRect, Scalar, ffi.Int, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_rectangle_1(
  Mat img,
  CvRect rect,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_remap(
  Mat src,
  Mat dst,
  Mat map1,
  Mat map2,
  int interpolation,
  int borderMode,
  Scalar borderValue,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Double, ffi.Double,
        ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_resize(
  Mat src,
  Mat dst,
  CvSize sz,
  double fx,
  double fy,
  int interp,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, Mat, CvPoint,
        ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_sepFilter2D(
  Mat src,
  Mat dst,
  int ddepth,
  Mat kernelX,
  Mat kernelY,
  CvPoint anchor,
  double delta,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_spatialGradient(
  Mat src,
  Mat dx,
  Mat dy,
  int ksize,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, CvSize, CvPoint, ffi.Bool,
        ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_sqrBoxFilter(
  Mat src,
  Mat dst,
  int ddepth,
  CvSize ps,
  CvPoint anchor,
  bool normalize,
  int borderType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_threshold(
  Mat src,
  Mat dst,
  double thresh,
  double maxvalue,
  int typ,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_warpAffine(
  Mat src,
  Mat dst,
  Mat rot_mat,
  CvSize dsize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, CvSize, ffi.Int, ffi.Int, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_warpAffine_1(
  Mat src,
  Mat dst,
  Mat rot_mat,
  CvSize dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_warpPerspective(
  Mat src,
  Mat dst,
  Mat m,
  CvSize dsize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, CvSize, ffi.Int, ffi.Int, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_warpPerspective_1(
  Mat src,
  Mat dst,
  Mat rot_mat,
  CvSize dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_watershed(
  Mat image,
  Mat markers,
  imp$1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CLAHEPtr)>>
      get cv_CLAHE_close => ffi.Native.addressOf(self.cv_CLAHE_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Subdiv2DPtr)>>
      get cv_Subdiv2D_close => ffi.Native.addressOf(self.cv_Subdiv2D_close);
}

final class CLAHE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CLAHEPtr = ffi.Pointer<CLAHE>;
typedef CvPoint = imp$1.CvPoint;
typedef CvPoint2f = imp$1.CvPoint2f;
typedef CvRect = imp$1.CvRect;
typedef CvSize = imp$1.CvSize;
typedef CvStatus = imp$1.CvStatus;
typedef Mat = imp$1.Mat;
typedef Moment = imp$1.Moment;
typedef RotatedRect = imp$1.RotatedRect;
typedef Scalar = imp$1.Scalar;

final class Subdiv2D extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef Subdiv2DPtr = ffi.Pointer<Subdiv2D>;
typedef TermCriteria = imp$1.TermCriteria;
typedef Vec4f = imp$1.Vec4f;
typedef Vec6f = imp$1.Vec6f;
typedef VecF32 = imp$1.VecF32;
typedef VecI32 = imp$1.VecI32;
typedef VecMat = imp$1.VecMat;
typedef VecPoint = imp$1.VecPoint;
typedef VecPoint2f = imp$1.VecPoint2f;
typedef VecVec4i = imp$1.VecVec4i;
typedef VecVecPoint = imp$1.VecVecPoint;
typedef VecVecPoint2f = imp$1.VecVecPoint2f;
