// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Pointer<Vec3d>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_RQDecomp3x3(
  imp$1.MatIn src,
  imp$1.MatOut mtxR,
  imp$1.MatOut mtxQ,
  imp$1.MatOut Qx,
  imp$1.MatOut Qy,
  imp$1.MatOut Qz,
  ffi.Pointer<Vec3d> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn, imp$1.MatOut, imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Rodrigues(
  imp$1.MatIn src,
  imp$1.MatOut dst,
  imp$1.MatOut jacobian,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(StereoBMPtr)>()
external void cv_StereoBM_close(
  StereoBMPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        StereoBM, imp$1.MatIn, imp$1.MatIn, imp$1.MatOut)>()
external ffi.Pointer<CvStatus> cv_StereoBM_compute(
  StereoBM self,
  imp$1.MatIn left,
  imp$1.MatIn right,
  imp$1.MatOut disparity,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Pointer<StereoBM>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_StereoBM_create(
  int numDisparities,
  int blockSize,
  ffi.Pointer<StereoBM> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getBlockSize(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getDisp12MaxDiff(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getMinDisparity(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getNumDisparities(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getPreFilterCap(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getPreFilterSize(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getPreFilterType(
  StereoBM self,
);

@ffi.Native<ffi.Pointer<CvRect> Function(StereoBM)>()
external ffi.Pointer<CvRect> cv_StereoBM_getROI1(
  StereoBM self,
);

@ffi.Native<ffi.Pointer<CvRect> Function(StereoBM)>()
external ffi.Pointer<CvRect> cv_StereoBM_getROI2(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getSmallerBlockSize(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getSpeckleRange(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getSpeckleWindowSize(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getTextureThreshold(
  StereoBM self,
);

@ffi.Native<ffi.Int Function(StereoBM)>()
external int cv_StereoBM_getUniquenessRatio(
  StereoBM self,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setBlockSize(
  StereoBM self,
  int blockSize,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setDisp12MaxDiff(
  StereoBM self,
  int disp12MaxDiff,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setMinDisparity(
  StereoBM self,
  int minDisparity,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setNumDisparities(
  StereoBM self,
  int numDisparities,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setPreFilterCap(
  StereoBM self,
  int preFilterCap,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setPreFilterSize(
  StereoBM self,
  int preFilterSize,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setPreFilterType(
  StereoBM self,
  int preFilterType,
);

@ffi.Native<ffi.Void Function(StereoBM, CvRect)>()
external void cv_StereoBM_setROI1(
  StereoBM self,
  CvRect roi1,
);

@ffi.Native<ffi.Void Function(StereoBM, CvRect)>()
external void cv_StereoBM_setROI2(
  StereoBM self,
  CvRect roi2,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setSmallerBlockSize(
  StereoBM self,
  int blockSize,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setSpeckleRange(
  StereoBM self,
  int speckleRange,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setSpeckleWindowSize(
  StereoBM self,
  int speckleWindowSize,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setTextureThreshold(
  StereoBM self,
  int textureThreshold,
);

@ffi.Native<ffi.Void Function(StereoBM, ffi.Int)>()
external void cv_StereoBM_setUniquenessRatio(
  StereoBM self,
  int uniquenessRatio,
);

@ffi.Native<ffi.Void Function(StereoSGBMPtr)>()
external void cv_StereoSGBM_close(
  StereoSGBMPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        StereoSGBM, imp$1.MatIn, imp$1.MatIn, imp$1.MatOut)>()
external ffi.Pointer<CvStatus> cv_StereoSGBM_compute(
  StereoSGBM self,
  imp$1.MatIn left,
  imp$1.MatIn right,
  imp$1.MatOut disparity,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<StereoSGBM>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_StereoSGBM_create(
  int minDisparity,
  int numDisparities,
  int blockSize,
  int P1,
  int P2,
  int disp12MaxDiff,
  int preFilterCap,
  int uniquenessRatio,
  int speckleWindowSize,
  int speckleRange,
  int mode,
  ffi.Pointer<StereoSGBM> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getBlockSize(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getDisp12MaxDiff(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getMinDisparity(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getMode(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getNumDisparities(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getP1(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getP2(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getPreFilterCap(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getSpeckleRange(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getSpeckleWindowSize(
  StereoSGBM self,
);

@ffi.Native<ffi.Int Function(StereoSGBM)>()
external int cv_StereoSGBM_getUniquenessRatio(
  StereoSGBM self,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setBlockSize(
  StereoSGBM self,
  int blockSize,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setDisp12MaxDiff(
  StereoSGBM self,
  int disp12MaxDiff,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setMinDisparity(
  StereoSGBM self,
  int minDisparity,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setMode(
  StereoSGBM self,
  int mode,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setNumDisparities(
  StereoSGBM self,
  int numDisparities,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setP1(
  StereoSGBM self,
  int P1,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setP2(
  StereoSGBM self,
  int P2,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setPreFilterCap(
  StereoSGBM self,
  int preFilterCap,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setSpeckleRange(
  StereoSGBM self,
  int speckleRange,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setSpeckleWindowSize(
  StereoSGBM self,
  int speckleWindowSize,
);

@ffi.Native<ffi.Void Function(StereoSGBM, ffi.Int)>()
external void cv_StereoSGBM_setUniquenessRatio(
  StereoSGBM self,
  int uniquenessRatio,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecVecPoint3f,
        VecVecPoint2f,
        CvSize,
        Mat,
        Mat,
        Mat,
        Mat,
        ffi.Int,
        TermCriteria,
        ffi.Pointer<ffi.Double>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_calibrateCamera(
  VecVecPoint3f objectPoints,
  VecVecPoint2f imagePoints,
  CvSize imageSize,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat rvecs,
  Mat tvecs,
  int flag,
  TermCriteria criteria,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Bool Function(Mat, CvSize)>()
external bool cv_checkChessboard(
  Mat img,
  CvSize size,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn, ffi.Int, imp$1.MatIn, imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_computeCorrespondEpilines(
  imp$1.MatIn src,
  int whichImage,
  imp$1.MatIn F,
  imp$1.MatOut lines,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn, imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_convertPointsFromHomogeneous(
  imp$1.MatIn src,
  imp$1.MatOut dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn, imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_convertPointsHomogeneous(
  imp$1.MatIn src,
  imp$1.MatOut dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn, imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_convertPointsToHomogeneous(
  imp$1.MatIn src,
  imp$1.MatOut dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatIn, imp$1.MatIn,
        imp$1.MatOut, imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_correctMatches(
  imp$1.MatIn F,
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  imp$1.MatOut newPoints1,
  imp$1.MatOut newPoints2,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatOut, imp$1.MatOut,
        imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_decomposeEssentialMat(
  imp$1.MatIn E,
  imp$1.MatOut R1,
  imp$1.MatOut R2,
  imp$1.MatOut t,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatIn, VecMat, VecMat,
        VecMat, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_decomposeHomographyMat(
  imp$1.MatIn H,
  imp$1.MatIn K,
  VecMat rotations,
  VecMat translations,
  VecMat normals,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_decomposeProjectionMatrix(
  imp$1.MatIn projMatrix,
  imp$1.MatOut cameraMatrix,
  imp$1.MatOut rotMatrix,
  imp$1.MatOut transVect,
  imp$1.MatOut rotMatrixX,
  imp$1.MatOut rotMatrixY,
  imp$1.MatOut rotMatrixZ,
  imp$1.MatOut eulerAngles,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, CvSize, VecPoint2f, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_drawChessboardCorners(
  Mat image,
  CvSize patternSize,
  VecPoint2f corners,
  bool patternWasFound,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatInOut, imp$1.MatIn, imp$1.MatIn,
        imp$1.MatIn, imp$1.MatIn, ffi.Float, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_drawFrameAxes(
  imp$1.MatInOut image,
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  imp$1.MatIn rvec,
  imp$1.MatIn tvec,
  double length,
  int thickness,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_estimateAffine2D(
  VecPoint2f from,
  VecPoint2f to,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f,
        VecPoint2f,
        Mat,
        ffi.Int,
        ffi.Double,
        ffi.Size,
        ffi.Double,
        ffi.Size,
        ffi.Pointer<Mat>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_estimateAffine2D_1(
  VecPoint2f from,
  VecPoint2f to,
  Mat inliers,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>, ffi.Bool,
        ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_estimateAffine3D(
  Mat src,
  Mat dst,
  ffi.Pointer<ffi.Double> scale,
  bool force_rotation,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Double, ffi.Double,
        ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_estimateAffine3D_1(
  Mat src,
  Mat dst,
  Mat out,
  Mat inliers,
  double ransacThreshold,
  double confidence,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_estimateAffinePartial2D(
  VecPoint2f from,
  VecPoint2f to,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f,
        VecPoint2f,
        Mat,
        ffi.Int,
        ffi.Double,
        ffi.Size,
        ffi.Double,
        ffi.Size,
        ffi.Pointer<Mat>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_estimateAffinePartial2D_1(
  VecPoint2f from,
  VecPoint2f to,
  Mat inliers,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, CvSize, imp$1.MatIn, ffi.Float,
        ffi.Bool, imp$1.MatOut, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_estimateChessboardSharpness(
  imp$1.MatIn image,
  CvSize patternSize,
  imp$1.MatIn corners,
  double rise_distance,
  bool vertical,
  imp$1.MatOut sharpness,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Double,
        ffi.Double,
        ffi.Pointer<ffi.Int>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_estimateTranslation3D(
  imp$1.MatIn src,
  imp$1.MatIn dst,
  imp$1.MatOut out,
  imp$1.MatOut inliers,
  double ransacThreshold,
  double confidence,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecMat, VecMat, imp$1.MatIn, imp$1.MatIn,
        imp$1.MatOut, imp$1.MatIn, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_filterHomographyDecompByVisibleRefpoints(
  VecMat rotations,
  VecMat normals,
  imp$1.MatIn beforePoints,
  imp$1.MatIn afterPoints,
  imp$1.MatOut possibleSolutions,
  imp$1.MatIn pointsMask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatInOut, ffi.Double, ffi.Int,
        ffi.Double, imp$1.MatInOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_filterSpeckles(
  imp$1.MatInOut img,
  double newVal,
  int maxSpeckleSize,
  double maxDiff,
  imp$1.MatInOut buf,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatInOut, CvSize,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_find4QuadCornerSubpix(
  imp$1.MatIn img,
  imp$1.MatInOut corners,
  CvSize region_size,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, CvSize, ffi.Pointer<VecPoint2f>,
        ffi.Int, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findChessboardCorners(
  Mat image,
  CvSize patternSize,
  ffi.Pointer<VecPoint2f> corners,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, CvSize, ffi.Pointer<VecPoint2f>,
        ffi.Int, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findChessboardCornersSB(
  Mat image,
  CvSize patternSize,
  ffi.Pointer<VecPoint2f> out_corners,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, CvSize, ffi.Pointer<VecPoint2f>,
        ffi.Int, Mat, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findChessboardCornersSB_1(
  Mat image,
  CvSize patternSize,
  ffi.Pointer<VecPoint2f> out_corners,
  int flags,
  Mat meta,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, CvSize, imp$1.MatOut, ffi.Int,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findCirclesGrid(
  imp$1.MatIn image,
  CvSize patternSize,
  imp$1.MatOut centers,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        ffi.Double,
        CvPoint2d,
        ffi.Int,
        ffi.Double,
        ffi.Double,
        ffi.Int,
        imp$1.MatOut,
        ffi.Pointer<Mat>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findEssentialMat(
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  double focal,
  CvPoint2d pp,
  int method,
  double prob,
  double threshold,
  int maxIters,
  imp$1.MatOut mask,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        ffi.Int,
        ffi.Double,
        ffi.Double,
        ffi.Int,
        imp$1.MatOut,
        ffi.Pointer<Mat>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findEssentialMat_1(
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  imp$1.MatIn cameraMatrix,
  int method,
  double prob,
  double threshold,
  int maxIters,
  imp$1.MatOut mask,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        ffi.Int,
        ffi.Double,
        ffi.Double,
        ffi.Int,
        imp$1.MatOut,
        ffi.Pointer<Mat>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findFundamentalMat(
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  int method,
  double ransacReprojThreshold,
  double confidence,
  int maxIters,
  imp$1.MatOut mask,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatIn, imp$1.MatOut,
        UsacParams, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findFundamentalMat_1(
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  imp$1.MatOut mask,
  UsacParams params,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        ffi.Int,
        ffi.Double,
        ffi.Double,
        ffi.Pointer<Mat>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findFundamentalMat_2(
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  imp$1.MatOut mask,
  int method,
  double ransacReprojThreshold,
  double confidence,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, imp$1.MatOut,
        ffi.Int, ffi.Double, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findHomography(
  Mat src,
  Mat dst,
  int method,
  double ransacReprojThreshold,
  imp$1.MatOut mask,
  int maxIters,
  double confidence,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatIn, imp$1.MatOut,
        UsacParams, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findHomography_1(
  imp$1.MatIn srcPoints,
  imp$1.MatIn dstPoints,
  imp$1.MatOut mask,
  UsacParams params,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat,
        VecMat,
        CvSize,
        imp$1.MatInOut,
        imp$1.MatInOut,
        VecMat,
        VecMat,
        ffi.Int,
        TermCriteria,
        ffi.Pointer<ffi.Double>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_calibrate(
  VecMat objectPoints,
  VecMat imagePoints,
  CvSize imageSize,
  imp$1.MatInOut k,
  imp$1.MatInOut d,
  VecMat rvecs,
  VecMat tvecs,
  int flags,
  TermCriteria criteria,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatOut, imp$1.MatIn,
        imp$1.MatIn, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_distortPoints(
  imp$1.MatIn undistorted,
  imp$1.MatOut distorted,
  imp$1.MatIn K,
  imp$1.MatIn D,
  double alpha,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatOut, imp$1.MatInOut,
        imp$1.MatIn, imp$1.MatIn, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_distortPoints_1(
  imp$1.MatIn undistorted,
  imp$1.MatOut distorted,
  imp$1.MatInOut Kundistorted,
  imp$1.MatIn K,
  imp$1.MatIn D,
  double alpha,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        CvSize,
        imp$1.MatIn,
        imp$1.MatOut,
        ffi.Double,
        CvSize,
        ffi.Double,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus>
    cv_fisheye_estimateNewCameraMatrixForUndistortRectify(
  imp$1.MatIn k,
  imp$1.MatIn d,
  CvSize imgSize,
  imp$1.MatIn r,
  imp$1.MatOut p,
  double balance,
  CvSize newSize,
  double fovScale,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        CvSize,
        ffi.Int,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_initUndistortRectifyMap(
  imp$1.MatIn k,
  imp$1.MatIn d,
  imp$1.MatIn r,
  imp$1.MatIn p,
  CvSize imgSize,
  int m1type,
  imp$1.MatOut map1,
  imp$1.MatOut map2,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        ffi.Double,
        imp$1.MatOut,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_projectPoints(
  imp$1.MatIn objectPoints,
  imp$1.MatOut imagePoints,
  imp$1.MatIn rvec,
  imp$1.MatIn tvec,
  imp$1.MatIn k,
  imp$1.MatIn d,
  double alpha,
  imp$1.MatOut jacobian,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Bool,
        ffi.Int,
        TermCriteria,
        ffi.Pointer<ffi.Bool>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_solvePnP(
  imp$1.MatIn objectPoints,
  imp$1.MatIn imagePoints,
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  imp$1.MatOut rvec,
  imp$1.MatOut tvec,
  bool useExtrinsicGuess,
  int flags,
  TermCriteria criteria,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Bool,
        ffi.Int,
        ffi.Float,
        ffi.Double,
        imp$1.MatOut,
        ffi.Int,
        TermCriteria,
        ffi.Pointer<ffi.Bool>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_solvePnPRansac(
  imp$1.MatIn objectPoints,
  imp$1.MatIn imagePoints,
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  imp$1.MatOut rvec,
  imp$1.MatOut tvec,
  bool useExtrinsicGuess,
  int iterationsCount,
  double reprojectionError,
  double confidence,
  imp$1.MatOut inliers,
  int flags,
  TermCriteria criteria,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_undistortImage(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, CvSize, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_undistortImage_1(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat knew,
  CvSize size,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fisheye_undistortPoints(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat R,
  Mat P,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, CvSize, ffi.Bool, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getDefaultNewCameraMatrix(
  Mat cameraMatrix,
  CvSize size,
  bool centerPrincipalPoint,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Double, CvSize,
        ffi.Pointer<CvRect>, ffi.Bool, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getOptimalNewCameraMatrix(
  Mat cameraMatrix,
  Mat distCoeffs,
  CvSize size,
  double alpha,
  CvSize newImgSize,
  ffi.Pointer<CvRect> validPixROI,
  bool centerPrincipalPoint,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, CvSize, ffi.Int, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_initUndistortRectifyMap(
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat r,
  Mat newCameraMatrix,
  CvSize size,
  int m1type,
  Mat map1,
  Mat map2,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        CvSize,
        ffi.Int,
        ffi.Int,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Int,
        ffi.Double,
        ffi.Pointer<ffi.Float>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_initWideAngleProjMap(
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  CvSize size,
  int destImageWidth,
  int m1type,
  imp$1.MatOut map1,
  imp$1.MatOut map2,
  int projType,
  double alpha,
  ffi.Pointer<ffi.Float> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatIn, imp$1.MatOut,
        imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_matMulDeriv(
  imp$1.MatIn A,
  imp$1.MatIn B,
  imp$1.MatOut dABdA,
  imp$1.MatOut dABdB,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Double,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_projectPoints(
  imp$1.MatIn objectPoints,
  imp$1.MatIn rvec,
  imp$1.MatIn tvec,
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  imp$1.MatOut imagePoints,
  imp$1.MatOut jacobian,
  double aspectRatio,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Double,
        imp$1.MatInOut,
        imp$1.MatOut,
        ffi.Pointer<ffi.Int>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_recoverPose(
  imp$1.MatIn E,
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  imp$1.MatIn cameraMatrix,
  imp$1.MatOut R,
  imp$1.MatOut t,
  double distanceThresh,
  imp$1.MatInOut mask,
  imp$1.MatOut triangulatedPoints,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Double,
        CvPoint2d,
        imp$1.MatInOut,
        ffi.Pointer<ffi.Int>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_recoverPose_1(
  imp$1.MatIn E,
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  imp$1.MatOut R,
  imp$1.MatOut t,
  double focal,
  CvPoint2d pp,
  imp$1.MatInOut mask,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatOut, imp$1.MatIn,
        ffi.Bool, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_reprojectImageTo3D(
  imp$1.MatIn disparity,
  imp$1.MatOut _3dImage,
  imp$1.MatIn Q,
  bool handleMissingValues,
  int ddepth,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Double Function(imp$1.MatIn, imp$1.MatIn, imp$1.MatIn)>()
external double cv_sampsonDistance(
  imp$1.MatIn pt1,
  imp$1.MatIn pt2,
  imp$1.MatIn F,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        ffi.Pointer<VecMat>,
        ffi.Pointer<VecMat>,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solveP3P(
  imp$1.MatIn objectPoints,
  imp$1.MatIn imagePoints,
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  ffi.Pointer<VecMat> rvecs,
  ffi.Pointer<VecMat> tvecs,
  int flags,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Bool,
        ffi.Int,
        ffi.Pointer<ffi.Bool>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solvePnP(
  imp$1.MatIn objectPoints,
  imp$1.MatIn imagePoints,
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  imp$1.MatOut rvec,
  imp$1.MatOut tvec,
  bool useExtrinsicGuess,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        ffi.Pointer<VecMat>,
        ffi.Pointer<VecMat>,
        ffi.Bool,
        ffi.Int,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        ffi.Pointer<ffi.Int>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solvePnPGeneric(
  imp$1.MatIn objectPoints,
  imp$1.MatIn imagePoints,
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  ffi.Pointer<VecMat> rvecs,
  ffi.Pointer<VecMat> tvecs,
  bool useExtrinsicGuess,
  int flags,
  imp$1.MatIn rvec,
  imp$1.MatIn tvec,
  imp$1.MatOut reprojectionError,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Bool,
        ffi.Int,
        ffi.Float,
        ffi.Double,
        imp$1.MatOut,
        ffi.Int,
        ffi.Pointer<ffi.Bool>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solvePnPRansac(
  imp$1.MatIn objectPoints,
  imp$1.MatIn imagePoints,
  imp$1.MatIn cameraMatrix,
  imp$1.MatIn distCoeffs,
  imp$1.MatOut rvec,
  imp$1.MatOut tvec,
  bool useExtrinsicGuess,
  int iterationsCount,
  double reprojectionError,
  double confidence,
  imp$1.MatOut inliers,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, Mat, Mat,
        imp$1.UsacParams, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solvePnPRansac_1(
  Mat objectPoints,
  Mat imagePoints,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat rvec,
  Mat tvec,
  Mat inliers,
  imp$1.UsacParams params,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, Mat, imp$1.TermCriteria, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solvePnPRefineLM(
  Mat objectPoints,
  Mat imagePoints,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat rvec,
  Mat tvec,
  imp$1.TermCriteria criteria,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, Mat,
        imp$1.TermCriteria, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solvePnPRefineVVS(
  Mat objectPoints,
  Mat imagePoints,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat rvec,
  Mat tvec,
  imp$1.TermCriteria criteria,
  double VVSlambda,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat,
        VecMat,
        VecMat,
        imp$1.MatInOut,
        imp$1.MatInOut,
        imp$1.MatInOut,
        imp$1.MatInOut,
        CvSize,
        imp$1.MatInOut,
        imp$1.MatInOut,
        imp$1.MatOut,
        imp$1.MatOut,
        VecMat,
        VecMat,
        imp$1.MatOut,
        ffi.Int,
        imp$1.TermCriteria,
        ffi.Pointer<ffi.Double>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_stereoCalibrate(
  VecMat objectPoints,
  VecMat imagePoints1,
  VecMat imagePoints2,
  imp$1.MatInOut cameraMatrix1,
  imp$1.MatInOut distCoeffs1,
  imp$1.MatInOut cameraMatrix2,
  imp$1.MatInOut distCoeffs2,
  CvSize imageSize,
  imp$1.MatInOut R,
  imp$1.MatInOut T,
  imp$1.MatOut E,
  imp$1.MatOut F,
  VecMat rvecs,
  VecMat tvecs,
  imp$1.MatOut perViewErrors,
  int flags,
  imp$1.TermCriteria criteria,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        CvSize,
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Int,
        ffi.Double,
        CvSize,
        ffi.Pointer<imp$1.CvRect>,
        ffi.Pointer<imp$1.CvRect>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_stereoRectify(
  imp$1.MatIn cameraMatrix1,
  imp$1.MatIn distCoeffs1,
  imp$1.MatIn cameraMatrix2,
  imp$1.MatIn distCoeffs2,
  CvSize imageSize,
  imp$1.MatIn R,
  imp$1.MatIn T,
  imp$1.MatOut R1,
  imp$1.MatOut R2,
  imp$1.MatOut P1,
  imp$1.MatOut P2,
  imp$1.MatOut Q,
  int flags,
  double alpha,
  CvSize newImageSize,
  ffi.Pointer<imp$1.CvRect> validPixROI1,
  ffi.Pointer<imp$1.CvRect> validPixROI2,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        imp$1.MatIn,
        imp$1.MatIn,
        imp$1.MatIn,
        CvSize,
        imp$1.MatOut,
        imp$1.MatOut,
        ffi.Double,
        ffi.Pointer<ffi.Bool>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_stereoRectifyUncalibrated(
  imp$1.MatIn points1,
  imp$1.MatIn points2,
  imp$1.MatIn F,
  CvSize imgSize,
  imp$1.MatOut H1,
  imp$1.MatOut H2,
  double threshold,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(imp$1.MatIn, imp$1.MatIn, imp$1.MatIn,
        imp$1.MatIn, imp$1.MatOut, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_triangulatePoints(
  imp$1.MatIn projMatr1,
  imp$1.MatIn projMatr2,
  imp$1.MatIn projPoints1,
  imp$1.MatIn projPoints2,
  imp$1.MatOut points4D,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_undistort(
  Mat src,
  Mat dst,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat newCameraMatrix,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, imp$1.TermCriteria, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_undistortImagePoints(
  Mat src,
  Mat dst,
  Mat cameraMatrix,
  Mat distCoeffs,
  imp$1.TermCriteria criteria,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, Mat, TermCriteria, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_undistortPoints(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat r,
  Mat p,
  TermCriteria criteria,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_validateDisparity(
  Mat disparity,
  Mat cost,
  int minDisparity,
  int numberOfDisparities,
  int disp12MaxDisp,
  imp$1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(StereoBMPtr)>>
      get cv_StereoBM_close => ffi.Native.addressOf(self.cv_StereoBM_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(StereoSGBMPtr)>>
      get cv_StereoSGBM_close => ffi.Native.addressOf(self.cv_StereoSGBM_close);
}

typedef CvPoint2d = imp$1.CvPoint2d;
typedef CvRect = imp$1.CvRect;
typedef CvSize = imp$1.CvSize;
typedef CvStatus = imp$1.CvStatus;
typedef Mat = imp$1.Mat;
typedef Scalar = imp$1.Scalar;

final class StereoBM extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef StereoBMPtr = ffi.Pointer<StereoBM>;

final class StereoSGBM extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef StereoSGBMPtr = ffi.Pointer<StereoSGBM>;
typedef TermCriteria = imp$1.TermCriteria;
typedef UsacParams = imp$1.UsacParams;
typedef Vec3d = imp$1.Vec3d;
typedef VecMat = imp$1.VecMat;
typedef VecPoint2f = imp$1.VecPoint2f;
typedef VecVecPoint2f = imp$1.VecVecPoint2f;
typedef VecVecPoint3f = imp$1.VecVecPoint3f;
