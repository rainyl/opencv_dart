// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BackgroundSubtractorKNN, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_BackgroundSubtractorKNN_apply(
  BackgroundSubtractorKNN self,
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(BackgroundSubtractorKNNPtr)>()
external void cv_BackgroundSubtractorKNN_close(
  BackgroundSubtractorKNNPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorKNN>)>()
external ffi.Pointer<CvStatus> cv_BackgroundSubtractorKNN_create(
  ffi.Pointer<BackgroundSubtractorKNN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Bool, ffi.Pointer<BackgroundSubtractorKNN>)>()
external ffi.Pointer<CvStatus> cv_BackgroundSubtractorKNN_create_1(
  int history,
  double dist2Threshold,
  bool detectShadows,
  ffi.Pointer<BackgroundSubtractorKNN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BackgroundSubtractorMOG2, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_BackgroundSubtractorMOG2_apply(
  BackgroundSubtractorMOG2 self,
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>()
external void cv_BackgroundSubtractorMOG2_close(
  BackgroundSubtractorMOG2Ptr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorMOG2>)>()
external ffi.Pointer<CvStatus> cv_BackgroundSubtractorMOG2_create(
  ffi.Pointer<BackgroundSubtractorMOG2> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Bool, ffi.Pointer<BackgroundSubtractorMOG2>)>()
external ffi.Pointer<CvStatus> cv_BackgroundSubtractorMOG2_create_1(
  int history,
  double varThreshold,
  bool detectShadows,
  ffi.Pointer<BackgroundSubtractorMOG2> rval,
);

@ffi.Native<ffi.Void Function(KalmanFilterPtr)>()
external void cv_KalmanFilter_close(
  KalmanFilterPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, Mat, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_correct(
  KalmanFilter self,
  Mat measurement,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<KalmanFilter>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_create(
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
  ffi.Pointer<KalmanFilter> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_controlMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_errorCovPost(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_errorCovPre(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_gain(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_measurementMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_measurementNoiseCov(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_processNoiseCov(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_statePost(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_statePre(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp1(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp2(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp3(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp4(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp5(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_get_transitionMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_init(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, ffi.Int, ffi.Int, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_init_1(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_predict(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, Mat, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_predict_1(
  KalmanFilter self,
  Mat control,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_controlMatrix(
  KalmanFilter self,
  Mat controlMatrix,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_errorCovPost(
  KalmanFilter self,
  Mat errorCovPost,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_errorCovPre(
  KalmanFilter self,
  Mat errorCovPre,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_gain(
  KalmanFilter self,
  Mat gain,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_measurementMatrix(
  KalmanFilter self,
  Mat measurementMatrix,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_measurementNoiseCov(
  KalmanFilter self,
  Mat measurementNoiseCov,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_processNoiseCov(
  KalmanFilter self,
  Mat processNoiseCov,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_statePost(
  KalmanFilter self,
  Mat statePost,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_statePre(
  KalmanFilter self,
  Mat statePre,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> cv_KalmanFilter_set_transitionMatrix(
  KalmanFilter self,
  Mat transitionMatrix,
);

@ffi.Native<ffi.Void Function(TrackerMILPtr)>()
external void cv_TrackerMIL_close(
  TrackerMILPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<TrackerMIL>)>()
external ffi.Pointer<CvStatus> cv_TrackerMIL_create(
  ffi.Pointer<TrackerMIL> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        TrackerMIL, Mat, CvRect, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_TrackerMIL_init(
  TrackerMIL self,
  Mat image,
  CvRect bbox,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, ffi.Pointer<CvRect>,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_TrackerMIL_update(
  TrackerMIL self,
  Mat image,
  ffi.Pointer<CvRect> boundingBox,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_calcOpticalFlowFarneback(
  Mat prevImg,
  Mat nextImg,
  Mat flow,
  double pyrScale,
  int levels,
  int winsize,
  int iterations,
  int polyN,
  double polySigma,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        Mat,
        VecPoint2f,
        ffi.Pointer<VecPoint2f>,
        ffi.Pointer<VecUChar>,
        ffi.Pointer<VecF32>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_calcOpticalFlowPyrLK(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  ffi.Pointer<VecPoint2f> nextPts,
  ffi.Pointer<VecUChar> status,
  ffi.Pointer<VecF32> err,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        Mat,
        VecPoint2f,
        ffi.Pointer<VecPoint2f>,
        ffi.Pointer<VecUChar>,
        ffi.Pointer<VecF32>,
        CvSize,
        ffi.Int,
        TermCriteria,
        ffi.Int,
        ffi.Double,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_calcOpticalFlowPyrLK_1(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  ffi.Pointer<VecPoint2f> nextPts,
  ffi.Pointer<VecUChar> status,
  ffi.Pointer<VecF32> err,
  CvSize winSize,
  int maxLevel,
  TermCriteria criteria,
  int flags,
  double minEigThreshold,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, TermCriteria, Mat,
        ffi.Int, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findTransformECC(
  Mat templateImage,
  Mat inputImage,
  Mat warpMatrix,
  int motionType,
  TermCriteria criteria,
  Mat inputMask,
  int gaussFiltSize,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorKNNPtr)>>
      get cv_BackgroundSubtractorKNN_close =>
          ffi.Native.addressOf(self.cv_BackgroundSubtractorKNN_close);
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>>
      get cv_BackgroundSubtractorMOG2_close =>
          ffi.Native.addressOf(self.cv_BackgroundSubtractorMOG2_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilterPtr)>>
      get cv_KalmanFilter_close =>
          ffi.Native.addressOf(self.cv_KalmanFilter_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(TrackerMILPtr)>>
      get cv_TrackerMIL_close => ffi.Native.addressOf(self.cv_TrackerMIL_close);
}

final class BackgroundSubtractorKNN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorKNNPtr = ffi.Pointer<BackgroundSubtractorKNN>;

final class BackgroundSubtractorMOG2 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorMOG2Ptr = ffi.Pointer<BackgroundSubtractorMOG2>;
typedef CvRect = imp$1.CvRect;
typedef CvSize = imp$1.CvSize;
typedef CvStatus = imp$1.CvStatus;

final class KalmanFilter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KalmanFilterPtr = ffi.Pointer<KalmanFilter>;
typedef Mat = imp$1.Mat;
typedef TermCriteria = imp$1.TermCriteria;

final class Tracker extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class TrackerGOTURN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerGOTURNPtr = ffi.Pointer<TrackerGOTURN>;

final class TrackerMIL extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerMILPtr = ffi.Pointer<TrackerMIL>;
typedef TrackerPtr = ffi.Pointer<Tracker>;
typedef VecF32 = imp$1.VecF32;
typedef VecPoint2f = imp$1.VecPoint2f;
typedef VecUChar = imp$1.VecUChar;
