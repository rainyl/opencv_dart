// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<ffi.Void Function(ffi.Pointer<CvStatus>)>()
external void CvStatus_close(
  ffi.Pointer<CvStatus> self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_LUT(
  Mat src,
  Mat lut,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_adjustROI(
  Mat self,
  int dtop,
  int dbottom,
  int dleft,
  int dright,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int cv_Mat_channels(
  Mat self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_clone(
  Mat self,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(imp$1.MatPtr)>()
external void cv_Mat_close(
  imp$1.MatPtr self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>()
external void cv_Mat_closeVoid(
  ffi.Pointer<ffi.Void> self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_col(
  Mat self,
  int x,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int cv_Mat_cols(
  Mat self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_convertFp16(
  Mat self,
  Mat rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_convertTo(
  Mat self,
  Mat dst,
  int type,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_convertTo_1(
  Mat self,
  Mat dst,
  int type,
  double alpha,
  double beta,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_copyTo(
  Mat self,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_copyTo_1(
  Mat self,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

/// @brief Create empty Mat
///
/// ALL return values with a type of `Pointer of Struct`,
/// e.g.,
/// Mat, the internal pointer (Mat.ptr) MUST be NULL
/// otherwise the memory of mat.ptr pointed to will NOT be freed correctly.
/// Mat* mat = (Mat*)malloc(sizeof(Mat));
/// CvStatus *status = cv_Mat_create(mat);
/// Mat_close(mat);
///
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_Mat_create(
  ffi.Pointer<Mat> rval,
);

/// @brief Create Mat with specified size and type
///
/// @param rows number of rows
/// @param cols number of columns
/// @param type type of the created matrix
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_1(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint3i, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_10(
  VecPoint3i vec,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

/// @brief Create Mat with Mat::ptr
@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_11(
  Mat self,
  int rows,
  int cols,
  int type,
  int prows,
  int pcols,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_12(
  Mat self,
  int rowStart,
  int rowEnd,
  int colStart,
  int colEnd,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, CvRect, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_13(
  Mat self,
  CvRect roi,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

/// @brief Create Mat with specified sizes and type
///
/// @param sizes array of integers, each describing a dimension
/// @param type type of the created matrix
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecI32, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_2(
  VecI32 sizes,
  int type,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

/// @brief Create Mat with specified sizes and type
///
/// @param sizes array of integers, each describing a dimension
/// @param type type of the created matrix
/// @param ar array of values to initialize the matrix with
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecI32, ffi.Int, Scalar, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_3(
  VecI32 sizes,
  int type,
  Scalar ar,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

/// @brief Create Mat with specified sizes, type and data buffer
///
/// @param sizes array of integers, each describing a dimension
/// @param type type of the created matrix
/// @param buf buffer to initialize the matrix with, will be copied
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, ffi.Pointer<ffi.Void>,
        ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_4(
  VecI32 sizes,
  int type,
  ffi.Pointer<ffi.Void> buf,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

/// @brief Create Mat with Scalar values
///
/// @param scalar array of values to initialize the matrix with
/// @param rows number of rows
/// @param cols number of columns
/// @param type type of the created matrix
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<
    ffi.Pointer<CvStatus> Function(Scalar, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_5(
  Scalar scalar,
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

/// @brief Create Mat with rows, cols, type and data buffer
///
/// @param sizes array of integers, each describing a dimension
/// @param type type of the created matrix
/// @param buf buffer to initialize the matrix with, will be copied
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_6(
  int rows,
  int cols,
  int type,
  ffi.Pointer<ffi.Void> buf,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_6_no_copy(
  int rows,
  int cols,
  int type,
  ffi.Pointer<ffi.Void> buf,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

/// @brief Create Mat with specified vector of points
///
/// @param vec array of points
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_7(
  VecPoint vec,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_8(
  VecPoint2f vec,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint3f, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_create_9(
  VecPoint3f vec,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<uchar> Function(Mat)>(isLeaf: true)
external ffi.Pointer<uchar> cv_Mat_data(
  Mat self,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int cv_Mat_dims(
  Mat self,
);

@ffi.Native<ffi.Size Function(Mat)>(isLeaf: true)
external int cv_Mat_elemSize(
  Mat self,
);

@ffi.Native<ffi.Size Function(Mat)>(isLeaf: true)
external int cv_Mat_elemSize1(
  Mat self,
);

@ffi.Native<ffi.Bool Function(Mat)>()
external bool cv_Mat_empty(
  Mat self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_eye(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int cv_Mat_flags(
  Mat self,
);

@ffi.Native<ffi.Pointer<Vec2b> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec2b> cv_Mat_get_Vec2b(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec2d> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec2d> cv_Mat_get_Vec2d(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec2f> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec2f> cv_Mat_get_Vec2f(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec2i> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec2i> cv_Mat_get_Vec2i(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec2s> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec2s> cv_Mat_get_Vec2s(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec2w> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec2w> cv_Mat_get_Vec2w(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec3b> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec3b> cv_Mat_get_Vec3b(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec3d> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec3d> cv_Mat_get_Vec3d(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec3f> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec3f> cv_Mat_get_Vec3f(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec3i> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec3i> cv_Mat_get_Vec3i(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec3s> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec3s> cv_Mat_get_Vec3s(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec3w> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec3w> cv_Mat_get_Vec3w(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec4b> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec4b> cv_Mat_get_Vec4b(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec4d> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec4d> cv_Mat_get_Vec4d(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec4f> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec4f> cv_Mat_get_Vec4f(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec4i> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec4i> cv_Mat_get_Vec4i(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec4s> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec4s> cv_Mat_get_Vec4s(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec4w> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec4w> cv_Mat_get_Vec4w(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec6d> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec6d> cv_Mat_get_Vec6d(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec6f> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec6f> cv_Mat_get_Vec6f(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec6i> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec6i> cv_Mat_get_Vec6i(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Pointer<Vec8i> Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external ffi.Pointer<Vec8i> cv_Mat_get_Vec8i(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<float_t Function(Mat, ffi.Int)>(isLeaf: true)
external double cv_Mat_get_f32_1(
  Mat self,
  int i0,
);

@ffi.Native<float_t Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external double cv_Mat_get_f32_2(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<float_t Function(Mat, ffi.Int, ffi.Int, ffi.Int)>(isLeaf: true)
external double cv_Mat_get_f32_3(
  Mat self,
  int i0,
  int i1,
  int i2,
);

@ffi.Native<double_t Function(Mat, ffi.Int)>(isLeaf: true)
external double cv_Mat_get_f64_1(
  Mat self,
  int i0,
);

@ffi.Native<double_t Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external double cv_Mat_get_f64_2(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<double_t Function(Mat, ffi.Int, ffi.Int, ffi.Int)>(isLeaf: true)
external double cv_Mat_get_f64_3(
  Mat self,
  int i0,
  int i1,
  int i2,
);

@ffi.Native<ffi.Int16 Function(Mat, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i16_1(
  Mat self,
  int i0,
);

@ffi.Native<ffi.Int16 Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i16_2(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Int16 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i16_3(
  Mat self,
  int i0,
  int i1,
  int i2,
);

@ffi.Native<ffi.Int32 Function(Mat, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i32_1(
  Mat self,
  int i0,
);

@ffi.Native<ffi.Int32 Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i32_2(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Int32 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i32_3(
  Mat self,
  int i0,
  int i1,
  int i2,
);

@ffi.Native<ffi.Int8 Function(Mat, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i8_1(
  Mat self,
  int i0,
);

@ffi.Native<ffi.Int8 Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i8_2(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Int8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_i8_3(
  Mat self,
  int i0,
  int i1,
  int i2,
);

@ffi.Native<ffi.Uint16 Function(Mat, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_u16_1(
  Mat self,
  int i0,
);

@ffi.Native<ffi.Uint16 Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_u16_2(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Uint16 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_u16_3(
  Mat self,
  int i0,
  int i1,
  int i2,
);

@ffi.Native<ffi.Uint8 Function(Mat, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_u8_1(
  Mat self,
  int i0,
);

@ffi.Native<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_u8_2(
  Mat self,
  int i0,
  int i1,
);

@ffi.Native<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>(isLeaf: true)
external int cv_Mat_get_u8_3(
  Mat self,
  int i0,
  int i1,
  int i2,
);

@ffi.Native<ffi.Bool Function(Mat)>(isLeaf: true)
external bool cv_Mat_isContinuous(
  Mat self,
);

@ffi.Native<ffi.Bool Function(Mat)>(isLeaf: true)
external bool cv_Mat_isSubmatrix(
  Mat self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<CvSize>, ffi.Pointer<CvPoint>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_locateROI(
  Mat self,
  ffi.Pointer<CvSize> wholeSize,
  ffi.Pointer<CvPoint> ofs,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_mean(
  Mat self,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_mean_1(
  Mat self,
  Mat mask,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>, ffi.Double)>()
external ffi.Pointer<CvStatus> cv_Mat_mul(
  Mat self,
  Mat val,
  ffi.Pointer<Mat> dst,
  double scale,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_ones(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> cv_Mat_op_add_f32(
  Mat self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> cv_Mat_op_add_f64(
  Mat self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>()
external ffi.Pointer<CvStatus> cv_Mat_op_add_i16(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> cv_Mat_op_add_i32(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> cv_Mat_op_add_i8(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> cv_Mat_op_add_mat(
  Mat self,
  Mat val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>()
external ffi.Pointer<CvStatus> cv_Mat_op_add_u16(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> cv_Mat_op_add_u8(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> cv_Mat_op_div_f32(
  Mat self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> cv_Mat_op_div_f64(
  Mat self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>()
external ffi.Pointer<CvStatus> cv_Mat_op_div_i16(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> cv_Mat_op_div_i32(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> cv_Mat_op_div_i8(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> cv_Mat_op_div_mat(
  Mat self,
  Mat val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>()
external ffi.Pointer<CvStatus> cv_Mat_op_div_u16(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> cv_Mat_op_div_u8(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> cv_Mat_op_mul_f32(
  Mat self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> cv_Mat_op_mul_f64(
  Mat self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>()
external ffi.Pointer<CvStatus> cv_Mat_op_mul_i16(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> cv_Mat_op_mul_i32(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> cv_Mat_op_mul_i8(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> cv_Mat_op_mul_mat(
  Mat self,
  Mat val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>()
external ffi.Pointer<CvStatus> cv_Mat_op_mul_u16(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> cv_Mat_op_mul_u8(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> cv_Mat_op_sub_f32(
  Mat self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> cv_Mat_op_sub_f64(
  Mat self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>()
external ffi.Pointer<CvStatus> cv_Mat_op_sub_i16(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> cv_Mat_op_sub_i32(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> cv_Mat_op_sub_i8(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> cv_Mat_op_sub_mat(
  Mat self,
  Mat val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>()
external ffi.Pointer<CvStatus> cv_Mat_op_sub_u16(
  Mat self,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> cv_Mat_op_sub_u8(
  Mat self,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_patchNaNs(
  Mat self,
  double val,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<uchar> Function(Mat, ffi.Int)>()
external ffi.Pointer<uchar> cv_Mat_ptr_uchar_1(
  Mat self,
  int i,
);

@ffi.Native<ffi.Pointer<uchar> Function(Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<uchar> cv_Mat_ptr_uchar_2(
  Mat self,
  int i,
  int j,
);

@ffi.Native<ffi.Pointer<uchar> Function(Mat, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<uchar> cv_Mat_ptr_uchar_3(
  Mat self,
  int i,
  int j,
  int k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, CvRect, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_region(
  Mat self,
  CvRect r,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_reinterpret(
  Mat self,
  int type,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat)>()
external ffi.Pointer<CvStatus> cv_Mat_release(
  Mat self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_reshape(
  Mat self,
  int cn,
  int rows,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, VecI32, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_reshape_1(
  Mat self,
  int cn,
  VecI32 newshape,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_row(
  Mat self,
  int y,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int cv_Mat_rows(
  Mat self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Scalar, Mat, imp$1.CvCallback_0)>(isLeaf: true)
external ffi.Pointer<CvStatus> cv_Mat_setTo(
  Mat self,
  Scalar value,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2b)>(isLeaf: true)
external void cv_Mat_set_Vec2b(
  Mat self,
  int i0,
  int i1,
  Vec2b val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2d)>(isLeaf: true)
external void cv_Mat_set_Vec2d(
  Mat self,
  int i0,
  int i1,
  Vec2d val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2f)>(isLeaf: true)
external void cv_Mat_set_Vec2f(
  Mat self,
  int i0,
  int i1,
  Vec2f val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2i)>(isLeaf: true)
external void cv_Mat_set_Vec2i(
  Mat self,
  int i0,
  int i1,
  Vec2i val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2s)>(isLeaf: true)
external void cv_Mat_set_Vec2s(
  Mat self,
  int i0,
  int i1,
  Vec2s val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2w)>(isLeaf: true)
external void cv_Mat_set_Vec2w(
  Mat self,
  int i0,
  int i1,
  Vec2w val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3b)>(isLeaf: true)
external void cv_Mat_set_Vec3b(
  Mat self,
  int i0,
  int i1,
  Vec3b val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3d)>(isLeaf: true)
external void cv_Mat_set_Vec3d(
  Mat self,
  int i0,
  int i1,
  Vec3d val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3f)>(isLeaf: true)
external void cv_Mat_set_Vec3f(
  Mat self,
  int i0,
  int i1,
  Vec3f val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3i)>(isLeaf: true)
external void cv_Mat_set_Vec3i(
  Mat self,
  int i0,
  int i1,
  Vec3i val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3s)>(isLeaf: true)
external void cv_Mat_set_Vec3s(
  Mat self,
  int i0,
  int i1,
  Vec3s val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3w)>(isLeaf: true)
external void cv_Mat_set_Vec3w(
  Mat self,
  int i0,
  int i1,
  Vec3w val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4b)>(isLeaf: true)
external void cv_Mat_set_Vec4b(
  Mat self,
  int i0,
  int i1,
  Vec4b val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4d)>(isLeaf: true)
external void cv_Mat_set_Vec4d(
  Mat self,
  int i0,
  int i1,
  Vec4d val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4f)>(isLeaf: true)
external void cv_Mat_set_Vec4f(
  Mat self,
  int i0,
  int i1,
  Vec4f val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4i)>(isLeaf: true)
external void cv_Mat_set_Vec4i(
  Mat self,
  int i0,
  int i1,
  Vec4i val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4s)>(isLeaf: true)
external void cv_Mat_set_Vec4s(
  Mat self,
  int i0,
  int i1,
  Vec4s val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4w)>(isLeaf: true)
external void cv_Mat_set_Vec4w(
  Mat self,
  int i0,
  int i1,
  Vec4w val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6d)>(isLeaf: true)
external void cv_Mat_set_Vec6d(
  Mat self,
  int i0,
  int i1,
  Vec6d val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6f)>(isLeaf: true)
external void cv_Mat_set_Vec6f(
  Mat self,
  int i0,
  int i1,
  Vec6f val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6i)>(isLeaf: true)
external void cv_Mat_set_Vec6i(
  Mat self,
  int i0,
  int i1,
  Vec6i val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec8i)>(isLeaf: true)
external void cv_Mat_set_Vec8i(
  Mat self,
  int i0,
  int i1,
  Vec8i val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, float_t)>(isLeaf: true)
external void cv_Mat_set_f32_1(
  Mat self,
  int i0,
  double val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, float_t)>(isLeaf: true)
external void cv_Mat_set_f32_2(
  Mat self,
  int i0,
  int i1,
  double val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, float_t)>(
    isLeaf: true)
external void cv_Mat_set_f32_3(
  Mat self,
  int i0,
  int i1,
  int i2,
  double val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, double_t)>(isLeaf: true)
external void cv_Mat_set_f64_1(
  Mat self,
  int i0,
  double val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, double_t)>(isLeaf: true)
external void cv_Mat_set_f64_2(
  Mat self,
  int i0,
  int i1,
  double val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, double_t)>(
    isLeaf: true)
external void cv_Mat_set_f64_3(
  Mat self,
  int i0,
  int i1,
  int i2,
  double val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int16)>(isLeaf: true)
external void cv_Mat_set_i16_1(
  Mat self,
  int i0,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int16)>(isLeaf: true)
external void cv_Mat_set_i16_2(
  Mat self,
  int i0,
  int i1,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>(
    isLeaf: true)
external void cv_Mat_set_i16_3(
  Mat self,
  int i0,
  int i1,
  int i2,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int32)>(isLeaf: true)
external void cv_Mat_set_i32_1(
  Mat self,
  int i0,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int32)>(isLeaf: true)
external void cv_Mat_set_i32_2(
  Mat self,
  int i0,
  int i1,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>(
    isLeaf: true)
external void cv_Mat_set_i32_3(
  Mat self,
  int i0,
  int i1,
  int i2,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int8)>(isLeaf: true)
external void cv_Mat_set_i8_1(
  Mat self,
  int i0,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int8)>(isLeaf: true)
external void cv_Mat_set_i8_2(
  Mat self,
  int i0,
  int i1,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>(
    isLeaf: true)
external void cv_Mat_set_i8_3(
  Mat self,
  int i0,
  int i1,
  int i2,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Uint16)>(isLeaf: true)
external void cv_Mat_set_u16_1(
  Mat self,
  int i0,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Uint16)>(isLeaf: true)
external void cv_Mat_set_u16_2(
  Mat self,
  int i0,
  int i1,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint16)>(
    isLeaf: true)
external void cv_Mat_set_u16_3(
  Mat self,
  int i0,
  int i1,
  int i2,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Uint8)>(isLeaf: true)
external void cv_Mat_set_u8_1(
  Mat self,
  int i0,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Uint8)>(isLeaf: true)
external void cv_Mat_set_u8_2(
  Mat self,
  int i0,
  int i1,
  int val,
);

@ffi.Native<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>(
    isLeaf: true)
external void cv_Mat_set_u8_3(
  Mat self,
  int i0,
  int i1,
  int i2,
  int val,
);

@ffi.Native<ffi.Pointer<VecI32> Function(Mat)>(isLeaf: true)
external ffi.Pointer<VecI32> cv_Mat_size(
  Mat self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_sqrt(
  Mat self,
  Mat rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<MatStep Function(Mat)>(isLeaf: true)
external MatStep cv_Mat_step(
  Mat self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_t(
  Mat self,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Bool, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> cv_Mat_toFmtString(
  Mat self,
  int fmtType,
  int f16Precision,
  int f32Precision,
  int f64Precision,
  bool multiLine,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<VecChar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_toVecChar(
  Mat self,
  ffi.Pointer<VecChar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<VecPoint>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_toVecPoint(
  Mat self,
  ffi.Pointer<VecPoint> vec,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<VecPoint2f>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_toVecPoint2f(
  Mat self,
  ffi.Pointer<VecPoint2f> vec,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<VecPoint3f>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_toVecPoint3f(
  Mat self,
  ffi.Pointer<VecPoint3f> vec,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<VecPoint3i>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_toVecPoint3i(
  Mat self,
  ffi.Pointer<VecPoint3i> vec,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<VecUChar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_toVecUChar(
  Mat self,
  ffi.Pointer<VecUChar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Size Function(Mat)>(isLeaf: true)
external int cv_Mat_total(
  Mat self,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int cv_Mat_type(
  Mat self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Mat_zeros(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_PCABackProject(
  Mat data,
  Mat mean,
  Mat eigenvectors,
  Mat result,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_PCACompute(
  Mat src,
  Mat mean,
  Mat eigenvectors,
  Mat eigenvalues,
  int maxComponents,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_PCACompute_1(
  Mat src,
  Mat mean,
  Mat eigenvectors,
  Mat eigenvalues,
  double retainedVariance,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_PCAProject(
  Mat data,
  Mat mean,
  Mat eigenvectors,
  Mat result,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_PSNR(
  Mat src1,
  Mat src2,
  double R,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(imp$1.RNGPtr)>()
external void cv_RNG_close(
  imp$1.RNGPtr rng,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>()
external ffi.Pointer<CvStatus> cv_RNG_create(
  ffi.Pointer<RNG> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Uint64, ffi.Pointer<RNG>)>()
external ffi.Pointer<CvStatus> cv_RNG_create_1(
  int state,
  ffi.Pointer<RNG> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RNG, Mat, ffi.Int, ffi.Double, ffi.Double,
        ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_RNG_fill(
  RNG rng,
  Mat mat,
  int distType,
  double a,
  double b,
  bool saturateRange,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RNG, ffi.Double, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> cv_RNG_gaussian(
  RNG rng,
  double sigma,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RNG, ffi.Pointer<ffi.Uint32>)>()
external ffi.Pointer<CvStatus> cv_RNG_next(
  RNG rng,
  ffi.Pointer<ffi.Uint32> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> cv_RNG_uniform(
  RNG rng,
  int a,
  int b,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> cv_RNG_uniformDouble(
  RNG rng,
  double a,
  double b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect>)>()
external ffi.Pointer<CvStatus> cv_RotatedRect_boundingRect(
  RotatedRect rect,
  ffi.Pointer<CvRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect2f>)>()
external ffi.Pointer<CvStatus> cv_RotatedRect_boundingRect2f(
  RotatedRect rect,
  ffi.Pointer<CvRect2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> cv_RotatedRect_points(
  RotatedRect rect,
  ffi.Pointer<VecPoint2f> out_pts,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_SVBackSubst(
  Mat w,
  Mat u,
  Mat vt,
  Mat rhs,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_SVD_Compute(
  Mat src,
  Mat w_r,
  Mat u_r,
  Mat vt_r,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_SVD_backSubst(
  Mat w,
  Mat u,
  Mat vt,
  Mat rhs,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_SVDecomp(
  Mat w,
  Mat u,
  Mat vt,
  Mat d,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_absdiff(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_add(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  int dtype,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, ffi.Double, ffi.Double,
        Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_addWeighted(
  Mat src1,
  double alpha,
  Mat src2,
  double beta,
  double gamma,
  Mat dst,
  int dtype,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, Mat, ffi.Int,
        ffi.Int, Mat, ffi.Int, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_batchDistance(
  Mat src1,
  Mat src2,
  Mat dist,
  int dtype,
  Mat nidx,
  int normType,
  int K,
  Mat mask,
  int update,
  bool crosscheck,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bitwise_and(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bitwise_and_1(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bitwise_not(
  Mat src1,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bitwise_not_1(
  Mat src1,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bitwise_or(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bitwise_or_1(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bitwise_xor(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_bitwise_xor_1(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_borderInterpolate(
  int p,
  int len,
  int borderType,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_calcCovarMatrix(
  Mat samples,
  Mat covar,
  Mat mean,
  int flags,
  int ctype,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_cartToPolar(
  Mat x,
  Mat y,
  Mat magnitude,
  Mat angle,
  bool angleInDegrees,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, ffi.Pointer<CvPoint>,
        ffi.Double, ffi.Double, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_checkRange(
  Mat a,
  bool quiet,
  ffi.Pointer<CvPoint> pos,
  double minVal,
  double maxVal,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_colRange(
  Mat self,
  int start,
  int end,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_compare(
  Mat src1,
  Mat src2,
  Mat dst,
  int cmpop,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_completeSymm(
  Mat m,
  bool lowerToUpper,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_convertScaleAbs(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Int, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_copyMakeBorder(
  Mat src,
  Mat dst,
  int top,
  int bottom,
  int left,
  int right,
  int borderType,
  Scalar value,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_copyTo(
  Mat src,
  Mat dst,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function(Mat)>()
external int cv_countNonZero(
  Mat src,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_dct(
  Mat src,
  Mat dst,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_determinant(
  Mat self,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_dft(
  Mat src,
  Mat dst,
  int flags,
  int nonzeroRows,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_divide(
  Mat src1,
  Mat src2,
  Mat dst,
  double scale,
  int dtype,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_eigen(
  Mat src,
  Mat eigenvalues,
  Mat eigenvectors,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_eigenNonSymmetric(
  Mat src,
  Mat eigenvalues,
  Mat eigenvectors,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_exp(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_extractChannel(
  Mat src,
  Mat dst,
  int coi,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_findNonZero(
  Mat src,
  Mat idx,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_flip(
  Mat src,
  Mat dst,
  int flipCode,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_flipND(
  Mat src,
  Mat dst,
  int axis,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat, ffi.Double, Mat,
        ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_gemm(
  Mat src1,
  Mat src2,
  double alpha,
  Mat src3,
  double beta,
  Mat dst,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function()>()
external int cv_getNumThreads();

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_getOptimalDFTSize(
  int vecsize,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int64 Function()>()
external int cv_getTickCount();

@ffi.Native<double_t Function()>()
external double cv_getTickFrequency();

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> cv_hasNonZero(
  Mat src,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_hconcat(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_idct(
  Mat src,
  Mat dst,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_idft(
  Mat src,
  Mat dst,
  int flags,
  int nonzeroRows,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_inRange(
  Mat src,
  Mat lowerb,
  Mat upperb,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Scalar, Scalar, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_inRange_1(
  Mat src,
  Scalar lowerb,
  Scalar upperb,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_insertChannel(
  Mat src,
  Mat dst,
  int coi,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_invert(
  Mat src,
  Mat dst,
  int flags,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, TermCriteria, ffi.Int,
        ffi.Int, Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_kmeans(
  Mat data,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  Mat centers,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Int, Mat, TermCriteria,
        ffi.Int, ffi.Int, Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_kmeans_points(
  VecPoint2f pts,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  Mat centers,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_log(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_magnitude(
  Mat x,
  Mat y,
  Mat magnitude,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_max(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_mean(
  Mat src,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_meanStdDev(
  Mat src,
  ffi.Pointer<Scalar> dstMean,
  ffi.Pointer<Scalar> dstStdDev,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>,
        ffi.Pointer<Scalar>, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_meanStdDev_1(
  Mat src,
  ffi.Pointer<Scalar> dstMean,
  ffi.Pointer<Scalar> dstStdDev,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_mean_1(
  Mat src,
  Mat mask,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_merge(
  VecMat mats,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_min(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        ffi.Pointer<ffi.Double>,
        ffi.Pointer<ffi.Double>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        Mat,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_minMaxIdx(
  Mat self,
  ffi.Pointer<ffi.Double> minVal,
  ffi.Pointer<ffi.Double> maxVal,
  ffi.Pointer<ffi.Int> minIdx,
  ffi.Pointer<ffi.Int> maxIdx,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        ffi.Pointer<ffi.Double>,
        ffi.Pointer<ffi.Double>,
        ffi.Pointer<CvPoint>,
        ffi.Pointer<CvPoint>,
        Mat,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_minMaxLoc(
  Mat self,
  ffi.Pointer<ffi.Double> minVal,
  ffi.Pointer<ffi.Double> maxVal,
  ffi.Pointer<CvPoint> minLoc,
  ffi.Pointer<CvPoint> maxLoc,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, VecMat, VecI32, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_mixChannels(
  VecMat src,
  VecMat dst,
  VecI32 fromTo,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_mulSpectrums(
  Mat a,
  Mat b,
  Mat c,
  int flags,
  bool conjB,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Bool, Mat, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_mulTransposed(
  Mat src,
  Mat dst,
  bool aTa,
  Mat delta,
  double scale,
  int dtype,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_multiply(
  Mat src1,
  Mat src2,
  Mat dst,
  double scale,
  int dtype,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_norm(
  Mat src1,
  int normType,
  Mat mask,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_norm_1(
  Mat src1,
  Mat src2,
  int normType,
  Mat mask,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Int, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_normalize(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
  int typ,
  int dtype,
  Mat mask,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_patchNaNs(
  Mat a,
  double val,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_perspectiveTransform(
  Mat src,
  Mat dst,
  Mat tm,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_phase(
  Mat x,
  Mat y,
  Mat angle,
  bool angleInDegrees,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_polarToCart(
  Mat magnitude,
  Mat degree,
  Mat x,
  Mat y,
  bool angleInDegrees,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_pow(
  Mat src,
  double power,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_randShuffle(
  Mat mat,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, RNG, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_randShuffle_1(
  Mat mat,
  double iterFactor,
  RNG rng,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_randn(
  Mat mat,
  Scalar mean,
  Scalar stddev,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_randu(
  Mat mat,
  Scalar low,
  Scalar high,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_reduce(
  Mat src,
  Mat dst,
  int dim,
  int rType,
  int dType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_reduceArgMax(
  Mat src,
  Mat dst,
  int axis,
  bool lastIndex,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_reduceArgMin(
  Mat src,
  Mat dst,
  int axis,
  bool lastIndex,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_repeat(
  Mat src,
  int nY,
  int nX,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_rotate(
  Mat src,
  Mat dst,
  int rotateCode,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_rowRange(
  Mat self,
  int start,
  int end,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Double, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_scaleAdd(
  Mat src1,
  double alpha,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_setIdentity(
  Mat src,
  Scalar scalar,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(ffi.Int)>()
external void cv_setNumThreads(
  int n,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int)>()
external ffi.Pointer<CvStatus> cv_setRNGSeed(
  int seed,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solve(
  Mat src1,
  Mat src2,
  Mat dst,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solveCubic(
  Mat coeffs,
  Mat roots,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_solvePoly(
  Mat coeffs,
  Mat roots,
  int maxIters,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_sort(
  Mat src,
  Mat dst,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_sortIdx(
  Mat src,
  Mat dst,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<VecMat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_split(
  Mat src,
  ffi.Pointer<VecMat> out_rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_sqrt(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_subtract(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  int dtype,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_sum(
  Mat src,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp$1.RNGPtr)>()
external ffi.Pointer<CvStatus> cv_theRNG(
  imp$1.RNGPtr rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_trace(
  Mat src,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_transform(
  Mat src,
  Mat dst,
  Mat tm,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_transpose(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, VecI32, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_transposeND(
  Mat src,
  Mat dst,
  VecI32 order,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_vconcat(
  Mat src1,
  Mat src2,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<VecU8> Function(VecU8, VecU8, VecU8, ffi.Size, ffi.Size)>()
external ffi.Pointer<VecU8> cv_yuv420_888_to_nv21(
  VecU8 y,
  VecU8 u,
  VecU8 v,
  int width,
  int height,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function()>()
external ffi.Pointer<ffi.Char> getBuildInfo();

@ffi.Native<ffi.Pointer<ffi.Char> Function()>()
external ffi.Pointer<ffi.Char> getCvVersion();

@ffi.Native<LogCallback Function()>()
external LogCallback getLogCallback();

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> getLogLevel(
  ffi.Pointer<ffi.Int> logLevel,
);

@ffi.Native<LogCallback>()
external LogCallback logCallback;

@ffi.Native<ffi.Void Function(ErrorCallback)>()
external void registerErrorCallback(
  ErrorCallback callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(LogCallback)>()
external ffi.Pointer<CvStatus> replaceWriteLogMessageEx(
  LogCallback callback,
);

@ffi.Native<ffi.Void Function(LogCallback)>()
external void setLogCallback(
  LogCallback callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int)>()
external ffi.Pointer<CvStatus> setLogLevel(
  int logLevel,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecChar>)>()
external void std_VecChar_clear(
  ffi.Pointer<VecChar> self,
);

@ffi.Native<ffi.Pointer<VecChar> Function(ffi.Pointer<VecChar>)>()
external ffi.Pointer<VecChar> std_VecChar_clone(
  ffi.Pointer<VecChar> self,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<VecChar>)>()
external ffi.Pointer<ffi.Char> std_VecChar_data(
  ffi.Pointer<VecChar> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Pointer<VecChar>)>()
external void std_VecChar_extend(
  ffi.Pointer<VecChar> self,
  ffi.Pointer<VecChar> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecCharPtr)>()
external void std_VecChar_free(
  imp$1.VecCharPtr self,
);

@ffi.Native<ffi.Char Function(ffi.Pointer<VecChar>, ffi.Size)>()
external int std_VecChar_get(
  ffi.Pointer<VecChar> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecChar>)>()
external int std_VecChar_length(
  ffi.Pointer<VecChar> self,
);

@ffi.Native<ffi.Pointer<VecChar> Function(ffi.Size)>()
external ffi.Pointer<VecChar> std_VecChar_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecChar> Function(ffi.Size, ffi.Char)>()
external ffi.Pointer<VecChar> std_VecChar_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecChar> Function(ffi.Size, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<VecChar> std_VecChar_new_2(
  int length,
  ffi.Pointer<ffi.Char> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Char)>()
external void std_VecChar_push_back(
  ffi.Pointer<VecChar> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Size)>()
external void std_VecChar_reserve(
  ffi.Pointer<VecChar> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Size)>()
external void std_VecChar_resize(
  ffi.Pointer<VecChar> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Size, ffi.Char)>()
external void std_VecChar_set(
  ffi.Pointer<VecChar> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecChar>)>()
external void std_VecChar_shrink_to_fit(
  ffi.Pointer<VecChar> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDMatch>)>()
external void std_VecDMatch_clear(
  ffi.Pointer<VecDMatch> self,
);

@ffi.Native<ffi.Pointer<DMatch> Function(ffi.Pointer<VecDMatch>)>()
external ffi.Pointer<DMatch> std_VecDMatch_data(
  ffi.Pointer<VecDMatch> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDMatch>, ffi.Pointer<VecDMatch>)>()
external void std_VecDMatch_extend(
  ffi.Pointer<VecDMatch> self,
  ffi.Pointer<VecDMatch> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecDMatchPtr)>()
external void std_VecDMatch_free(
  imp$1.VecDMatchPtr self,
);

@ffi.Native<DMatch Function(ffi.Pointer<VecDMatch>, ffi.Size)>()
external DMatch std_VecDMatch_get(
  ffi.Pointer<VecDMatch> self,
  int index,
);

@ffi.Native<ffi.Pointer<DMatch> Function(ffi.Pointer<VecDMatch>, ffi.Int)>()
external ffi.Pointer<DMatch> std_VecDMatch_get_p(
  ffi.Pointer<VecDMatch> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecDMatch>)>()
external int std_VecDMatch_length(
  ffi.Pointer<VecDMatch> self,
);

@ffi.Native<ffi.Pointer<VecDMatch> Function(ffi.Size)>()
external ffi.Pointer<VecDMatch> std_VecDMatch_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecDMatch> Function(ffi.Size, DMatch)>()
external ffi.Pointer<VecDMatch> std_VecDMatch_new_1(
  int length,
  DMatch val,
);

@ffi.Native<ffi.Pointer<VecDMatch> Function(ffi.Size, ffi.Pointer<DMatch>)>()
external ffi.Pointer<VecDMatch> std_VecDMatch_new_2(
  int length,
  ffi.Pointer<DMatch> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDMatch>, DMatch)>()
external void std_VecDMatch_push_back(
  ffi.Pointer<VecDMatch> self,
  DMatch val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDMatch>, ffi.Size)>()
external void std_VecDMatch_reserve(
  ffi.Pointer<VecDMatch> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDMatch>, ffi.Size)>()
external void std_VecDMatch_resize(
  ffi.Pointer<VecDMatch> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDMatch>, ffi.Size, DMatch)>()
external void std_VecDMatch_set(
  ffi.Pointer<VecDMatch> self,
  int index,
  DMatch val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecDMatch>)>()
external void std_VecDMatch_shrink_to_fit(
  ffi.Pointer<VecDMatch> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF16>)>()
external void std_VecF16_clear(
  ffi.Pointer<VecF16> self,
);

@ffi.Native<ffi.Pointer<VecF16> Function(ffi.Pointer<VecF16>)>()
external ffi.Pointer<VecF16> std_VecF16_clone(
  ffi.Pointer<VecF16> self,
);

@ffi.Native<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<VecF16>)>()
external ffi.Pointer<ffi.Uint16> std_VecF16_data(
  ffi.Pointer<VecF16> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Pointer<VecF16>)>()
external void std_VecF16_extend(
  ffi.Pointer<VecF16> self,
  ffi.Pointer<VecF16> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecF16Ptr)>()
external void std_VecF16_free(
  imp$1.VecF16Ptr self,
);

@ffi.Native<ffi.Uint16 Function(ffi.Pointer<VecF16>, ffi.Size)>()
external int std_VecF16_get(
  ffi.Pointer<VecF16> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecF16>)>()
external int std_VecF16_length(
  ffi.Pointer<VecF16> self,
);

@ffi.Native<ffi.Pointer<VecF16> Function(ffi.Size)>()
external ffi.Pointer<VecF16> std_VecF16_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecF16> Function(ffi.Size, ffi.Uint16)>()
external ffi.Pointer<VecF16> std_VecF16_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecF16> Function(ffi.Size, ffi.Pointer<ffi.Uint16>)>()
external ffi.Pointer<VecF16> std_VecF16_new_2(
  int length,
  ffi.Pointer<ffi.Uint16> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Uint16)>()
external void std_VecF16_push_back(
  ffi.Pointer<VecF16> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Size)>()
external void std_VecF16_reserve(
  ffi.Pointer<VecF16> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Size)>()
external void std_VecF16_resize(
  ffi.Pointer<VecF16> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Size, ffi.Uint16)>()
external void std_VecF16_set(
  ffi.Pointer<VecF16> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF16>)>()
external void std_VecF16_shrink_to_fit(
  ffi.Pointer<VecF16> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF32>)>()
external void std_VecF32_clear(
  ffi.Pointer<VecF32> self,
);

@ffi.Native<ffi.Pointer<VecF32> Function(ffi.Pointer<VecF32>)>()
external ffi.Pointer<VecF32> std_VecF32_clone(
  ffi.Pointer<VecF32> self,
);

@ffi.Native<ffi.Pointer<float_t> Function(ffi.Pointer<VecF32>)>()
external ffi.Pointer<float_t> std_VecF32_data(
  ffi.Pointer<VecF32> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF32>, ffi.Pointer<VecF32>)>()
external void std_VecF32_extend(
  ffi.Pointer<VecF32> self,
  ffi.Pointer<VecF32> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecF32Ptr)>()
external void std_VecF32_free(
  imp$1.VecF32Ptr self,
);

@ffi.Native<float_t Function(ffi.Pointer<VecF32>, ffi.Size)>()
external double std_VecF32_get(
  ffi.Pointer<VecF32> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecF32>)>()
external int std_VecF32_length(
  ffi.Pointer<VecF32> self,
);

@ffi.Native<ffi.Pointer<VecF32> Function(ffi.Size)>()
external ffi.Pointer<VecF32> std_VecF32_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecF32> Function(ffi.Size, float_t)>()
external ffi.Pointer<VecF32> std_VecF32_new_1(
  int length,
  double val,
);

@ffi.Native<ffi.Pointer<VecF32> Function(ffi.Size, ffi.Pointer<float_t>)>()
external ffi.Pointer<VecF32> std_VecF32_new_2(
  int length,
  ffi.Pointer<float_t> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF32>, float_t)>()
external void std_VecF32_push_back(
  ffi.Pointer<VecF32> self,
  double val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF32>, ffi.Size)>()
external void std_VecF32_reserve(
  ffi.Pointer<VecF32> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF32>, ffi.Size)>()
external void std_VecF32_resize(
  ffi.Pointer<VecF32> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF32>, ffi.Size, float_t)>()
external void std_VecF32_set(
  ffi.Pointer<VecF32> self,
  int index,
  double val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF32>)>()
external void std_VecF32_shrink_to_fit(
  ffi.Pointer<VecF32> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF64>)>()
external void std_VecF64_clear(
  ffi.Pointer<VecF64> self,
);

@ffi.Native<ffi.Pointer<VecF64> Function(ffi.Pointer<VecF64>)>()
external ffi.Pointer<VecF64> std_VecF64_clone(
  ffi.Pointer<VecF64> self,
);

@ffi.Native<ffi.Pointer<double_t> Function(ffi.Pointer<VecF64>)>()
external ffi.Pointer<double_t> std_VecF64_data(
  ffi.Pointer<VecF64> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF64>, ffi.Pointer<VecF64>)>()
external void std_VecF64_extend(
  ffi.Pointer<VecF64> self,
  ffi.Pointer<VecF64> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecF64Ptr)>()
external void std_VecF64_free(
  imp$1.VecF64Ptr self,
);

@ffi.Native<double_t Function(ffi.Pointer<VecF64>, ffi.Size)>()
external double std_VecF64_get(
  ffi.Pointer<VecF64> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecF64>)>()
external int std_VecF64_length(
  ffi.Pointer<VecF64> self,
);

@ffi.Native<ffi.Pointer<VecF64> Function(ffi.Size)>()
external ffi.Pointer<VecF64> std_VecF64_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecF64> Function(ffi.Size, double_t)>()
external ffi.Pointer<VecF64> std_VecF64_new_1(
  int length,
  double val,
);

@ffi.Native<ffi.Pointer<VecF64> Function(ffi.Size, ffi.Pointer<double_t>)>()
external ffi.Pointer<VecF64> std_VecF64_new_2(
  int length,
  ffi.Pointer<double_t> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF64>, double_t)>()
external void std_VecF64_push_back(
  ffi.Pointer<VecF64> self,
  double val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF64>, ffi.Size)>()
external void std_VecF64_reserve(
  ffi.Pointer<VecF64> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF64>, ffi.Size)>()
external void std_VecF64_resize(
  ffi.Pointer<VecF64> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF64>, ffi.Size, double_t)>()
external void std_VecF64_set(
  ffi.Pointer<VecF64> self,
  int index,
  double val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecF64>)>()
external void std_VecF64_shrink_to_fit(
  ffi.Pointer<VecF64> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI16>)>()
external void std_VecI16_clear(
  ffi.Pointer<VecI16> self,
);

@ffi.Native<ffi.Pointer<VecI16> Function(ffi.Pointer<VecI16>)>()
external ffi.Pointer<VecI16> std_VecI16_clone(
  ffi.Pointer<VecI16> self,
);

@ffi.Native<ffi.Pointer<ffi.Int16> Function(ffi.Pointer<VecI16>)>()
external ffi.Pointer<ffi.Int16> std_VecI16_data(
  ffi.Pointer<VecI16> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Pointer<VecI16>)>()
external void std_VecI16_extend(
  ffi.Pointer<VecI16> self,
  ffi.Pointer<VecI16> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecI16Ptr)>()
external void std_VecI16_free(
  imp$1.VecI16Ptr self,
);

@ffi.Native<ffi.Int16 Function(ffi.Pointer<VecI16>, ffi.Size)>()
external int std_VecI16_get(
  ffi.Pointer<VecI16> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecI16>)>()
external int std_VecI16_length(
  ffi.Pointer<VecI16> self,
);

@ffi.Native<ffi.Pointer<VecI16> Function(ffi.Size)>()
external ffi.Pointer<VecI16> std_VecI16_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecI16> Function(ffi.Size, ffi.Int16)>()
external ffi.Pointer<VecI16> std_VecI16_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecI16> Function(ffi.Size, ffi.Pointer<ffi.Int16>)>()
external ffi.Pointer<VecI16> std_VecI16_new_2(
  int length,
  ffi.Pointer<ffi.Int16> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Int16)>()
external void std_VecI16_push_back(
  ffi.Pointer<VecI16> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Size)>()
external void std_VecI16_reserve(
  ffi.Pointer<VecI16> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Size)>()
external void std_VecI16_resize(
  ffi.Pointer<VecI16> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Size, ffi.Int16)>()
external void std_VecI16_set(
  ffi.Pointer<VecI16> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI16>)>()
external void std_VecI16_shrink_to_fit(
  ffi.Pointer<VecI16> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI32>)>()
external void std_VecI32_clear(
  ffi.Pointer<VecI32> self,
);

@ffi.Native<ffi.Pointer<VecI32> Function(ffi.Pointer<VecI32>)>()
external ffi.Pointer<VecI32> std_VecI32_clone(
  ffi.Pointer<VecI32> self,
);

@ffi.Native<ffi.Pointer<ffi.Int32> Function(ffi.Pointer<VecI32>)>()
external ffi.Pointer<ffi.Int32> std_VecI32_data(
  ffi.Pointer<VecI32> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Pointer<VecI32>)>()
external void std_VecI32_extend(
  ffi.Pointer<VecI32> self,
  ffi.Pointer<VecI32> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecI32Ptr)>()
external void std_VecI32_free(
  imp$1.VecI32Ptr self,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<VecI32>, ffi.Size)>()
external int std_VecI32_get(
  ffi.Pointer<VecI32> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecI32>)>()
external int std_VecI32_length(
  ffi.Pointer<VecI32> self,
);

@ffi.Native<ffi.Pointer<VecI32> Function(ffi.Size)>()
external ffi.Pointer<VecI32> std_VecI32_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecI32> Function(ffi.Size, ffi.Int32)>()
external ffi.Pointer<VecI32> std_VecI32_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecI32> Function(ffi.Size, ffi.Pointer<ffi.Int32>)>()
external ffi.Pointer<VecI32> std_VecI32_new_2(
  int length,
  ffi.Pointer<ffi.Int32> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Int32)>()
external void std_VecI32_push_back(
  ffi.Pointer<VecI32> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Size)>()
external void std_VecI32_reserve(
  ffi.Pointer<VecI32> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Size)>()
external void std_VecI32_resize(
  ffi.Pointer<VecI32> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Size, ffi.Int32)>()
external void std_VecI32_set(
  ffi.Pointer<VecI32> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI32>)>()
external void std_VecI32_shrink_to_fit(
  ffi.Pointer<VecI32> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI64>)>()
external void std_VecI64_clear(
  ffi.Pointer<VecI64> self,
);

@ffi.Native<ffi.Pointer<VecI64> Function(ffi.Pointer<VecI64>)>()
external ffi.Pointer<VecI64> std_VecI64_clone(
  ffi.Pointer<VecI64> self,
);

@ffi.Native<ffi.Pointer<ffi.Int64> Function(ffi.Pointer<VecI64>)>()
external ffi.Pointer<ffi.Int64> std_VecI64_data(
  ffi.Pointer<VecI64> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Pointer<VecI64>)>()
external void std_VecI64_extend(
  ffi.Pointer<VecI64> self,
  ffi.Pointer<VecI64> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecI64Ptr)>()
external void std_VecI64_free(
  imp$1.VecI64Ptr self,
);

@ffi.Native<ffi.Int64 Function(ffi.Pointer<VecI64>, ffi.Size)>()
external int std_VecI64_get(
  ffi.Pointer<VecI64> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecI64>)>()
external int std_VecI64_length(
  ffi.Pointer<VecI64> self,
);

@ffi.Native<ffi.Pointer<VecI64> Function(ffi.Size)>()
external ffi.Pointer<VecI64> std_VecI64_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecI64> Function(ffi.Size, ffi.Int64)>()
external ffi.Pointer<VecI64> std_VecI64_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecI64> Function(ffi.Size, ffi.Pointer<ffi.Int64>)>()
external ffi.Pointer<VecI64> std_VecI64_new_2(
  int length,
  ffi.Pointer<ffi.Int64> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Int64)>()
external void std_VecI64_push_back(
  ffi.Pointer<VecI64> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Size)>()
external void std_VecI64_reserve(
  ffi.Pointer<VecI64> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Size)>()
external void std_VecI64_resize(
  ffi.Pointer<VecI64> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Size, ffi.Int64)>()
external void std_VecI64_set(
  ffi.Pointer<VecI64> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI64>)>()
external void std_VecI64_shrink_to_fit(
  ffi.Pointer<VecI64> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI8>)>()
external void std_VecI8_clear(
  ffi.Pointer<VecI8> self,
);

@ffi.Native<ffi.Pointer<VecI8> Function(ffi.Pointer<VecI8>)>()
external ffi.Pointer<VecI8> std_VecI8_clone(
  ffi.Pointer<VecI8> self,
);

@ffi.Native<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<VecI8>)>()
external ffi.Pointer<ffi.Int8> std_VecI8_data(
  ffi.Pointer<VecI8> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Pointer<VecI8>)>()
external void std_VecI8_extend(
  ffi.Pointer<VecI8> self,
  ffi.Pointer<VecI8> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecI8Ptr)>()
external void std_VecI8_free(
  imp$1.VecI8Ptr self,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<VecI8>, ffi.Size)>()
external int std_VecI8_get(
  ffi.Pointer<VecI8> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecI8>)>()
external int std_VecI8_length(
  ffi.Pointer<VecI8> self,
);

@ffi.Native<ffi.Pointer<VecI8> Function(ffi.Size)>()
external ffi.Pointer<VecI8> std_VecI8_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecI8> Function(ffi.Size, ffi.Int8)>()
external ffi.Pointer<VecI8> std_VecI8_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecI8> Function(ffi.Size, ffi.Pointer<ffi.Int8>)>()
external ffi.Pointer<VecI8> std_VecI8_new_2(
  int length,
  ffi.Pointer<ffi.Int8> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Int8)>()
external void std_VecI8_push_back(
  ffi.Pointer<VecI8> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Size)>()
external void std_VecI8_reserve(
  ffi.Pointer<VecI8> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Size)>()
external void std_VecI8_resize(
  ffi.Pointer<VecI8> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Size, ffi.Int8)>()
external void std_VecI8_set(
  ffi.Pointer<VecI8> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecI8>)>()
external void std_VecI8_shrink_to_fit(
  ffi.Pointer<VecI8> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecKeyPoint>)>()
external void std_VecKeyPoint_clear(
  ffi.Pointer<VecKeyPoint> self,
);

@ffi.Native<ffi.Pointer<KeyPoint> Function(ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<KeyPoint> std_VecKeyPoint_data(
  ffi.Pointer<VecKeyPoint> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecKeyPoint>, ffi.Pointer<VecKeyPoint>)>()
external void std_VecKeyPoint_extend(
  ffi.Pointer<VecKeyPoint> self,
  ffi.Pointer<VecKeyPoint> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecKeyPointPtr)>()
external void std_VecKeyPoint_free(
  imp$1.VecKeyPointPtr self,
);

@ffi.Native<KeyPoint Function(ffi.Pointer<VecKeyPoint>, ffi.Size)>()
external KeyPoint std_VecKeyPoint_get(
  ffi.Pointer<VecKeyPoint> self,
  int index,
);

@ffi.Native<ffi.Pointer<KeyPoint> Function(ffi.Pointer<VecKeyPoint>, ffi.Int)>()
external ffi.Pointer<KeyPoint> std_VecKeyPoint_get_p(
  ffi.Pointer<VecKeyPoint> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecKeyPoint>)>()
external int std_VecKeyPoint_length(
  ffi.Pointer<VecKeyPoint> self,
);

@ffi.Native<ffi.Pointer<VecKeyPoint> Function(ffi.Size)>()
external ffi.Pointer<VecKeyPoint> std_VecKeyPoint_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecKeyPoint> Function(ffi.Size, KeyPoint)>()
external ffi.Pointer<VecKeyPoint> std_VecKeyPoint_new_1(
  int length,
  KeyPoint val,
);

@ffi.Native<
    ffi.Pointer<VecKeyPoint> Function(ffi.Size, ffi.Pointer<KeyPoint>)>()
external ffi.Pointer<VecKeyPoint> std_VecKeyPoint_new_2(
  int length,
  ffi.Pointer<KeyPoint> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecKeyPoint>, KeyPoint)>()
external void std_VecKeyPoint_push_back(
  ffi.Pointer<VecKeyPoint> self,
  KeyPoint val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecKeyPoint>, ffi.Size)>()
external void std_VecKeyPoint_reserve(
  ffi.Pointer<VecKeyPoint> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecKeyPoint>, ffi.Size)>()
external void std_VecKeyPoint_resize(
  ffi.Pointer<VecKeyPoint> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecKeyPoint>, ffi.Size, KeyPoint)>()
external void std_VecKeyPoint_set(
  ffi.Pointer<VecKeyPoint> self,
  int index,
  KeyPoint val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecKeyPoint>)>()
external void std_VecKeyPoint_shrink_to_fit(
  ffi.Pointer<VecKeyPoint> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecMat>)>()
external void std_VecMat_clear(
  ffi.Pointer<VecMat> self,
);

@ffi.Native<ffi.Pointer<Mat> Function(ffi.Pointer<VecMat>)>()
external ffi.Pointer<Mat> std_VecMat_data(
  ffi.Pointer<VecMat> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecMat>, ffi.Pointer<VecMat>)>()
external void std_VecMat_extend(
  ffi.Pointer<VecMat> self,
  ffi.Pointer<VecMat> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecMatPtr)>()
external void std_VecMat_free(
  imp$1.VecMatPtr self,
);

@ffi.Native<Mat Function(ffi.Pointer<VecMat>, ffi.Size)>()
external Mat std_VecMat_get(
  ffi.Pointer<VecMat> self,
  int index,
);

@ffi.Native<ffi.Pointer<Mat> Function(ffi.Pointer<VecMat>, ffi.Int)>()
external ffi.Pointer<Mat> std_VecMat_get_p(
  ffi.Pointer<VecMat> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecMat>)>()
external int std_VecMat_length(
  ffi.Pointer<VecMat> self,
);

@ffi.Native<ffi.Pointer<VecMat> Function(ffi.Size)>()
external ffi.Pointer<VecMat> std_VecMat_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecMat> Function(ffi.Size, Mat)>()
external ffi.Pointer<VecMat> std_VecMat_new_1(
  int length,
  Mat val,
);

@ffi.Native<ffi.Pointer<VecMat> Function(ffi.Size, ffi.Pointer<Mat>)>()
external ffi.Pointer<VecMat> std_VecMat_new_2(
  int length,
  ffi.Pointer<Mat> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecMat>, Mat)>()
external void std_VecMat_push_back(
  ffi.Pointer<VecMat> self,
  Mat val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecMat>, ffi.Size)>()
external void std_VecMat_reserve(
  ffi.Pointer<VecMat> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecMat>, ffi.Size)>()
external void std_VecMat_resize(
  ffi.Pointer<VecMat> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecMat>, ffi.Size, Mat)>()
external void std_VecMat_set(
  ffi.Pointer<VecMat> self,
  int index,
  Mat val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecMat>)>()
external void std_VecMat_shrink_to_fit(
  ffi.Pointer<VecMat> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint2f>)>()
external void std_VecPoint2f_clear(
  ffi.Pointer<VecPoint2f> self,
);

@ffi.Native<ffi.Pointer<CvPoint2f> Function(ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvPoint2f> std_VecPoint2f_data(
  ffi.Pointer<VecPoint2f> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecPoint2f>, ffi.Pointer<VecPoint2f>)>()
external void std_VecPoint2f_extend(
  ffi.Pointer<VecPoint2f> self,
  ffi.Pointer<VecPoint2f> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecPoint2fPtr)>()
external void std_VecPoint2f_free(
  imp$1.VecPoint2fPtr self,
);

@ffi.Native<CvPoint2f Function(ffi.Pointer<VecPoint2f>, ffi.Size)>()
external CvPoint2f std_VecPoint2f_get(
  ffi.Pointer<VecPoint2f> self,
  int index,
);

@ffi.Native<ffi.Pointer<CvPoint2f> Function(ffi.Pointer<VecPoint2f>, ffi.Int)>()
external ffi.Pointer<CvPoint2f> std_VecPoint2f_get_p(
  ffi.Pointer<VecPoint2f> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecPoint2f>)>()
external int std_VecPoint2f_length(
  ffi.Pointer<VecPoint2f> self,
);

@ffi.Native<ffi.Pointer<VecPoint2f> Function(ffi.Size)>()
external ffi.Pointer<VecPoint2f> std_VecPoint2f_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecPoint2f> Function(ffi.Size, CvPoint2f)>()
external ffi.Pointer<VecPoint2f> std_VecPoint2f_new_1(
  int length,
  CvPoint2f val,
);

@ffi.Native<
    ffi.Pointer<VecPoint2f> Function(ffi.Size, ffi.Pointer<CvPoint2f>)>()
external ffi.Pointer<VecPoint2f> std_VecPoint2f_new_2(
  int length,
  ffi.Pointer<CvPoint2f> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint2f>, CvPoint2f)>()
external void std_VecPoint2f_push_back(
  ffi.Pointer<VecPoint2f> self,
  CvPoint2f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint2f>, ffi.Size)>()
external void std_VecPoint2f_reserve(
  ffi.Pointer<VecPoint2f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint2f>, ffi.Size)>()
external void std_VecPoint2f_resize(
  ffi.Pointer<VecPoint2f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint2f>, ffi.Size, CvPoint2f)>()
external void std_VecPoint2f_set(
  ffi.Pointer<VecPoint2f> self,
  int index,
  CvPoint2f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint2f>)>()
external void std_VecPoint2f_shrink_to_fit(
  ffi.Pointer<VecPoint2f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3f>)>()
external void std_VecPoint3f_clear(
  ffi.Pointer<VecPoint3f> self,
);

@ffi.Native<ffi.Pointer<CvPoint3f> Function(ffi.Pointer<VecPoint3f>)>()
external ffi.Pointer<CvPoint3f> std_VecPoint3f_data(
  ffi.Pointer<VecPoint3f> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecPoint3f>, ffi.Pointer<VecPoint3f>)>()
external void std_VecPoint3f_extend(
  ffi.Pointer<VecPoint3f> self,
  ffi.Pointer<VecPoint3f> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecPoint3fPtr)>()
external void std_VecPoint3f_free(
  imp$1.VecPoint3fPtr self,
);

@ffi.Native<CvPoint3f Function(ffi.Pointer<VecPoint3f>, ffi.Size)>()
external CvPoint3f std_VecPoint3f_get(
  ffi.Pointer<VecPoint3f> self,
  int index,
);

@ffi.Native<ffi.Pointer<CvPoint3f> Function(ffi.Pointer<VecPoint3f>, ffi.Int)>()
external ffi.Pointer<CvPoint3f> std_VecPoint3f_get_p(
  ffi.Pointer<VecPoint3f> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecPoint3f>)>()
external int std_VecPoint3f_length(
  ffi.Pointer<VecPoint3f> self,
);

@ffi.Native<ffi.Pointer<VecPoint3f> Function(ffi.Size)>()
external ffi.Pointer<VecPoint3f> std_VecPoint3f_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecPoint3f> Function(ffi.Size, CvPoint3f)>()
external ffi.Pointer<VecPoint3f> std_VecPoint3f_new_1(
  int length,
  CvPoint3f val,
);

@ffi.Native<
    ffi.Pointer<VecPoint3f> Function(ffi.Size, ffi.Pointer<CvPoint3f>)>()
external ffi.Pointer<VecPoint3f> std_VecPoint3f_new_2(
  int length,
  ffi.Pointer<CvPoint3f> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3f>, CvPoint3f)>()
external void std_VecPoint3f_push_back(
  ffi.Pointer<VecPoint3f> self,
  CvPoint3f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3f>, ffi.Size)>()
external void std_VecPoint3f_reserve(
  ffi.Pointer<VecPoint3f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3f>, ffi.Size)>()
external void std_VecPoint3f_resize(
  ffi.Pointer<VecPoint3f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3f>, ffi.Size, CvPoint3f)>()
external void std_VecPoint3f_set(
  ffi.Pointer<VecPoint3f> self,
  int index,
  CvPoint3f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3f>)>()
external void std_VecPoint3f_shrink_to_fit(
  ffi.Pointer<VecPoint3f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3i>)>()
external void std_VecPoint3i_clear(
  ffi.Pointer<VecPoint3i> self,
);

@ffi.Native<ffi.Pointer<CvPoint3i> Function(ffi.Pointer<VecPoint3i>)>()
external ffi.Pointer<CvPoint3i> std_VecPoint3i_data(
  ffi.Pointer<VecPoint3i> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecPoint3i>, ffi.Pointer<VecPoint3i>)>()
external void std_VecPoint3i_extend(
  ffi.Pointer<VecPoint3i> self,
  ffi.Pointer<VecPoint3i> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecPoint3iPtr)>()
external void std_VecPoint3i_free(
  imp$1.VecPoint3iPtr self,
);

@ffi.Native<CvPoint3i Function(ffi.Pointer<VecPoint3i>, ffi.Size)>()
external CvPoint3i std_VecPoint3i_get(
  ffi.Pointer<VecPoint3i> self,
  int index,
);

@ffi.Native<ffi.Pointer<CvPoint3i> Function(ffi.Pointer<VecPoint3i>, ffi.Int)>()
external ffi.Pointer<CvPoint3i> std_VecPoint3i_get_p(
  ffi.Pointer<VecPoint3i> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecPoint3i>)>()
external int std_VecPoint3i_length(
  ffi.Pointer<VecPoint3i> self,
);

@ffi.Native<ffi.Pointer<VecPoint3i> Function(ffi.Size)>()
external ffi.Pointer<VecPoint3i> std_VecPoint3i_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecPoint3i> Function(ffi.Size, CvPoint3i)>()
external ffi.Pointer<VecPoint3i> std_VecPoint3i_new_1(
  int length,
  CvPoint3i val,
);

@ffi.Native<
    ffi.Pointer<VecPoint3i> Function(ffi.Size, ffi.Pointer<CvPoint3i>)>()
external ffi.Pointer<VecPoint3i> std_VecPoint3i_new_2(
  int length,
  ffi.Pointer<CvPoint3i> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3i>, CvPoint3i)>()
external void std_VecPoint3i_push_back(
  ffi.Pointer<VecPoint3i> self,
  CvPoint3i val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3i>, ffi.Size)>()
external void std_VecPoint3i_reserve(
  ffi.Pointer<VecPoint3i> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3i>, ffi.Size)>()
external void std_VecPoint3i_resize(
  ffi.Pointer<VecPoint3i> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3i>, ffi.Size, CvPoint3i)>()
external void std_VecPoint3i_set(
  ffi.Pointer<VecPoint3i> self,
  int index,
  CvPoint3i val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint3i>)>()
external void std_VecPoint3i_shrink_to_fit(
  ffi.Pointer<VecPoint3i> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint>)>()
external void std_VecPoint_clear(
  ffi.Pointer<VecPoint> self,
);

@ffi.Native<ffi.Pointer<CvPoint> Function(ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvPoint> std_VecPoint_data(
  ffi.Pointer<VecPoint> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint>, ffi.Pointer<VecPoint>)>()
external void std_VecPoint_extend(
  ffi.Pointer<VecPoint> self,
  ffi.Pointer<VecPoint> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecPointPtr)>()
external void std_VecPoint_free(
  imp$1.VecPointPtr self,
);

@ffi.Native<CvPoint Function(ffi.Pointer<VecPoint>, ffi.Size)>()
external CvPoint std_VecPoint_get(
  ffi.Pointer<VecPoint> self,
  int index,
);

@ffi.Native<ffi.Pointer<CvPoint> Function(ffi.Pointer<VecPoint>, ffi.Int)>()
external ffi.Pointer<CvPoint> std_VecPoint_get_p(
  ffi.Pointer<VecPoint> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecPoint>)>()
external int std_VecPoint_length(
  ffi.Pointer<VecPoint> self,
);

@ffi.Native<ffi.Pointer<VecPoint> Function(ffi.Size)>()
external ffi.Pointer<VecPoint> std_VecPoint_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecPoint> Function(ffi.Size, CvPoint)>()
external ffi.Pointer<VecPoint> std_VecPoint_new_1(
  int length,
  CvPoint val,
);

@ffi.Native<ffi.Pointer<VecPoint> Function(ffi.Size, ffi.Pointer<CvPoint>)>()
external ffi.Pointer<VecPoint> std_VecPoint_new_2(
  int length,
  ffi.Pointer<CvPoint> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint>, CvPoint)>()
external void std_VecPoint_push_back(
  ffi.Pointer<VecPoint> self,
  CvPoint val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint>, ffi.Size)>()
external void std_VecPoint_reserve(
  ffi.Pointer<VecPoint> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint>, ffi.Size)>()
external void std_VecPoint_resize(
  ffi.Pointer<VecPoint> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint>, ffi.Size, CvPoint)>()
external void std_VecPoint_set(
  ffi.Pointer<VecPoint> self,
  int index,
  CvPoint val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecPoint>)>()
external void std_VecPoint_shrink_to_fit(
  ffi.Pointer<VecPoint> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect2f>)>()
external void std_VecRect2f_clear(
  ffi.Pointer<VecRect2f> self,
);

@ffi.Native<ffi.Pointer<CvRect2f> Function(ffi.Pointer<VecRect2f>)>()
external ffi.Pointer<CvRect2f> std_VecRect2f_data(
  ffi.Pointer<VecRect2f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect2f>, ffi.Pointer<VecRect2f>)>()
external void std_VecRect2f_extend(
  ffi.Pointer<VecRect2f> self,
  ffi.Pointer<VecRect2f> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecRect2fPtr)>()
external void std_VecRect2f_free(
  imp$1.VecRect2fPtr self,
);

@ffi.Native<CvRect2f Function(ffi.Pointer<VecRect2f>, ffi.Size)>()
external CvRect2f std_VecRect2f_get(
  ffi.Pointer<VecRect2f> self,
  int index,
);

@ffi.Native<ffi.Pointer<CvRect2f> Function(ffi.Pointer<VecRect2f>, ffi.Int)>()
external ffi.Pointer<CvRect2f> std_VecRect2f_get_p(
  ffi.Pointer<VecRect2f> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecRect2f>)>()
external int std_VecRect2f_length(
  ffi.Pointer<VecRect2f> self,
);

@ffi.Native<ffi.Pointer<VecRect2f> Function(ffi.Size)>()
external ffi.Pointer<VecRect2f> std_VecRect2f_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecRect2f> Function(ffi.Size, CvRect2f)>()
external ffi.Pointer<VecRect2f> std_VecRect2f_new_1(
  int length,
  CvRect2f val,
);

@ffi.Native<ffi.Pointer<VecRect2f> Function(ffi.Size, ffi.Pointer<CvRect2f>)>()
external ffi.Pointer<VecRect2f> std_VecRect2f_new_2(
  int length,
  ffi.Pointer<CvRect2f> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect2f>, CvRect2f)>()
external void std_VecRect2f_push_back(
  ffi.Pointer<VecRect2f> self,
  CvRect2f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect2f>, ffi.Size)>()
external void std_VecRect2f_reserve(
  ffi.Pointer<VecRect2f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect2f>, ffi.Size)>()
external void std_VecRect2f_resize(
  ffi.Pointer<VecRect2f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect2f>, ffi.Size, CvRect2f)>()
external void std_VecRect2f_set(
  ffi.Pointer<VecRect2f> self,
  int index,
  CvRect2f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect2f>)>()
external void std_VecRect2f_shrink_to_fit(
  ffi.Pointer<VecRect2f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect>)>()
external void std_VecRect_clear(
  ffi.Pointer<VecRect> self,
);

@ffi.Native<ffi.Pointer<CvRect> Function(ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvRect> std_VecRect_data(
  ffi.Pointer<VecRect> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect>, ffi.Pointer<VecRect>)>()
external void std_VecRect_extend(
  ffi.Pointer<VecRect> self,
  ffi.Pointer<VecRect> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecRectPtr)>()
external void std_VecRect_free(
  imp$1.VecRectPtr self,
);

@ffi.Native<CvRect Function(ffi.Pointer<VecRect>, ffi.Size)>()
external CvRect std_VecRect_get(
  ffi.Pointer<VecRect> self,
  int index,
);

@ffi.Native<ffi.Pointer<CvRect> Function(ffi.Pointer<VecRect>, ffi.Int)>()
external ffi.Pointer<CvRect> std_VecRect_get_p(
  ffi.Pointer<VecRect> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecRect>)>()
external int std_VecRect_length(
  ffi.Pointer<VecRect> self,
);

@ffi.Native<ffi.Pointer<VecRect> Function(ffi.Size)>()
external ffi.Pointer<VecRect> std_VecRect_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecRect> Function(ffi.Size, CvRect)>()
external ffi.Pointer<VecRect> std_VecRect_new_1(
  int length,
  CvRect val,
);

@ffi.Native<ffi.Pointer<VecRect> Function(ffi.Size, ffi.Pointer<CvRect>)>()
external ffi.Pointer<VecRect> std_VecRect_new_2(
  int length,
  ffi.Pointer<CvRect> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect>, CvRect)>()
external void std_VecRect_push_back(
  ffi.Pointer<VecRect> self,
  CvRect val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect>, ffi.Size)>()
external void std_VecRect_reserve(
  ffi.Pointer<VecRect> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect>, ffi.Size)>()
external void std_VecRect_resize(
  ffi.Pointer<VecRect> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect>, ffi.Size, CvRect)>()
external void std_VecRect_set(
  ffi.Pointer<VecRect> self,
  int index,
  CvRect val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRect>)>()
external void std_VecRect_shrink_to_fit(
  ffi.Pointer<VecRect> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRotatedRect>)>()
external void std_VecRotatedRect_clear(
  ffi.Pointer<VecRotatedRect> self,
);

@ffi.Native<ffi.Pointer<RotatedRect> Function(ffi.Pointer<VecRotatedRect>)>()
external ffi.Pointer<RotatedRect> std_VecRotatedRect_data(
  ffi.Pointer<VecRotatedRect> self,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<VecRotatedRect>, ffi.Pointer<VecRotatedRect>)>()
external void std_VecRotatedRect_extend(
  ffi.Pointer<VecRotatedRect> self,
  ffi.Pointer<VecRotatedRect> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecRotatedRectPtr)>()
external void std_VecRotatedRect_free(
  imp$1.VecRotatedRectPtr self,
);

@ffi.Native<RotatedRect Function(ffi.Pointer<VecRotatedRect>, ffi.Size)>()
external RotatedRect std_VecRotatedRect_get(
  ffi.Pointer<VecRotatedRect> self,
  int index,
);

@ffi.Native<
    ffi.Pointer<RotatedRect> Function(ffi.Pointer<VecRotatedRect>, ffi.Int)>()
external ffi.Pointer<RotatedRect> std_VecRotatedRect_get_p(
  ffi.Pointer<VecRotatedRect> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecRotatedRect>)>()
external int std_VecRotatedRect_length(
  ffi.Pointer<VecRotatedRect> self,
);

@ffi.Native<ffi.Pointer<VecRotatedRect> Function(ffi.Size)>()
external ffi.Pointer<VecRotatedRect> std_VecRotatedRect_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecRotatedRect> Function(ffi.Size, RotatedRect)>()
external ffi.Pointer<VecRotatedRect> std_VecRotatedRect_new_1(
  int length,
  RotatedRect val,
);

@ffi.Native<
    ffi.Pointer<VecRotatedRect> Function(ffi.Size, ffi.Pointer<RotatedRect>)>()
external ffi.Pointer<VecRotatedRect> std_VecRotatedRect_new_2(
  int length,
  ffi.Pointer<RotatedRect> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRotatedRect>, RotatedRect)>()
external void std_VecRotatedRect_push_back(
  ffi.Pointer<VecRotatedRect> self,
  RotatedRect val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRotatedRect>, ffi.Size)>()
external void std_VecRotatedRect_reserve(
  ffi.Pointer<VecRotatedRect> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRotatedRect>, ffi.Size)>()
external void std_VecRotatedRect_resize(
  ffi.Pointer<VecRotatedRect> self,
  int new_len,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecRotatedRect>, ffi.Size, RotatedRect)>()
external void std_VecRotatedRect_set(
  ffi.Pointer<VecRotatedRect> self,
  int index,
  RotatedRect val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecRotatedRect>)>()
external void std_VecRotatedRect_shrink_to_fit(
  ffi.Pointer<VecRotatedRect> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU16>)>()
external void std_VecU16_clear(
  ffi.Pointer<VecU16> self,
);

@ffi.Native<ffi.Pointer<VecU16> Function(ffi.Pointer<VecU16>)>()
external ffi.Pointer<VecU16> std_VecU16_clone(
  ffi.Pointer<VecU16> self,
);

@ffi.Native<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<VecU16>)>()
external ffi.Pointer<ffi.Uint16> std_VecU16_data(
  ffi.Pointer<VecU16> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Pointer<VecU16>)>()
external void std_VecU16_extend(
  ffi.Pointer<VecU16> self,
  ffi.Pointer<VecU16> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecU16Ptr)>()
external void std_VecU16_free(
  imp$1.VecU16Ptr self,
);

@ffi.Native<ffi.Uint16 Function(ffi.Pointer<VecU16>, ffi.Size)>()
external int std_VecU16_get(
  ffi.Pointer<VecU16> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecU16>)>()
external int std_VecU16_length(
  ffi.Pointer<VecU16> self,
);

@ffi.Native<ffi.Pointer<VecU16> Function(ffi.Size)>()
external ffi.Pointer<VecU16> std_VecU16_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecU16> Function(ffi.Size, ffi.Uint16)>()
external ffi.Pointer<VecU16> std_VecU16_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecU16> Function(ffi.Size, ffi.Pointer<ffi.Uint16>)>()
external ffi.Pointer<VecU16> std_VecU16_new_2(
  int length,
  ffi.Pointer<ffi.Uint16> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Uint16)>()
external void std_VecU16_push_back(
  ffi.Pointer<VecU16> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Size)>()
external void std_VecU16_reserve(
  ffi.Pointer<VecU16> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Size)>()
external void std_VecU16_resize(
  ffi.Pointer<VecU16> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Size, ffi.Uint16)>()
external void std_VecU16_set(
  ffi.Pointer<VecU16> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU16>)>()
external void std_VecU16_shrink_to_fit(
  ffi.Pointer<VecU16> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU32>)>()
external void std_VecU32_clear(
  ffi.Pointer<VecU32> self,
);

@ffi.Native<ffi.Pointer<VecU32> Function(ffi.Pointer<VecU32>)>()
external ffi.Pointer<VecU32> std_VecU32_clone(
  ffi.Pointer<VecU32> self,
);

@ffi.Native<ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<VecU32>)>()
external ffi.Pointer<ffi.Uint32> std_VecU32_data(
  ffi.Pointer<VecU32> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Pointer<VecU32>)>()
external void std_VecU32_extend(
  ffi.Pointer<VecU32> self,
  ffi.Pointer<VecU32> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecU32Ptr)>()
external void std_VecU32_free(
  imp$1.VecU32Ptr self,
);

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<VecU32>, ffi.Size)>()
external int std_VecU32_get(
  ffi.Pointer<VecU32> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecU32>)>()
external int std_VecU32_length(
  ffi.Pointer<VecU32> self,
);

@ffi.Native<ffi.Pointer<VecU32> Function(ffi.Size)>()
external ffi.Pointer<VecU32> std_VecU32_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecU32> Function(ffi.Size, ffi.Uint32)>()
external ffi.Pointer<VecU32> std_VecU32_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecU32> Function(ffi.Size, ffi.Pointer<ffi.Uint32>)>()
external ffi.Pointer<VecU32> std_VecU32_new_2(
  int length,
  ffi.Pointer<ffi.Uint32> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Uint32)>()
external void std_VecU32_push_back(
  ffi.Pointer<VecU32> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Size)>()
external void std_VecU32_reserve(
  ffi.Pointer<VecU32> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Size)>()
external void std_VecU32_resize(
  ffi.Pointer<VecU32> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Size, ffi.Uint32)>()
external void std_VecU32_set(
  ffi.Pointer<VecU32> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU32>)>()
external void std_VecU32_shrink_to_fit(
  ffi.Pointer<VecU32> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU64>)>()
external void std_VecU64_clear(
  ffi.Pointer<VecU64> self,
);

@ffi.Native<ffi.Pointer<VecU64> Function(ffi.Pointer<VecU64>)>()
external ffi.Pointer<VecU64> std_VecU64_clone(
  ffi.Pointer<VecU64> self,
);

@ffi.Native<ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<VecU64>)>()
external ffi.Pointer<ffi.Uint64> std_VecU64_data(
  ffi.Pointer<VecU64> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Pointer<VecU64>)>()
external void std_VecU64_extend(
  ffi.Pointer<VecU64> self,
  ffi.Pointer<VecU64> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecU64Ptr)>()
external void std_VecU64_free(
  imp$1.VecU64Ptr self,
);

@ffi.Native<ffi.Uint64 Function(ffi.Pointer<VecU64>, ffi.Size)>()
external int std_VecU64_get(
  ffi.Pointer<VecU64> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecU64>)>()
external int std_VecU64_length(
  ffi.Pointer<VecU64> self,
);

@ffi.Native<ffi.Pointer<VecU64> Function(ffi.Size)>()
external ffi.Pointer<VecU64> std_VecU64_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecU64> Function(ffi.Size, ffi.Uint64)>()
external ffi.Pointer<VecU64> std_VecU64_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecU64> Function(ffi.Size, ffi.Pointer<ffi.Uint64>)>()
external ffi.Pointer<VecU64> std_VecU64_new_2(
  int length,
  ffi.Pointer<ffi.Uint64> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Uint64)>()
external void std_VecU64_push_back(
  ffi.Pointer<VecU64> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Size)>()
external void std_VecU64_reserve(
  ffi.Pointer<VecU64> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Size)>()
external void std_VecU64_resize(
  ffi.Pointer<VecU64> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Size, ffi.Uint64)>()
external void std_VecU64_set(
  ffi.Pointer<VecU64> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU64>)>()
external void std_VecU64_shrink_to_fit(
  ffi.Pointer<VecU64> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU8>)>()
external void std_VecU8_clear(
  ffi.Pointer<VecU8> self,
);

@ffi.Native<ffi.Pointer<VecU8> Function(ffi.Pointer<VecU8>)>()
external ffi.Pointer<VecU8> std_VecU8_clone(
  ffi.Pointer<VecU8> self,
);

@ffi.Native<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<VecU8>)>()
external ffi.Pointer<ffi.Uint8> std_VecU8_data(
  ffi.Pointer<VecU8> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Pointer<VecU8>)>()
external void std_VecU8_extend(
  ffi.Pointer<VecU8> self,
  ffi.Pointer<VecU8> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecU8Ptr)>()
external void std_VecU8_free(
  imp$1.VecU8Ptr self,
);

@ffi.Native<ffi.Uint8 Function(ffi.Pointer<VecU8>, ffi.Size)>()
external int std_VecU8_get(
  ffi.Pointer<VecU8> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecU8>)>()
external int std_VecU8_length(
  ffi.Pointer<VecU8> self,
);

@ffi.Native<ffi.Pointer<VecU8> Function(ffi.Size)>()
external ffi.Pointer<VecU8> std_VecU8_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecU8> Function(ffi.Size, ffi.Uint8)>()
external ffi.Pointer<VecU8> std_VecU8_new_1(
  int length,
  int val,
);

@ffi.Native<ffi.Pointer<VecU8> Function(ffi.Size, ffi.Pointer<ffi.Uint8>)>()
external ffi.Pointer<VecU8> std_VecU8_new_2(
  int length,
  ffi.Pointer<ffi.Uint8> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Uint8)>()
external void std_VecU8_push_back(
  ffi.Pointer<VecU8> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Size)>()
external void std_VecU8_reserve(
  ffi.Pointer<VecU8> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Size)>()
external void std_VecU8_resize(
  ffi.Pointer<VecU8> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Size, ffi.Uint8)>()
external void std_VecU8_set(
  ffi.Pointer<VecU8> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecU8>)>()
external void std_VecU8_shrink_to_fit(
  ffi.Pointer<VecU8> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecUChar>)>()
external void std_VecUChar_clear(
  ffi.Pointer<VecUChar> self,
);

@ffi.Native<ffi.Pointer<VecUChar> Function(ffi.Pointer<VecUChar>)>()
external ffi.Pointer<VecUChar> std_VecUChar_clone(
  ffi.Pointer<VecUChar> self,
);

@ffi.Native<ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<VecUChar>)>()
external ffi.Pointer<ffi.UnsignedChar> std_VecUChar_data(
  ffi.Pointer<VecUChar> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.Pointer<VecUChar>)>()
external void std_VecUChar_extend(
  ffi.Pointer<VecUChar> self,
  ffi.Pointer<VecUChar> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecUCharPtr)>()
external void std_VecUChar_free(
  imp$1.VecUCharPtr self,
);

@ffi.Native<ffi.UnsignedChar Function(ffi.Pointer<VecUChar>, ffi.Size)>()
external int std_VecUChar_get(
  ffi.Pointer<VecUChar> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecUChar>)>()
external int std_VecUChar_length(
  ffi.Pointer<VecUChar> self,
);

@ffi.Native<ffi.Pointer<VecUChar> Function(ffi.Size)>()
external ffi.Pointer<VecUChar> std_VecUChar_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecUChar> Function(ffi.Size, ffi.UnsignedChar)>()
external ffi.Pointer<VecUChar> std_VecUChar_new_1(
  int length,
  int val,
);

@ffi.Native<
    ffi.Pointer<VecUChar> Function(ffi.Size, ffi.Pointer<ffi.UnsignedChar>)>()
external ffi.Pointer<VecUChar> std_VecUChar_new_2(
  int length,
  ffi.Pointer<ffi.UnsignedChar> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.UnsignedChar)>()
external void std_VecUChar_push_back(
  ffi.Pointer<VecUChar> self,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.Size)>()
external void std_VecUChar_reserve(
  ffi.Pointer<VecUChar> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.Size)>()
external void std_VecUChar_resize(
  ffi.Pointer<VecUChar> self,
  int new_len,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecUChar>, ffi.Size, ffi.UnsignedChar)>()
external void std_VecUChar_set(
  ffi.Pointer<VecUChar> self,
  int index,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecUChar>)>()
external void std_VecUChar_shrink_to_fit(
  ffi.Pointer<VecUChar> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4f>)>()
external void std_VecVec4f_clear(
  ffi.Pointer<VecVec4f> self,
);

@ffi.Native<ffi.Pointer<Vec4f> Function(ffi.Pointer<VecVec4f>)>()
external ffi.Pointer<Vec4f> std_VecVec4f_data(
  ffi.Pointer<VecVec4f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4f>, ffi.Pointer<VecVec4f>)>()
external void std_VecVec4f_extend(
  ffi.Pointer<VecVec4f> self,
  ffi.Pointer<VecVec4f> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecVec4fPtr)>()
external void std_VecVec4f_free(
  imp$1.VecVec4fPtr self,
);

@ffi.Native<Vec4f Function(ffi.Pointer<VecVec4f>, ffi.Size)>()
external Vec4f std_VecVec4f_get(
  ffi.Pointer<VecVec4f> self,
  int index,
);

@ffi.Native<ffi.Pointer<Vec4f> Function(ffi.Pointer<VecVec4f>, ffi.Int)>()
external ffi.Pointer<Vec4f> std_VecVec4f_get_p(
  ffi.Pointer<VecVec4f> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVec4f>)>()
external int std_VecVec4f_length(
  ffi.Pointer<VecVec4f> self,
);

@ffi.Native<ffi.Pointer<VecVec4f> Function(ffi.Size)>()
external ffi.Pointer<VecVec4f> std_VecVec4f_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVec4f> Function(ffi.Size, Vec4f)>()
external ffi.Pointer<VecVec4f> std_VecVec4f_new_1(
  int length,
  Vec4f val,
);

@ffi.Native<ffi.Pointer<VecVec4f> Function(ffi.Size, ffi.Pointer<Vec4f>)>()
external ffi.Pointer<VecVec4f> std_VecVec4f_new_2(
  int length,
  ffi.Pointer<Vec4f> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4f>, Vec4f)>()
external void std_VecVec4f_push_back(
  ffi.Pointer<VecVec4f> self,
  Vec4f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4f>, ffi.Size)>()
external void std_VecVec4f_reserve(
  ffi.Pointer<VecVec4f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4f>, ffi.Size)>()
external void std_VecVec4f_resize(
  ffi.Pointer<VecVec4f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4f>, ffi.Size, Vec4f)>()
external void std_VecVec4f_set(
  ffi.Pointer<VecVec4f> self,
  int index,
  Vec4f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4f>)>()
external void std_VecVec4f_shrink_to_fit(
  ffi.Pointer<VecVec4f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4i>)>()
external void std_VecVec4i_clear(
  ffi.Pointer<VecVec4i> self,
);

@ffi.Native<ffi.Pointer<Vec4i> Function(ffi.Pointer<VecVec4i>)>()
external ffi.Pointer<Vec4i> std_VecVec4i_data(
  ffi.Pointer<VecVec4i> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4i>, ffi.Pointer<VecVec4i>)>()
external void std_VecVec4i_extend(
  ffi.Pointer<VecVec4i> self,
  ffi.Pointer<VecVec4i> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecVec4iPtr)>()
external void std_VecVec4i_free(
  imp$1.VecVec4iPtr self,
);

@ffi.Native<Vec4i Function(ffi.Pointer<VecVec4i>, ffi.Size)>()
external Vec4i std_VecVec4i_get(
  ffi.Pointer<VecVec4i> self,
  int index,
);

@ffi.Native<ffi.Pointer<Vec4i> Function(ffi.Pointer<VecVec4i>, ffi.Int)>()
external ffi.Pointer<Vec4i> std_VecVec4i_get_p(
  ffi.Pointer<VecVec4i> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVec4i>)>()
external int std_VecVec4i_length(
  ffi.Pointer<VecVec4i> self,
);

@ffi.Native<ffi.Pointer<VecVec4i> Function(ffi.Size)>()
external ffi.Pointer<VecVec4i> std_VecVec4i_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVec4i> Function(ffi.Size, Vec4i)>()
external ffi.Pointer<VecVec4i> std_VecVec4i_new_1(
  int length,
  Vec4i val,
);

@ffi.Native<ffi.Pointer<VecVec4i> Function(ffi.Size, ffi.Pointer<Vec4i>)>()
external ffi.Pointer<VecVec4i> std_VecVec4i_new_2(
  int length,
  ffi.Pointer<Vec4i> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4i>, Vec4i)>()
external void std_VecVec4i_push_back(
  ffi.Pointer<VecVec4i> self,
  Vec4i val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4i>, ffi.Size)>()
external void std_VecVec4i_reserve(
  ffi.Pointer<VecVec4i> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4i>, ffi.Size)>()
external void std_VecVec4i_resize(
  ffi.Pointer<VecVec4i> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4i>, ffi.Size, Vec4i)>()
external void std_VecVec4i_set(
  ffi.Pointer<VecVec4i> self,
  int index,
  Vec4i val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec4i>)>()
external void std_VecVec4i_shrink_to_fit(
  ffi.Pointer<VecVec4i> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec6f>)>()
external void std_VecVec6f_clear(
  ffi.Pointer<VecVec6f> self,
);

@ffi.Native<ffi.Pointer<Vec6f> Function(ffi.Pointer<VecVec6f>)>()
external ffi.Pointer<Vec6f> std_VecVec6f_data(
  ffi.Pointer<VecVec6f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec6f>, ffi.Pointer<VecVec6f>)>()
external void std_VecVec6f_extend(
  ffi.Pointer<VecVec6f> self,
  ffi.Pointer<VecVec6f> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecVec6fPtr)>()
external void std_VecVec6f_free(
  imp$1.VecVec6fPtr self,
);

@ffi.Native<Vec6f Function(ffi.Pointer<VecVec6f>, ffi.Size)>()
external Vec6f std_VecVec6f_get(
  ffi.Pointer<VecVec6f> self,
  int index,
);

@ffi.Native<ffi.Pointer<Vec6f> Function(ffi.Pointer<VecVec6f>, ffi.Int)>()
external ffi.Pointer<Vec6f> std_VecVec6f_get_p(
  ffi.Pointer<VecVec6f> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVec6f>)>()
external int std_VecVec6f_length(
  ffi.Pointer<VecVec6f> self,
);

@ffi.Native<ffi.Pointer<VecVec6f> Function(ffi.Size)>()
external ffi.Pointer<VecVec6f> std_VecVec6f_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVec6f> Function(ffi.Size, Vec6f)>()
external ffi.Pointer<VecVec6f> std_VecVec6f_new_1(
  int length,
  Vec6f val,
);

@ffi.Native<ffi.Pointer<VecVec6f> Function(ffi.Size, ffi.Pointer<Vec6f>)>()
external ffi.Pointer<VecVec6f> std_VecVec6f_new_2(
  int length,
  ffi.Pointer<Vec6f> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec6f>, Vec6f)>()
external void std_VecVec6f_push_back(
  ffi.Pointer<VecVec6f> self,
  Vec6f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec6f>, ffi.Size)>()
external void std_VecVec6f_reserve(
  ffi.Pointer<VecVec6f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec6f>, ffi.Size)>()
external void std_VecVec6f_resize(
  ffi.Pointer<VecVec6f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec6f>, ffi.Size, Vec6f)>()
external void std_VecVec6f_set(
  ffi.Pointer<VecVec6f> self,
  int index,
  Vec6f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVec6f>)>()
external void std_VecVec6f_shrink_to_fit(
  ffi.Pointer<VecVec6f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecChar>)>()
external void std_VecVecChar_clear(
  ffi.Pointer<VecVecChar> self,
);

@ffi.Native<ffi.Pointer<VecVecChar> Function(ffi.Pointer<VecVecChar>)>()
external ffi.Pointer<VecVecChar> std_VecVecChar_clone(
  ffi.Pointer<VecVecChar> self,
);

@ffi.Native<ffi.Pointer<VecChar> Function(ffi.Pointer<VecVecChar>)>()
external ffi.Pointer<VecChar> std_VecVecChar_data(
  ffi.Pointer<VecVecChar> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecChar>)>()
external void std_VecVecChar_free(
  ffi.Pointer<VecVecChar> self,
);

@ffi.Native<ffi.Pointer<VecChar> Function(ffi.Pointer<VecVecChar>, ffi.Int)>()
external ffi.Pointer<VecChar> std_VecVecChar_get(
  ffi.Pointer<VecVecChar> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecChar>)>()
external int std_VecVecChar_length(
  ffi.Pointer<VecVecChar> self,
);

@ffi.Native<ffi.Pointer<VecVecChar> Function(ffi.Size)>()
external ffi.Pointer<VecVecChar> std_VecVecChar_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVecChar> Function(ffi.Size, ffi.Pointer<VecChar>)>()
external ffi.Pointer<VecVecChar> std_VecVecChar_new_1(
  int length,
  ffi.Pointer<VecChar> val,
);

@ffi.Native<ffi.Pointer<VecVecChar> Function(ffi.Pointer<VecVecChar>)>()
external ffi.Pointer<VecVecChar> std_VecVecChar_new_2(
  ffi.Pointer<VecVecChar> val_ptr,
);

@ffi.Native<
    ffi.Pointer<VecVecChar> Function(
        ffi.Pointer<ffi.Pointer<ffi.Char>>, VecI32)>()
external ffi.Pointer<VecVecChar> std_VecVecChar_new_3(
  ffi.Pointer<ffi.Pointer<ffi.Char>> val,
  VecI32 sizes,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecChar>, VecChar)>()
external void std_VecVecChar_push_back(
  ffi.Pointer<VecVecChar> self,
  VecChar val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecChar>, ffi.Size)>()
external void std_VecVecChar_reserve(
  ffi.Pointer<VecVecChar> self,
  int size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecChar>, ffi.Size)>()
external void std_VecVecChar_resize(
  ffi.Pointer<VecVecChar> self,
  int size,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecChar>, ffi.Int, ffi.Pointer<VecChar>)>()
external void std_VecVecChar_set(
  ffi.Pointer<VecVecChar> self,
  int index,
  ffi.Pointer<VecChar> val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecChar>)>()
external void std_VecVecChar_shrink_to_fit(
  ffi.Pointer<VecVecChar> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecDMatch>)>()
external void std_VecVecDMatch_clear(
  ffi.Pointer<VecVecDMatch> self,
);

@ffi.Native<ffi.Pointer<VecVecDMatch> Function(ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<VecVecDMatch> std_VecVecDMatch_clone(
  ffi.Pointer<VecVecDMatch> self,
);

@ffi.Native<ffi.Pointer<VecDMatch> Function(ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<VecDMatch> std_VecVecDMatch_data(
  ffi.Pointer<VecVecDMatch> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecDMatch>, ffi.Pointer<VecVecDMatch>)>()
external void std_VecVecDMatch_extend(
  ffi.Pointer<VecVecDMatch> self,
  ffi.Pointer<VecVecDMatch> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecVecDMatchPtr)>()
external void std_VecVecDMatch_free(
  imp$1.VecVecDMatchPtr self,
);

@ffi.Native<VecDMatch Function(ffi.Pointer<VecVecDMatch>, ffi.Size)>()
external VecDMatch std_VecVecDMatch_get(
  ffi.Pointer<VecVecDMatch> self,
  int index,
);

@ffi.Native<
    ffi.Pointer<DMatch> Function(
        ffi.Pointer<VecVecDMatch>, ffi.Size, ffi.Size)>()
external ffi.Pointer<DMatch> std_VecVecDMatch_get_ij(
  ffi.Pointer<VecVecDMatch> self,
  int i,
  int j,
);

@ffi.Native<
    ffi.Pointer<VecDMatch> Function(ffi.Pointer<VecVecDMatch>, ffi.Int)>()
external ffi.Pointer<VecDMatch> std_VecVecDMatch_get_p(
  ffi.Pointer<VecVecDMatch> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecDMatch>)>()
external int std_VecVecDMatch_length(
  ffi.Pointer<VecVecDMatch> self,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecDMatch>, ffi.Size)>()
external int std_VecVecDMatch_length_i(
  ffi.Pointer<VecVecDMatch> self,
  int i,
);

@ffi.Native<ffi.Pointer<VecVecDMatch> Function(ffi.Size)>()
external ffi.Pointer<VecVecDMatch> std_VecVecDMatch_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVecDMatch> Function(ffi.Size, VecDMatch)>()
external ffi.Pointer<VecVecDMatch> std_VecVecDMatch_new_1(
  int length,
  VecDMatch val,
);

@ffi.Native<
    ffi.Pointer<VecVecDMatch> Function(ffi.Size, ffi.Pointer<VecDMatch>)>()
external ffi.Pointer<VecVecDMatch> std_VecVecDMatch_new_2(
  int length,
  ffi.Pointer<VecDMatch> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecDMatch>, VecDMatch)>()
external void std_VecVecDMatch_push_back(
  ffi.Pointer<VecVecDMatch> self,
  VecDMatch val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecDMatch>, ffi.Size)>()
external void std_VecVecDMatch_reserve(
  ffi.Pointer<VecVecDMatch> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecDMatch>, ffi.Size)>()
external void std_VecVecDMatch_resize(
  ffi.Pointer<VecVecDMatch> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecDMatch>, ffi.Size, VecDMatch)>()
external void std_VecVecDMatch_set(
  ffi.Pointer<VecVecDMatch> self,
  int index,
  VecDMatch val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecDMatch>)>()
external void std_VecVecDMatch_shrink_to_fit(
  ffi.Pointer<VecVecDMatch> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint2f>)>()
external void std_VecVecPoint2f_clear(
  ffi.Pointer<VecVecPoint2f> self,
);

@ffi.Native<ffi.Pointer<VecPoint2f> Function(ffi.Pointer<VecVecPoint2f>)>()
external ffi.Pointer<VecPoint2f> std_VecVecPoint2f_data(
  ffi.Pointer<VecVecPoint2f> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecPoint2f>, ffi.Pointer<VecVecPoint2f>)>()
external void std_VecVecPoint2f_extend(
  ffi.Pointer<VecVecPoint2f> self,
  ffi.Pointer<VecVecPoint2f> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecVecPoint2fPtr)>()
external void std_VecVecPoint2f_free(
  imp$1.VecVecPoint2fPtr self,
);

@ffi.Native<VecPoint2f Function(ffi.Pointer<VecVecPoint2f>, ffi.Size)>()
external VecPoint2f std_VecVecPoint2f_get(
  ffi.Pointer<VecVecPoint2f> self,
  int index,
);

@ffi.Native<
    ffi.Pointer<CvPoint2f> Function(
        ffi.Pointer<VecVecPoint2f>, ffi.Size, ffi.Size)>()
external ffi.Pointer<CvPoint2f> std_VecVecPoint2f_get_ij(
  ffi.Pointer<VecVecPoint2f> self,
  int i,
  int j,
);

@ffi.Native<
    ffi.Pointer<VecPoint2f> Function(ffi.Pointer<VecVecPoint2f>, ffi.Int)>()
external ffi.Pointer<VecPoint2f> std_VecVecPoint2f_get_p(
  ffi.Pointer<VecVecPoint2f> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecPoint2f>)>()
external int std_VecVecPoint2f_length(
  ffi.Pointer<VecVecPoint2f> self,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecPoint2f>, ffi.Size)>()
external int std_VecVecPoint2f_length_i(
  ffi.Pointer<VecVecPoint2f> self,
  int i,
);

@ffi.Native<ffi.Pointer<VecVecPoint2f> Function(ffi.Size)>()
external ffi.Pointer<VecVecPoint2f> std_VecVecPoint2f_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVecPoint2f> Function(ffi.Size, VecPoint2f)>()
external ffi.Pointer<VecVecPoint2f> std_VecVecPoint2f_new_1(
  int length,
  VecPoint2f val,
);

@ffi.Native<
    ffi.Pointer<VecVecPoint2f> Function(ffi.Size, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<VecVecPoint2f> std_VecVecPoint2f_new_2(
  int length,
  ffi.Pointer<VecPoint2f> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint2f>, VecPoint2f)>()
external void std_VecVecPoint2f_push_back(
  ffi.Pointer<VecVecPoint2f> self,
  VecPoint2f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint2f>, ffi.Size)>()
external void std_VecVecPoint2f_reserve(
  ffi.Pointer<VecVecPoint2f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint2f>, ffi.Size)>()
external void std_VecVecPoint2f_resize(
  ffi.Pointer<VecVecPoint2f> self,
  int new_len,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecPoint2f>, ffi.Size, VecPoint2f)>()
external void std_VecVecPoint2f_set(
  ffi.Pointer<VecVecPoint2f> self,
  int index,
  VecPoint2f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint2f>)>()
external void std_VecVecPoint2f_shrink_to_fit(
  ffi.Pointer<VecVecPoint2f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3f>)>()
external void std_VecVecPoint3f_clear(
  ffi.Pointer<VecVecPoint3f> self,
);

@ffi.Native<ffi.Pointer<VecPoint3f> Function(ffi.Pointer<VecVecPoint3f>)>()
external ffi.Pointer<VecPoint3f> std_VecVecPoint3f_data(
  ffi.Pointer<VecVecPoint3f> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecPoint3f>, ffi.Pointer<VecVecPoint3f>)>()
external void std_VecVecPoint3f_extend(
  ffi.Pointer<VecVecPoint3f> self,
  ffi.Pointer<VecVecPoint3f> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecVecPoint3fPtr)>()
external void std_VecVecPoint3f_free(
  imp$1.VecVecPoint3fPtr self,
);

@ffi.Native<VecPoint3f Function(ffi.Pointer<VecVecPoint3f>, ffi.Size)>()
external VecPoint3f std_VecVecPoint3f_get(
  ffi.Pointer<VecVecPoint3f> self,
  int index,
);

@ffi.Native<
    ffi.Pointer<CvPoint3f> Function(
        ffi.Pointer<VecVecPoint3f>, ffi.Size, ffi.Size)>()
external ffi.Pointer<CvPoint3f> std_VecVecPoint3f_get_ij(
  ffi.Pointer<VecVecPoint3f> self,
  int i,
  int j,
);

@ffi.Native<
    ffi.Pointer<VecPoint3f> Function(ffi.Pointer<VecVecPoint3f>, ffi.Int)>()
external ffi.Pointer<VecPoint3f> std_VecVecPoint3f_get_p(
  ffi.Pointer<VecVecPoint3f> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecPoint3f>)>()
external int std_VecVecPoint3f_length(
  ffi.Pointer<VecVecPoint3f> self,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecPoint3f>, ffi.Size)>()
external int std_VecVecPoint3f_length_i(
  ffi.Pointer<VecVecPoint3f> self,
  int i,
);

@ffi.Native<ffi.Pointer<VecVecPoint3f> Function(ffi.Size)>()
external ffi.Pointer<VecVecPoint3f> std_VecVecPoint3f_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVecPoint3f> Function(ffi.Size, VecPoint3f)>()
external ffi.Pointer<VecVecPoint3f> std_VecVecPoint3f_new_1(
  int length,
  VecPoint3f val,
);

@ffi.Native<
    ffi.Pointer<VecVecPoint3f> Function(ffi.Size, ffi.Pointer<VecPoint3f>)>()
external ffi.Pointer<VecVecPoint3f> std_VecVecPoint3f_new_2(
  int length,
  ffi.Pointer<VecPoint3f> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3f>, VecPoint3f)>()
external void std_VecVecPoint3f_push_back(
  ffi.Pointer<VecVecPoint3f> self,
  VecPoint3f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3f>, ffi.Size)>()
external void std_VecVecPoint3f_reserve(
  ffi.Pointer<VecVecPoint3f> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3f>, ffi.Size)>()
external void std_VecVecPoint3f_resize(
  ffi.Pointer<VecVecPoint3f> self,
  int new_len,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecPoint3f>, ffi.Size, VecPoint3f)>()
external void std_VecVecPoint3f_set(
  ffi.Pointer<VecVecPoint3f> self,
  int index,
  VecPoint3f val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3f>)>()
external void std_VecVecPoint3f_shrink_to_fit(
  ffi.Pointer<VecVecPoint3f> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3i>)>()
external void std_VecVecPoint3i_clear(
  ffi.Pointer<VecVecPoint3i> self,
);

@ffi.Native<ffi.Pointer<VecPoint3i> Function(ffi.Pointer<VecVecPoint3i>)>()
external ffi.Pointer<VecPoint3i> std_VecVecPoint3i_data(
  ffi.Pointer<VecVecPoint3i> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecPoint3i>, ffi.Pointer<VecVecPoint3i>)>()
external void std_VecVecPoint3i_extend(
  ffi.Pointer<VecVecPoint3i> self,
  ffi.Pointer<VecVecPoint3i> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecVecPoint3iPtr)>()
external void std_VecVecPoint3i_free(
  imp$1.VecVecPoint3iPtr self,
);

@ffi.Native<VecPoint3i Function(ffi.Pointer<VecVecPoint3i>, ffi.Size)>()
external VecPoint3i std_VecVecPoint3i_get(
  ffi.Pointer<VecVecPoint3i> self,
  int index,
);

@ffi.Native<
    ffi.Pointer<CvPoint3i> Function(
        ffi.Pointer<VecVecPoint3i>, ffi.Size, ffi.Size)>()
external ffi.Pointer<CvPoint3i> std_VecVecPoint3i_get_ij(
  ffi.Pointer<VecVecPoint3i> self,
  int i,
  int j,
);

@ffi.Native<
    ffi.Pointer<VecPoint3i> Function(ffi.Pointer<VecVecPoint3i>, ffi.Int)>()
external ffi.Pointer<VecPoint3i> std_VecVecPoint3i_get_p(
  ffi.Pointer<VecVecPoint3i> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecPoint3i>)>()
external int std_VecVecPoint3i_length(
  ffi.Pointer<VecVecPoint3i> self,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecPoint3i>, ffi.Size)>()
external int std_VecVecPoint3i_length_i(
  ffi.Pointer<VecVecPoint3i> self,
  int i,
);

@ffi.Native<ffi.Pointer<VecVecPoint3i> Function(ffi.Size)>()
external ffi.Pointer<VecVecPoint3i> std_VecVecPoint3i_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVecPoint3i> Function(ffi.Size, VecPoint3i)>()
external ffi.Pointer<VecVecPoint3i> std_VecVecPoint3i_new_1(
  int length,
  VecPoint3i val,
);

@ffi.Native<
    ffi.Pointer<VecVecPoint3i> Function(ffi.Size, ffi.Pointer<VecPoint3i>)>()
external ffi.Pointer<VecVecPoint3i> std_VecVecPoint3i_new_2(
  int length,
  ffi.Pointer<VecPoint3i> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3i>, VecPoint3i)>()
external void std_VecVecPoint3i_push_back(
  ffi.Pointer<VecVecPoint3i> self,
  VecPoint3i val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3i>, ffi.Size)>()
external void std_VecVecPoint3i_reserve(
  ffi.Pointer<VecVecPoint3i> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3i>, ffi.Size)>()
external void std_VecVecPoint3i_resize(
  ffi.Pointer<VecVecPoint3i> self,
  int new_len,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecPoint3i>, ffi.Size, VecPoint3i)>()
external void std_VecVecPoint3i_set(
  ffi.Pointer<VecVecPoint3i> self,
  int index,
  VecPoint3i val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint3i>)>()
external void std_VecVecPoint3i_shrink_to_fit(
  ffi.Pointer<VecVecPoint3i> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint>)>()
external void std_VecVecPoint_clear(
  ffi.Pointer<VecVecPoint> self,
);

@ffi.Native<ffi.Pointer<VecPoint> Function(ffi.Pointer<VecVecPoint>)>()
external ffi.Pointer<VecPoint> std_VecVecPoint_data(
  ffi.Pointer<VecVecPoint> self,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<VecVecPoint>, ffi.Pointer<VecVecPoint>)>()
external void std_VecVecPoint_extend(
  ffi.Pointer<VecVecPoint> self,
  ffi.Pointer<VecVecPoint> other,
);

@ffi.Native<ffi.Void Function(imp$1.VecVecPointPtr)>()
external void std_VecVecPoint_free(
  imp$1.VecVecPointPtr self,
);

@ffi.Native<VecPoint Function(ffi.Pointer<VecVecPoint>, ffi.Size)>()
external VecPoint std_VecVecPoint_get(
  ffi.Pointer<VecVecPoint> self,
  int index,
);

@ffi.Native<
    ffi.Pointer<CvPoint> Function(
        ffi.Pointer<VecVecPoint>, ffi.Size, ffi.Size)>()
external ffi.Pointer<CvPoint> std_VecVecPoint_get_ij(
  ffi.Pointer<VecVecPoint> self,
  int i,
  int j,
);

@ffi.Native<ffi.Pointer<VecPoint> Function(ffi.Pointer<VecVecPoint>, ffi.Int)>()
external ffi.Pointer<VecPoint> std_VecVecPoint_get_p(
  ffi.Pointer<VecVecPoint> self,
  int index,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecPoint>)>()
external int std_VecVecPoint_length(
  ffi.Pointer<VecVecPoint> self,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<VecVecPoint>, ffi.Size)>()
external int std_VecVecPoint_length_i(
  ffi.Pointer<VecVecPoint> self,
  int i,
);

@ffi.Native<ffi.Pointer<VecVecPoint> Function(ffi.Size)>()
external ffi.Pointer<VecVecPoint> std_VecVecPoint_new(
  int length,
);

@ffi.Native<ffi.Pointer<VecVecPoint> Function(ffi.Size, VecPoint)>()
external ffi.Pointer<VecVecPoint> std_VecVecPoint_new_1(
  int length,
  VecPoint val,
);

@ffi.Native<
    ffi.Pointer<VecVecPoint> Function(ffi.Size, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<VecVecPoint> std_VecVecPoint_new_2(
  int length,
  ffi.Pointer<VecPoint> val_ptr,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint>, VecPoint)>()
external void std_VecVecPoint_push_back(
  ffi.Pointer<VecVecPoint> self,
  VecPoint val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint>, ffi.Size)>()
external void std_VecVecPoint_reserve(
  ffi.Pointer<VecVecPoint> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint>, ffi.Size)>()
external void std_VecVecPoint_resize(
  ffi.Pointer<VecVecPoint> self,
  int new_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint>, ffi.Size, VecPoint)>()
external void std_VecVecPoint_set(
  ffi.Pointer<VecVecPoint> self,
  int index,
  VecPoint val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<VecVecPoint>)>()
external void std_VecVecPoint_shrink_to_fit(
  ffi.Pointer<VecVecPoint> self,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CvStatus>)>>
      get CvStatus_close => ffi.Native.addressOf(self.CvStatus_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.MatPtr)>>
      get cv_Mat_close => ffi.Native.addressOf(self.cv_Mat_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get cv_Mat_closeVoid => ffi.Native.addressOf(self.cv_Mat_closeVoid);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.RNGPtr)>>
      get cv_RNG_close => ffi.Native.addressOf(self.cv_RNG_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecCharPtr)>>
      get std_VecChar_free => ffi.Native.addressOf(self.std_VecChar_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecDMatchPtr)>>
      get std_VecDMatch_free => ffi.Native.addressOf(self.std_VecDMatch_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecF16Ptr)>>
      get std_VecF16_free => ffi.Native.addressOf(self.std_VecF16_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecF32Ptr)>>
      get std_VecF32_free => ffi.Native.addressOf(self.std_VecF32_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecF64Ptr)>>
      get std_VecF64_free => ffi.Native.addressOf(self.std_VecF64_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecI16Ptr)>>
      get std_VecI16_free => ffi.Native.addressOf(self.std_VecI16_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecI32Ptr)>>
      get std_VecI32_free => ffi.Native.addressOf(self.std_VecI32_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecI64Ptr)>>
      get std_VecI64_free => ffi.Native.addressOf(self.std_VecI64_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecI8Ptr)>>
      get std_VecI8_free => ffi.Native.addressOf(self.std_VecI8_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecKeyPointPtr)>>
      get std_VecKeyPoint_free =>
          ffi.Native.addressOf(self.std_VecKeyPoint_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecMatPtr)>>
      get std_VecMat_free => ffi.Native.addressOf(self.std_VecMat_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecPoint2fPtr)>>
      get std_VecPoint2f_free => ffi.Native.addressOf(self.std_VecPoint2f_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecPoint3fPtr)>>
      get std_VecPoint3f_free => ffi.Native.addressOf(self.std_VecPoint3f_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecPoint3iPtr)>>
      get std_VecPoint3i_free => ffi.Native.addressOf(self.std_VecPoint3i_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecPointPtr)>>
      get std_VecPoint_free => ffi.Native.addressOf(self.std_VecPoint_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecRect2fPtr)>>
      get std_VecRect2f_free => ffi.Native.addressOf(self.std_VecRect2f_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecRectPtr)>>
      get std_VecRect_free => ffi.Native.addressOf(self.std_VecRect_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecRotatedRectPtr)>>
      get std_VecRotatedRect_free =>
          ffi.Native.addressOf(self.std_VecRotatedRect_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecU16Ptr)>>
      get std_VecU16_free => ffi.Native.addressOf(self.std_VecU16_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecU32Ptr)>>
      get std_VecU32_free => ffi.Native.addressOf(self.std_VecU32_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecU64Ptr)>>
      get std_VecU64_free => ffi.Native.addressOf(self.std_VecU64_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecU8Ptr)>>
      get std_VecU8_free => ffi.Native.addressOf(self.std_VecU8_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecUCharPtr)>>
      get std_VecUChar_free => ffi.Native.addressOf(self.std_VecUChar_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecVec4fPtr)>>
      get std_VecVec4f_free => ffi.Native.addressOf(self.std_VecVec4f_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecVec4iPtr)>>
      get std_VecVec4i_free => ffi.Native.addressOf(self.std_VecVec4i_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecVec6fPtr)>>
      get std_VecVec6f_free => ffi.Native.addressOf(self.std_VecVec6f_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>)>>
      get std_VecVecChar_free => ffi.Native.addressOf(self.std_VecVecChar_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecVecDMatchPtr)>>
      get std_VecVecDMatch_free =>
          ffi.Native.addressOf(self.std_VecVecDMatch_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecVecPoint2fPtr)>>
      get std_VecVecPoint2f_free =>
          ffi.Native.addressOf(self.std_VecVecPoint2f_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecVecPoint3fPtr)>>
      get std_VecVecPoint3f_free =>
          ffi.Native.addressOf(self.std_VecVecPoint3f_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecVecPoint3iPtr)>>
      get std_VecVecPoint3i_free =>
          ffi.Native.addressOf(self.std_VecVecPoint3i_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp$1.VecVecPointPtr)>>
      get std_VecVecPoint_free =>
          ffi.Native.addressOf(self.std_VecVecPoint_free);
}

typedef CvPoint = imp$1.CvPoint;
typedef CvPoint2f = imp$1.CvPoint2f;
typedef CvPoint3f = imp$1.CvPoint3f;
typedef CvPoint3i = imp$1.CvPoint3i;
typedef CvRect = imp$1.CvRect;
typedef CvRect2f = imp$1.CvRect2f;
typedef CvSize = imp$1.CvSize;
typedef CvStatus = imp$1.CvStatus;
typedef DMatch = imp$1.DMatch;
typedef ErrorCallback = ffi.Pointer<ffi.NativeFunction<ErrorCallbackFunction>>;
typedef ErrorCallbackFunction = ffi.Void Function(
    ffi.Int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    ffi.Int line,
    ffi.Pointer<ffi.Void> userdata);
typedef DartErrorCallbackFunction = void Function(
    int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    int line,
    ffi.Pointer<ffi.Void> userdata);
typedef KeyPoint = imp$1.KeyPoint;
typedef LogCallback = ffi.Pointer<ffi.NativeFunction<LogCallbackFunction>>;
typedef LogCallbackFunction = ffi.Void Function(
    ffi.Int logLevel,
    ffi.Pointer<ffi.Char> tag,
    ffi.Size tagLen,
    ffi.Pointer<ffi.Char> file,
    ffi.Size fileLen,
    ffi.Int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Size funcLen,
    ffi.Pointer<ffi.Char> message,
    ffi.Size msgLen);
typedef DartLogCallbackFunction = void Function(
    int logLevel,
    ffi.Pointer<ffi.Char> tag,
    int tagLen,
    ffi.Pointer<ffi.Char> file,
    int fileLen,
    int line,
    ffi.Pointer<ffi.Char> func,
    int funcLen,
    ffi.Pointer<ffi.Char> message,
    int msgLen);
typedef Mat = imp$1.Mat;
typedef MatStep = imp$1.MatStep;
typedef RNG = imp$1.RNG;
typedef RotatedRect = imp$1.RotatedRect;
typedef Scalar = imp$1.Scalar;
typedef TermCriteria = imp$1.TermCriteria;
typedef Vec2b = imp$1.Vec2b;
typedef Vec2d = imp$1.Vec2d;
typedef Vec2f = imp$1.Vec2f;
typedef Vec2i = imp$1.Vec2i;
typedef Vec2s = imp$1.Vec2s;
typedef Vec2w = imp$1.Vec2w;
typedef Vec3b = imp$1.Vec3b;
typedef Vec3d = imp$1.Vec3d;
typedef Vec3f = imp$1.Vec3f;
typedef Vec3i = imp$1.Vec3i;
typedef Vec3s = imp$1.Vec3s;
typedef Vec3w = imp$1.Vec3w;
typedef Vec4b = imp$1.Vec4b;
typedef Vec4d = imp$1.Vec4d;
typedef Vec4f = imp$1.Vec4f;
typedef Vec4i = imp$1.Vec4i;
typedef Vec4s = imp$1.Vec4s;
typedef Vec4w = imp$1.Vec4w;
typedef Vec6d = imp$1.Vec6d;
typedef Vec6f = imp$1.Vec6f;
typedef Vec6i = imp$1.Vec6i;
typedef Vec8i = imp$1.Vec8i;
typedef VecChar = imp$1.VecChar;
typedef VecDMatch = imp$1.VecDMatch;
typedef VecF16 = imp$1.VecF16;
typedef VecF32 = imp$1.VecF32;
typedef VecF64 = imp$1.VecF64;
typedef VecI16 = imp$1.VecI16;
typedef VecI32 = imp$1.VecI32;
typedef VecI64 = imp$1.VecI64;
typedef VecI8 = imp$1.VecI8;
typedef VecKeyPoint = imp$1.VecKeyPoint;
typedef VecMat = imp$1.VecMat;
typedef VecPoint = imp$1.VecPoint;
typedef VecPoint2f = imp$1.VecPoint2f;
typedef VecPoint3f = imp$1.VecPoint3f;
typedef VecPoint3i = imp$1.VecPoint3i;
typedef VecRect = imp$1.VecRect;
typedef VecRect2f = imp$1.VecRect2f;
typedef VecRotatedRect = imp$1.VecRotatedRect;
typedef VecU16 = imp$1.VecU16;
typedef VecU32 = imp$1.VecU32;
typedef VecU64 = imp$1.VecU64;
typedef VecU8 = imp$1.VecU8;
typedef VecUChar = imp$1.VecUChar;
typedef VecVec4f = imp$1.VecVec4f;
typedef VecVec4i = imp$1.VecVec4i;
typedef VecVec6f = imp$1.VecVec6f;
typedef VecVecChar = imp$1.VecVecChar;
typedef VecVecDMatch = imp$1.VecVecDMatch;
typedef VecVecPoint = imp$1.VecVecPoint;
typedef VecVecPoint2f = imp$1.VecVecPoint2f;
typedef VecVecPoint3f = imp$1.VecVecPoint3f;
typedef VecVecPoint3i = imp$1.VecVecPoint3i;
typedef double_t = ffi.Double;
typedef Dartdouble_t = double;
typedef float_t = ffi.Float;
typedef Dartfloat_t = double;
typedef uchar = ffi.UnsignedChar;
typedef Dartuchar = int;
