// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<ffi.Void Function(VideoCapturePtr)>()
external void cv_VideoCapture_close(
  VideoCapturePtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VideoCapture>)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_create(
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int,
        ffi.Pointer<VideoCapture>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_create_1(
  ffi.Pointer<ffi.Char> filename,
  int apiPreference,
  ffi.Pointer<VideoCapture> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Pointer<VideoCapture>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_create_2(
  int index,
  int apiPreference,
  ffi.Pointer<VideoCapture> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Double Function(VideoCapture, ffi.Int)>()
external double cv_VideoCapture_get(
  VideoCapture self,
  int prop,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(VideoCapture)>()
external ffi.Pointer<ffi.Char> cv_VideoCapture_getBackendName(
  VideoCapture self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_grab(
  VideoCapture self,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Bool Function(VideoCapture)>()
external bool cv_VideoCapture_isOpened(
  VideoCapture self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_open(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Char>, ffi.Int,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_open_1(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  int apiPreference,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_open_2(
  VideoCapture self,
  int device,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_open_3(
  VideoCapture self,
  int device,
  int apiPreference,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, Mat, ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_read(
  VideoCapture self,
  Mat buf,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_release(
  VideoCapture self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, Mat, ffi.Int,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoCapture_retrieve(
  VideoCapture self,
  Mat image,
  int flag,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(VideoCapture, ffi.Int, ffi.Double)>()
external void cv_VideoCapture_set(
  VideoCapture self,
  int prop,
  double val,
);

@ffi.Native<ffi.Void Function(VideoWriterPtr)>()
external void cv_VideoWriter_close(
  VideoWriterPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VideoWriter>)>()
external ffi.Pointer<CvStatus> cv_VideoWriter_create(
  ffi.Pointer<VideoWriter> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        ffi.Bool,
        ffi.Pointer<VideoWriter>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoWriter_create_1(
  ffi.Pointer<ffi.Char> name,
  int fourcc,
  double fps,
  int width,
  int height,
  bool isColor,
  ffi.Pointer<VideoWriter> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Int,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        ffi.Bool,
        ffi.Pointer<VideoWriter>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoWriter_create_2(
  ffi.Pointer<ffi.Char> name,
  int apiPreference,
  int fourcc,
  double fps,
  int width,
  int height,
  bool isColor,
  ffi.Pointer<VideoWriter> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Int Function(ffi.Char, ffi.Char, ffi.Char, ffi.Char)>()
external int cv_VideoWriter_fourcc(
  int c1,
  int c2,
  int c3,
  int c4,
);

@ffi.Native<ffi.Double Function(VideoWriter, ffi.Int)>()
external double cv_VideoWriter_get(
  VideoWriter self,
  int propId,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(VideoWriter)>()
external ffi.Pointer<ffi.Char> cv_VideoWriter_getBackendName(
  VideoWriter self,
);

@ffi.Native<ffi.Bool Function(VideoWriter)>()
external bool cv_VideoWriter_isOpened(
  VideoWriter self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoWriter,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        ffi.Bool,
        ffi.Pointer<ffi.Bool>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoWriter_open(
  VideoWriter self,
  ffi.Pointer<ffi.Char> name,
  int fourcc,
  double fps,
  int width,
  int height,
  bool isColor,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoWriter,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Int,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        ffi.Bool,
        ffi.Pointer<ffi.Bool>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoWriter_open_1(
  VideoWriter self,
  ffi.Pointer<ffi.Char> name,
  int apiPreference,
  int fourcc,
  double fps,
  int width,
  int height,
  bool isColor,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter)>()
external ffi.Pointer<CvStatus> cv_VideoWriter_release(
  VideoWriter self,
);

@ffi.Native<ffi.Void Function(VideoWriter, ffi.Int, ffi.Double)>()
external void cv_VideoWriter_set(
  VideoWriter self,
  int propId,
  double val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoWriter, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_VideoWriter_write(
  VideoWriter self,
  Mat img,
  imp$1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoCapturePtr)>>
      get cv_VideoCapture_close =>
          ffi.Native.addressOf(self.cv_VideoCapture_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoWriterPtr)>>
      get cv_VideoWriter_close =>
          ffi.Native.addressOf(self.cv_VideoWriter_close);
}

typedef CvStatus = imp$1.CvStatus;
typedef Mat = imp$1.Mat;

final class VideoCapture extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoCapturePtr = ffi.Pointer<VideoCapture>;

final class VideoWriter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoWriterPtr = ffi.Pointer<VideoWriter>;
