// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<ffi.Void Function(ArucoDictionaryPtr)>()
external void cv_aruco_Dictionary_close(
  ArucoDictionaryPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDictionary>)>()
external ffi.Pointer<CvStatus> cv_aruco_Dictionary_create(
  ffi.Pointer<ArucoDictionary> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ArucoDictionary>)>()
external ffi.Pointer<CvStatus> cv_aruco_Dictionary_create_1(
  Mat bytesList,
  int markerSize,
  int maxCorr,
  ffi.Pointer<ArucoDictionary> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDictionary, ffi.Int, ffi.Int, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> cv_aruco_Dictionary_generateImageMarker(
  ArucoDictionary self,
  int id,
  int sidePixels,
  Mat _img,
  int borderBits,
);

@ffi.Native<ffi.Int Function(ArucoDictionary, Mat, ffi.Int, ffi.Bool)>()
external int cv_aruco_Dictionary_getDistanceToId(
  ArucoDictionary self,
  Mat bits,
  int id,
  bool allRotations,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDictionary, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> cv_aruco_Dictionary_get_bytesList(
  ArucoDictionary self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Int Function(ArucoDictionary)>()
external int cv_aruco_Dictionary_get_markerSize(
  ArucoDictionary self,
);

@ffi.Native<ffi.Int Function(ArucoDictionary)>()
external int cv_aruco_Dictionary_get_maxCorrectionBits(
  ArucoDictionary self,
);

@ffi.Native<
    ffi.Bool Function(ArucoDictionary, Mat, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Double)>()
external bool cv_aruco_Dictionary_identify(
  ArucoDictionary self,
  Mat onlyBits,
  ffi.Pointer<ffi.Int> idx,
  ffi.Pointer<ffi.Int> rotation,
  double maxCorrectionRate,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDictionary, Mat)>()
external ffi.Pointer<CvStatus> cv_aruco_Dictionary_set_bytesList(
  ArucoDictionary self,
  Mat value,
);

@ffi.Native<ffi.Void Function(ArucoDictionary, ffi.Int)>()
external void cv_aruco_Dictionary_set_markerSize(
  ArucoDictionary self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDictionary, ffi.Int)>()
external void cv_aruco_Dictionary_set_maxCorrectionBits(
  ArucoDictionary self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorPtr)>()
external void cv_aruco_arucoDetector_close(
  ArucoDetectorPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetector>)>()
external ffi.Pointer<CvStatus> cv_aruco_arucoDetector_create(
  ffi.Pointer<ArucoDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDictionary, ArucoDetectorParams, ffi.Pointer<ArucoDetector>)>()
external ffi.Pointer<CvStatus> cv_aruco_arucoDetector_create_1(
  ArucoDictionary dictionary,
  ArucoDetectorParams params,
  ffi.Pointer<ArucoDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetector,
        Mat,
        ffi.Pointer<VecVecPoint2f>,
        ffi.Pointer<VecI32>,
        ffi.Pointer<VecVecPoint2f>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_aruco_arucoDetector_detectMarkers(
  ArucoDetector self,
  Mat inputArr,
  ffi.Pointer<VecVecPoint2f> out_markerCorners,
  ffi.Pointer<VecI32> out_markerIds,
  ffi.Pointer<VecVecPoint2f> out_rejectedCandidates,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParamsPtr)>()
external void cv_aruco_detectorParameters_close(
  ArucoDetectorParamsPtr ap,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetectorParams>)>()
external ffi.Pointer<CvStatus> cv_aruco_detectorParameters_create(
  ffi.Pointer<ArucoDetectorParams> rval,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_adaptiveThreshConstant(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMax(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMin(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_adaptiveThreshWinSizeStep(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Float Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_aprilTagCriticalRad(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_aprilTagDeglitch(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Float Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_aprilTagMaxLineFitMse(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_aprilTagMaxNmaxima(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_aprilTagMinClusterPixels(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_aprilTagMinWhiteBlackDiff(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Float Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_aprilTagQuadDecimate(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Float Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_aprilTagQuadSigma(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_cornerRefinementMaxIterations(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_cornerRefinementMethod(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_cornerRefinementMinAccuracy(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_cornerRefinementWinSize(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Bool Function(ArucoDetectorParams)>()
external bool cv_aruco_detectorParameters_get_detectInvertedMarker(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_errorCorrectionRate(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_markerBorderBits(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_maxErroneousBitsInBorderRate(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_maxMarkerPerimeterRate(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_minCornerDistanceRate(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_minDistanceToBorder(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_minMarkerDistanceRate(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_minMarkerPerimeterRate(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_minOtsuStdDev(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double
    cv_aruco_detectorParameters_get_perspectiveRemoveIgnoredMarginPerCell(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Int Function(ArucoDetectorParams)>()
external int cv_aruco_detectorParameters_get_perspectiveRemovePixelPerCell(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Double Function(ArucoDetectorParams)>()
external double cv_aruco_detectorParameters_get_polygonalApproxAccuracyRate(
  ArucoDetectorParams self,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_adaptiveThreshConstant(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMax(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMin(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_adaptiveThreshWinSizeStep(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Float)>()
external void cv_aruco_detectorParameters_set_aprilTagCriticalRad(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_aprilTagDeglitch(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Float)>()
external void cv_aruco_detectorParameters_set_aprilTagMaxLineFitMse(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_aprilTagMaxNmaxima(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_aprilTagMinClusterPixels(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_aprilTagMinWhiteBlackDiff(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Float)>()
external void cv_aruco_detectorParameters_set_aprilTagQuadDecimate(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Float)>()
external void cv_aruco_detectorParameters_set_aprilTagQuadSigma(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_cornerRefinementMaxIterations(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_cornerRefinementMethod(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_cornerRefinementMinAccuracy(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_cornerRefinementWinSize(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Bool)>()
external void cv_aruco_detectorParameters_set_detectInvertedMarker(
  ArucoDetectorParams self,
  bool value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_errorCorrectionRate(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_markerBorderBits(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_maxErroneousBitsInBorderRate(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_maxMarkerPerimeterRate(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_minCornerDistanceRate(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_minDistanceToBorder(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_minMarkerDistanceRate(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_minMarkerPerimeterRate(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_minOtsuStdDev(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void
    cv_aruco_detectorParameters_set_perspectiveRemoveIgnoredMarginPerCell(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Int)>()
external void cv_aruco_detectorParameters_set_perspectiveRemovePixelPerCell(
  ArucoDetectorParams self,
  int value,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParams, ffi.Double)>()
external void cv_aruco_detectorParameters_set_polygonalApproxAccuracyRate(
  ArucoDetectorParams self,
  double value,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint2f, VecI32, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_aruco_drawDetectedMarkers(
  Mat image,
  VecVecPoint2f markerCorners,
  VecI32 markerIds,
  Scalar borderColor,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_aruco_generateImageMarker(
  int dictionaryId,
  int id,
  int sidePixels,
  int borderBits,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ArucoDictionary>)>()
external ffi.Pointer<CvStatus> cv_aruco_getPredefinedDictionary(
  int dictionaryId,
  ffi.Pointer<ArucoDictionary> rval,
);

@ffi.Native<ffi.Void Function(BlockMeanHashPtr)>()
external void cv_img_hash_BlockMeanHash_close(
  BlockMeanHashPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BlockMeanHash, Mat, Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_compare(
  BlockMeanHash self,
  Mat hashOne,
  Mat hashTwo,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BlockMeanHash, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_compute(
  BlockMeanHash self,
  Mat inputArr,
  Mat outputArr,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Pointer<BlockMeanHash>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_create(
  int mode,
  ffi.Pointer<BlockMeanHash> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BlockMeanHash, ffi.Pointer<VecF64>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_getMean(
  BlockMeanHash self,
  ffi.Pointer<VecF64> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BlockMeanHash, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_setMode(
  BlockMeanHash self,
  int mode,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_averageHash_compare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_averageHash_compute(
  Mat inputArr,
  Mat outputArr,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_colorMomentHash_compare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_colorMomentHash_compute(
  Mat inputArr,
  Mat outputArr,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float,
        ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_marrHildrethHash_compare(
  Mat a,
  Mat b,
  double alpha,
  double scale,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_marrHildrethHash_compute(
  Mat inputArr,
  Mat outputArr,
  double alpha,
  double scale,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_pHash_compare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_pHash_compute(
  Mat inputArr,
  Mat outputArr,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int,
        ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_radialVarianceHash_compare(
  Mat a,
  Mat b,
  double sigma,
  int numOfAngleLine,
  ffi.Pointer<ffi.Double> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_img_hash_radialVarianceHash_compute(
  Mat inputArr,
  Mat outputArr,
  double sigma,
  int numOfAngleLine,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(QualityBRISQUEPtr)>()
external void cv_quality_QualityBRISQUE_close(
  QualityBRISQUEPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QualityBRISQUE, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityBRISQUE_compute(
  QualityBRISQUE self,
  Mat img,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityBRISQUE_computeFeatures_static(
  Mat img,
  Mat features,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityBRISQUE_compute_static(
  Mat img,
  ffi.Pointer<ffi.Char> model_file,
  ffi.Pointer<ffi.Char> range_file,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<QualityBRISQUE>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityBRISQUE_create(
  ffi.Pointer<ffi.Char> model_file,
  ffi.Pointer<ffi.Char> range_file,
  ffi.Pointer<QualityBRISQUE> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(QualityGMSDPtr)>()
external void cv_quality_QualityGMSD_close(
  QualityGMSDPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QualityGMSD, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityGMSD_compute(
  QualityGMSD self,
  Mat cmp,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityGMSD_compute_static(
  Mat ref,
  Mat cmp,
  Mat qualityMap,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualityGMSD>)>()
external ffi.Pointer<CvStatus> cv_quality_QualityGMSD_create(
  Mat ref,
  ffi.Pointer<QualityGMSD> rval,
);

@ffi.Native<ffi.Void Function(QualityMSEPtr)>()
external void cv_quality_QualityMSE_close(
  QualityMSEPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QualityMSE, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityMSE_compute(
  QualityMSE self,
  Mat cmpImgs,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityMSE_compute_static(
  Mat ref,
  Mat cmp,
  Mat qualityMap,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<QualityMSE>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityMSE_create(
  Mat ref,
  ffi.Pointer<QualityMSE> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(QualityPSNRPtr)>()
external void cv_quality_QualityPSNR_close(
  QualityPSNRPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QualityPSNR, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityPSNR_compute(
  QualityPSNR self,
  Mat cmp,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityPSNR_compute_static(
  Mat ref,
  Mat cmp,
  double maxPixelValue,
  Mat qualityMap,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Double, ffi.Pointer<QualityPSNR>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualityPSNR_create(
  Mat ref,
  double maxPixelValue,
  ffi.Pointer<QualityPSNR> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Double Function(QualityPSNR)>()
external double cv_quality_QualityPSNR_getMaxPixelValue(
  QualityPSNR self,
);

@ffi.Native<ffi.Void Function(QualityPSNR, ffi.Double)>()
external void cv_quality_QualityPSNR_setMaxPixelValue(
  QualityPSNR self,
  double maxPixelValue,
);

@ffi.Native<ffi.Void Function(QualitySSIMPtr)>()
external void cv_quality_QualitySSIM_close(
  QualitySSIMPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QualitySSIM, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualitySSIM_compute(
  QualitySSIM self,
  Mat cmp,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Pointer<Scalar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualitySSIM_compute_static(
  Mat ref,
  Mat cmp,
  Mat qualityMap,
  ffi.Pointer<Scalar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<QualitySSIM>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_quality_QualitySSIM_create(
  Mat ref,
  ffi.Pointer<QualitySSIM> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(WeChatQRCodePtr)>()
external void cv_wechat_qrcode_WeChatQRCode_close(
  WeChatQRCodePtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>)>()
external ffi.Pointer<CvStatus> cv_wechat_qrcode_WeChatQRCode_create(
  ffi.Pointer<WeChatQRCode> qrcode,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<WeChatQRCode>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_wechat_qrcode_WeChatQRCode_create_1(
  ffi.Pointer<ffi.Char> detector_prototxt_path,
  ffi.Pointer<ffi.Char> detector_caffe_model_path,
  ffi.Pointer<ffi.Char> super_resolution_prototxt_path,
  ffi.Pointer<ffi.Char> super_resolution_caffe_model_path,
  ffi.Pointer<WeChatQRCode> qrcode,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(WeChatQRCode, Mat, ffi.Pointer<VecMat>,
        ffi.Pointer<VecVecChar>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_wechat_qrcode_WeChatQRCode_detectAndDecode(
  WeChatQRCode self,
  Mat img,
  ffi.Pointer<VecMat> out_points,
  ffi.Pointer<VecVecChar> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Float Function(WeChatQRCode)>()
external double cv_wechat_qrcode_WeChatQRCode_getScaleFactor(
  WeChatQRCode self,
);

@ffi.Native<ffi.Void Function(WeChatQRCode, ffi.Float)>()
external void cv_wechat_qrcode_WeChatQRCode_setScaleFactor(
  WeChatQRCode self,
  double scale_factor,
);

@ffi.Native<ffi.Void Function(EdgeBoxesPtr)>()
external void cv_ximgproc_EdgeBoxes_close(
  EdgeBoxesPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Pointer<EdgeBoxes>)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeBoxes_create(
  double alpha,
  double beta,
  double eta,
  double minScore,
  int maxBoxes,
  double edgeMinMag,
  double edgeMergeThr,
  double clusterMinMag,
  double maxAspectRatio,
  double minBoxArea,
  double gamma,
  double kappa,
  ffi.Pointer<EdgeBoxes> rval,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getAlpha(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getBeta(
  EdgeBoxes self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(EdgeBoxes, Mat, Mat, ffi.Pointer<VecRect>,
        ffi.Pointer<VecF32>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeBoxes_getBoundingBoxes(
  EdgeBoxes self,
  Mat edge_map,
  Mat orientation_map,
  ffi.Pointer<VecRect> out_boxes,
  ffi.Pointer<VecF32> scores,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getClusterMinMag(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getEdgeMergeThr(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getEdgeMinMag(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getEta(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getGamma(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getKappa(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getMaxAspectRatio(
  EdgeBoxes self,
);

@ffi.Native<ffi.Int Function(EdgeBoxes)>()
external int cv_ximgproc_EdgeBoxes_getMaxBoxes(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getMinBoxArea(
  EdgeBoxes self,
);

@ffi.Native<ffi.Float Function(EdgeBoxes)>()
external double cv_ximgproc_EdgeBoxes_getMinScore(
  EdgeBoxes self,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setAlpha(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setBeta(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setClusterMinMag(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setEdgeMergeThr(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setEdgeMinMag(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setEta(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setGamma(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setKappa(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setMaxAspectRatio(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Int)>()
external void cv_ximgproc_EdgeBoxes_setMaxBoxes(
  EdgeBoxes self,
  int value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setMinBoxArea(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeBoxes, ffi.Float)>()
external void cv_ximgproc_EdgeBoxes_setMinScore(
  EdgeBoxes self,
  double value,
);

@ffi.Native<ffi.Void Function(EdgeDrawingPtr)>()
external void cv_ximgproc_EdgeDrawing_close(
  EdgeDrawingPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<EdgeDrawing>)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_create(
  ffi.Pointer<EdgeDrawing> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_detectEdges(
  EdgeDrawing self,
  Mat src,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_detectEllipses(
  EdgeDrawing self,
  Mat ellipses,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_detectLines(
  EdgeDrawing self,
  Mat lines,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getEdgeImage(
  EdgeDrawing self,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getGradientImage(
  EdgeDrawing self,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        EdgeDrawing, ffi.Pointer<EdgeDrawingParams>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getParams(
  EdgeDrawing self,
  ffi.Pointer<EdgeDrawingParams> params,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        EdgeDrawing, ffi.Pointer<VecI32>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getSegmentIndicesOfLines(
  EdgeDrawing self,
  ffi.Pointer<VecI32> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        EdgeDrawing, ffi.Pointer<VecVecPoint>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getSegments(
  EdgeDrawing self,
  ffi.Pointer<VecVecPoint> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        EdgeDrawing, EdgeDrawingParams, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_setParams(
  EdgeDrawing self,
  EdgeDrawingParams params,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(GraphSegmentationPtr)>()
external void cv_ximgproc_GraphSegmentation_close(
  GraphSegmentationPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Float, ffi.Float, ffi.Int, ffi.Pointer<GraphSegmentation>)>()
external ffi.Pointer<CvStatus> cv_ximgproc_GraphSegmentation_create(
  double sigma,
  double k,
  int min_size,
  ffi.Pointer<GraphSegmentation> rval,
);

@ffi.Native<ffi.Float Function(GraphSegmentation)>()
external double cv_ximgproc_GraphSegmentation_getK(
  GraphSegmentation self,
);

@ffi.Native<ffi.Int Function(GraphSegmentation)>()
external int cv_ximgproc_GraphSegmentation_getMinSize(
  GraphSegmentation self,
);

@ffi.Native<ffi.Double Function(GraphSegmentation)>()
external double cv_ximgproc_GraphSegmentation_getSigma(
  GraphSegmentation self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        GraphSegmentation, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_GraphSegmentation_processImage(
  GraphSegmentation self,
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(GraphSegmentation, ffi.Float)>()
external void cv_ximgproc_GraphSegmentation_setK(
  GraphSegmentation self,
  double val,
);

@ffi.Native<ffi.Void Function(GraphSegmentation, ffi.Int)>()
external void cv_ximgproc_GraphSegmentation_setMinSize(
  GraphSegmentation self,
  int val,
);

@ffi.Native<ffi.Void Function(GraphSegmentation, ffi.Double)>()
external void cv_ximgproc_GraphSegmentation_setSigma(
  GraphSegmentation self,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_PeiLinNormalization(
  Mat I,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RFFeatureGetter)>()
external ffi.Pointer<CvStatus> cv_ximgproc_RFFeatureGetter_clear(
  RFFeatureGetter self,
);

@ffi.Native<ffi.Void Function(RFFeatureGetterPtr)>()
external void cv_ximgproc_RFFeatureGetter_close(
  RFFeatureGetterPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<RFFeatureGetter>)>()
external ffi.Pointer<CvStatus> cv_ximgproc_RFFeatureGetter_create(
  ffi.Pointer<RFFeatureGetter> rval,
);

@ffi.Native<ffi.Bool Function(RFFeatureGetter)>()
external bool cv_ximgproc_RFFeatureGetter_empty(
  RFFeatureGetter self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RFFeatureGetter, Mat, Mat, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_RFFeatureGetter_getFeatures(
  RFFeatureGetter self,
  Mat src,
  Mat features,
  int gnrmRad,
  int gsmthRad,
  int shrink,
  int outNum,
  int gradNum,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(StructuredEdgeDetectionPtr)>()
external void cv_ximgproc_StructuredEdgeDetection_close(
  StructuredEdgeDetectionPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        StructuredEdgeDetection, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus>
    cv_ximgproc_StructuredEdgeDetection_computeOrientation(
  StructuredEdgeDetection self,
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<StructuredEdgeDetection>)>()
external ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_create(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<StructuredEdgeDetection> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<RFFeatureGetter>, ffi.Pointer<StructuredEdgeDetection>)>()
external ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_create_1(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<RFFeatureGetter> howToGetFeatures,
  ffi.Pointer<StructuredEdgeDetection> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        StructuredEdgeDetection, Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_detectEdges(
  StructuredEdgeDetection self,
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat, Mat,
        ffi.Int, ffi.Int, ffi.Float, ffi.Bool, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_edgesNms(
  StructuredEdgeDetection self,
  Mat edge_image,
  Mat orientation_image,
  Mat dst,
  int r,
  int s_,
  double m,
  bool isParallel,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_anisotropicDiffusion(
  Mat src,
  Mat dst,
  double alpha,
  double K,
  int niters,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_edgePreservingFilter(
  Mat src,
  Mat dst,
  int d,
  double threshold,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_findEllipses(
  Mat image,
  Mat ellipses,
  double scoreThreshold,
  double reliabilityThreshold,
  double centerDistanceThreshold,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int, ffi.Int,
        ffi.Double, ffi.Int, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_niBlackThreshold(
  Mat src,
  Mat dst,
  double maxValue,
  int type,
  int blockSize,
  double k,
  int binarizationMethod,
  double r,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint3i, Mat, CvSize, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_rl_createRLEImage(
  VecPoint3i runs,
  Mat res,
  CvSize size,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, CvPoint, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_rl_dilate(
  Mat rlSrc,
  Mat rlDest,
  Mat rlKernel,
  CvPoint anchor,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Bool, CvPoint, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_rl_erode(
  Mat rlSrc,
  Mat rlDest,
  Mat rlKernel,
  bool bBoundaryOn,
  CvPoint anchor,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, CvSize, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_rl_getStructuringElement(
  int shape,
  CvSize ksize,
  ffi.Pointer<Mat> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Bool Function(Mat)>()
external bool cv_ximgproc_rl_isRLMorphologyPossible(
  Mat rlStructuringElement,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, ffi.Bool, CvPoint, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_rl_morphologyEx(
  Mat rlSrc,
  Mat rlDest,
  int op,
  Mat rlKernel,
  bool bBoundaryOnForErosion,
  CvPoint anchor,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Scalar, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_rl_paint(
  Mat image,
  Mat rlSrc,
  Scalar value,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_rl_threshold(
  Mat src,
  Mat rlDest,
  double thresh,
  int type,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ximgproc_thinning(
  Mat src,
  Mat dst,
  int thinningType,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(PtrWBDetectorPtr)>()
external void cv_xobjdetect_WBDetector_close(
  PtrWBDetectorPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>)>()
external ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_create(
  ffi.Pointer<PtrWBDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        PtrWBDetector, Mat, ffi.Pointer<VecRect>, ffi.Pointer<VecF64>)>()
external ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_detect(
  PtrWBDetector self,
  Mat img,
  ffi.Pointer<VecRect> out_bbox,
  ffi.Pointer<VecF64> confidences,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(PtrWBDetector, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_read(
  PtrWBDetector self,
  ffi.Pointer<ffi.Char> filename,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        PtrWBDetector, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_train(
  PtrWBDetector self,
  ffi.Pointer<ffi.Char> pos_samples,
  ffi.Pointer<ffi.Char> neg_imgs,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(PtrWBDetector, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_write(
  PtrWBDetector self,
  ffi.Pointer<ffi.Char> filename,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDictionaryPtr)>>
      get cv_aruco_Dictionary_close =>
          ffi.Native.addressOf(self.cv_aruco_Dictionary_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDetectorPtr)>>
      get cv_aruco_arucoDetector_close =>
          ffi.Native.addressOf(self.cv_aruco_arucoDetector_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParamsPtr)>>
      get cv_aruco_detectorParameters_close =>
          ffi.Native.addressOf(self.cv_aruco_detectorParameters_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BlockMeanHashPtr)>>
      get cv_img_hash_BlockMeanHash_close =>
          ffi.Native.addressOf(self.cv_img_hash_BlockMeanHash_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityBRISQUEPtr)>>
      get cv_quality_QualityBRISQUE_close =>
          ffi.Native.addressOf(self.cv_quality_QualityBRISQUE_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityGMSDPtr)>>
      get cv_quality_QualityGMSD_close =>
          ffi.Native.addressOf(self.cv_quality_QualityGMSD_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityMSEPtr)>>
      get cv_quality_QualityMSE_close =>
          ffi.Native.addressOf(self.cv_quality_QualityMSE_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityPSNRPtr)>>
      get cv_quality_QualityPSNR_close =>
          ffi.Native.addressOf(self.cv_quality_QualityPSNR_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualitySSIMPtr)>>
      get cv_quality_QualitySSIM_close =>
          ffi.Native.addressOf(self.cv_quality_QualitySSIM_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(WeChatQRCodePtr)>>
      get cv_wechat_qrcode_WeChatQRCode_close =>
          ffi.Native.addressOf(self.cv_wechat_qrcode_WeChatQRCode_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EdgeBoxesPtr)>>
      get cv_ximgproc_EdgeBoxes_close =>
          ffi.Native.addressOf(self.cv_ximgproc_EdgeBoxes_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EdgeDrawingPtr)>>
      get cv_ximgproc_EdgeDrawing_close =>
          ffi.Native.addressOf(self.cv_ximgproc_EdgeDrawing_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GraphSegmentationPtr)>>
      get cv_ximgproc_GraphSegmentation_close =>
          ffi.Native.addressOf(self.cv_ximgproc_GraphSegmentation_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(RFFeatureGetterPtr)>>
      get cv_ximgproc_RFFeatureGetter_close =>
          ffi.Native.addressOf(self.cv_ximgproc_RFFeatureGetter_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(StructuredEdgeDetectionPtr)>>
      get cv_ximgproc_StructuredEdgeDetection_close =>
          ffi.Native.addressOf(self.cv_ximgproc_StructuredEdgeDetection_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PtrWBDetectorPtr)>>
      get cv_xobjdetect_WBDetector_close =>
          ffi.Native.addressOf(self.cv_xobjdetect_WBDetector_close);
}

final class ArucoDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class ArucoDetectorParams extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDetectorParamsPtr = ffi.Pointer<ArucoDetectorParams>;
typedef ArucoDetectorPtr = ffi.Pointer<ArucoDetector>;

final class ArucoDictionary extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDictionaryPtr = ffi.Pointer<ArucoDictionary>;

const int BLOCK_MEAN_HASH_MODE_0 = 0;

const int BLOCK_MEAN_HASH_MODE_1 = 1;

final class BlockMeanHash extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BlockMeanHashPtr = ffi.Pointer<BlockMeanHash>;

final class Box extends ffi.Struct {
  @ffi.Int()
  external int h;

  @ffi.Float()
  external double score;

  @ffi.Int()
  external int w;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

typedef CvPoint = imp$1.CvPoint;
typedef CvSize = imp$1.CvSize;
typedef CvStatus = imp$1.CvStatus;

final class EdgeBoxes extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef EdgeBoxesPtr = ffi.Pointer<EdgeBoxes>;

final class EdgeDrawing extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

final class EdgeDrawingParams extends ffi.Struct {
  @ffi.Int()
  external int AnchorThresholdValue;

  @ffi.Int()
  external int EdgeDetectionOperator;

  @ffi.Int()
  external int GradientThresholdValue;

  @ffi.Double()
  external double LineFitErrorThreshold;

  @ffi.Double()
  external double MaxDistanceBetweenTwoLines;

  @ffi.Double()
  external double MaxErrorThreshold;

  @ffi.Int()
  external int MinLineLength;

  @ffi.Int()
  external int MinPathLength;

  @ffi.Bool()
  external bool NFAValidation;

  @ffi.Bool()
  external bool PFmode;

  @ffi.Int()
  external int ScanInterval;

  @ffi.Float()
  external double Sigma;

  @ffi.Bool()
  external bool SumFlag;
}

typedef EdgeDrawingPtr = ffi.Pointer<EdgeDrawing>;

final class GraphSegmentation extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef GraphSegmentationPtr = ffi.Pointer<GraphSegmentation>;
typedef Mat = imp$1.Mat;

final class PtrWBDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef PtrWBDetectorPtr = ffi.Pointer<PtrWBDetector>;

final class QualityBRISQUE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityBRISQUEPtr = ffi.Pointer<QualityBRISQUE>;

final class QualityGMSD extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityGMSDPtr = ffi.Pointer<QualityGMSD>;

final class QualityMSE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityMSEPtr = ffi.Pointer<QualityMSE>;

final class QualityPSNR extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityPSNRPtr = ffi.Pointer<QualityPSNR>;

final class QualitySSIM extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualitySSIMPtr = ffi.Pointer<QualitySSIM>;

final class RFFeatureGetter extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef RFFeatureGetterPtr = ffi.Pointer<RFFeatureGetter>;
typedef Scalar = imp$1.Scalar;

final class StructuredEdgeDetection extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef StructuredEdgeDetectionPtr = ffi.Pointer<StructuredEdgeDetection>;
typedef VecF32 = imp$1.VecF32;
typedef VecF64 = imp$1.VecF64;
typedef VecI32 = imp$1.VecI32;
typedef VecMat = imp$1.VecMat;
typedef VecPoint3i = imp$1.VecPoint3i;
typedef VecRect = imp$1.VecRect;
typedef VecVecChar = imp$1.VecVecChar;
typedef VecVecPoint = imp$1.VecVecPoint;
typedef VecVecPoint2f = imp$1.VecVecPoint2f;

final class WeChatQRCode extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef WeChatQRCodePtr = ffi.Pointer<WeChatQRCode>;
