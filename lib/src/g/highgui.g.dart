// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> cv_createTrackbar(
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Char> winname,
  int max,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        cv_TrackbarCallback,
        ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<CvStatus> cv_createTrackbar_1(
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Int> value,
  int max,
  cv_TrackbarCallback onChange,
  ffi.Pointer<ffi.Void> userdata,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function()>()
external ffi.Pointer<ffi.Char> cv_currentUIFramework();

@ffi.Native<ffi.Pointer<CvStatus> Function()>()
external ffi.Pointer<CvStatus> cv_destroyAllWindows();

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> cv_destroyWindow(
  ffi.Pointer<ffi.Char> winname,
);

@ffi.Native<ffi.Int Function(ffi.Int)>()
external int cv_getMouseWheelDelta(
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> cv_getTrackbarPos(
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<CvRect>)>()
external ffi.Pointer<CvStatus> cv_getWindowImageRect(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<CvRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> cv_getWindowProperty(
  ffi.Pointer<ffi.Char> winname,
  int flag,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat)>()
external ffi.Pointer<CvStatus> cv_imshow(
  ffi.Pointer<ffi.Char> winname,
  Mat mat,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> cv_moveWindow(
  ffi.Pointer<ffi.Char> winname,
  int x,
  int y,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> cv_namedWindow(
  ffi.Pointer<ffi.Char> winname,
  int flags,
);

@ffi.Native<ffi.Int Function()>()
external int cv_pollKey();

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> cv_resizeWindow(
  ffi.Pointer<ffi.Char> winname,
  int width,
  int height,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, ffi.Bool,
        ffi.Bool, ffi.Bool, ffi.Pointer<CvRect>)>()
external ffi.Pointer<CvStatus> cv_selectROI(
  ffi.Pointer<ffi.Char> winname,
  Mat img,
  bool showCrosshair,
  bool fromCenter,
  bool printNotice,
  ffi.Pointer<CvRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Bool, ffi.Bool, ffi.Bool, ffi.Pointer<CvRect>)>()
external ffi.Pointer<CvStatus> cv_selectROI_1(
  Mat img,
  bool showCrosshair,
  bool fromCenter,
  bool printNotice,
  ffi.Pointer<CvRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat,
        ffi.Pointer<VecRect>, ffi.Bool, ffi.Bool, ffi.Bool)>()
external ffi.Pointer<CvStatus> cv_selectROIs(
  ffi.Pointer<ffi.Char> winname,
  Mat img,
  ffi.Pointer<VecRect> rval,
  bool showCrosshair,
  bool fromCenter,
  bool printNotice,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, cv_MouseCallback, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<CvStatus> cv_setMouseCallback(
  ffi.Pointer<ffi.Char> winname,
  cv_MouseCallback onMouse,
  ffi.Pointer<ffi.Void> userdata,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> cv_setTrackbarMax(
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Char> winname,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> cv_setTrackbarMin(
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Char> winname,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> cv_setTrackbarPos(
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Char> winname,
  int pos,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> cv_setWindowProperty(
  ffi.Pointer<ffi.Char> winname,
  int flag,
  double value,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> cv_setWindowTitle(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> title,
);

@ffi.Native<ffi.Int Function(ffi.Int)>()
external int cv_waitKey(
  int delay,
);

@ffi.Native<ffi.Int Function(ffi.Int)>()
external int cv_waitKeyEx(
  int delay,
);

typedef CvRect = imp$1.CvRect;
typedef CvStatus = imp$1.CvStatus;
typedef Mat = imp$1.Mat;
typedef VecRect = imp$1.VecRect;
typedef cv_ButtonCallback
    = ffi.Pointer<ffi.NativeFunction<cv_ButtonCallbackFunction>>;
typedef cv_ButtonCallbackFunction = ffi.Void Function(
    ffi.Int state, ffi.Pointer<ffi.Void> userdata);
typedef Dartcv_ButtonCallbackFunction = void Function(
    int state, ffi.Pointer<ffi.Void> userdata);
typedef cv_MouseCallback
    = ffi.Pointer<ffi.NativeFunction<cv_MouseCallbackFunction>>;
typedef cv_MouseCallbackFunction = ffi.Void Function(ffi.Int event, ffi.Int x,
    ffi.Int y, ffi.Int flags, ffi.Pointer<ffi.Void> userdata);
typedef Dartcv_MouseCallbackFunction = void Function(
    int event, int x, int y, int flags, ffi.Pointer<ffi.Void> userdata);
typedef cv_OpenGlDrawCallback
    = ffi.Pointer<ffi.NativeFunction<cv_OpenGlDrawCallbackFunction>>;
typedef cv_OpenGlDrawCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> userdata);
typedef Dartcv_OpenGlDrawCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> userdata);
typedef cv_TrackbarCallback
    = ffi.Pointer<ffi.NativeFunction<cv_TrackbarCallbackFunction>>;
typedef cv_TrackbarCallbackFunction = ffi.Void Function(
    ffi.Int pos, ffi.Pointer<ffi.Void> userdata);
typedef Dartcv_TrackbarCallbackFunction = void Function(
    int pos, ffi.Pointer<ffi.Void> userdata);
