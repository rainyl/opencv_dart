// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<ffi.Void Function(StitcherPtr)>()
external void cv_Stitcher_close(
  StitcherPtr stitcher,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, ffi.Pointer<VecI32>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Stitcher_component(
  Stitcher self,
  ffi.Pointer<VecI32> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, Mat, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Stitcher_composePanorama(
  Stitcher self,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, Mat, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Stitcher_composePanorama_1(
  Stitcher self,
  VecMat mats,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<Stitcher>)>()
external ffi.Pointer<CvStatus> cv_Stitcher_create(
  int mode,
  ffi.Pointer<Stitcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, VecMat, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Stitcher_estimateTransform(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Double Function(Stitcher)>()
external double cv_Stitcher_get_compositingResol(
  Stitcher self,
);

@ffi.Native<ffi.Int Function(Stitcher)>()
external int cv_Stitcher_get_interpolationFlags(
  Stitcher self,
);

@ffi.Native<ffi.Double Function(Stitcher)>()
external double cv_Stitcher_get_panoConfidenceThresh(
  Stitcher self,
);

@ffi.Native<ffi.Double Function(Stitcher)>()
external double cv_Stitcher_get_registrationResol(
  Stitcher self,
);

@ffi.Native<ffi.Double Function(Stitcher)>()
external double cv_Stitcher_get_seamEstimationResol(
  Stitcher self,
);

@ffi.Native<ffi.Int Function(Stitcher)>()
external int cv_Stitcher_get_waveCorrectKind(
  Stitcher self,
);

@ffi.Native<ffi.Bool Function(Stitcher)>()
external bool cv_Stitcher_get_waveCorrection(
  Stitcher self,
);

@ffi.Native<ffi.Void Function(Stitcher, ffi.Double)>()
external void cv_Stitcher_set_compositingResol(
  Stitcher self,
  double val,
);

@ffi.Native<ffi.Void Function(Stitcher, ffi.Int)>()
external void cv_Stitcher_set_interpolationFlags(
  Stitcher self,
  int val,
);

@ffi.Native<ffi.Void Function(Stitcher, ffi.Double)>()
external void cv_Stitcher_set_panoConfidenceThresh(
  Stitcher self,
  double val,
);

@ffi.Native<ffi.Void Function(Stitcher, ffi.Double)>()
external void cv_Stitcher_set_registrationResol(
  Stitcher self,
  double val,
);

@ffi.Native<ffi.Void Function(Stitcher, ffi.Double)>()
external void cv_Stitcher_set_seamEstimationResol(
  Stitcher self,
  double val,
);

@ffi.Native<ffi.Void Function(Stitcher, ffi.Int)>()
external void cv_Stitcher_set_waveCorrectKind(
  Stitcher self,
  int val,
);

@ffi.Native<ffi.Void Function(Stitcher, ffi.Bool)>()
external void cv_Stitcher_set_waveCorrection(
  Stitcher self,
  bool val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, Mat, ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Stitcher_stitch(
  Stitcher self,
  VecMat mats,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, VecMat, VecMat, Mat,
        ffi.Pointer<ffi.Int>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_Stitcher_stitch_1(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
  imp$1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(StitcherPtr)>>
      get cv_Stitcher_close => ffi.Native.addressOf(self.cv_Stitcher_close);
}

typedef CvStatus = imp$1.CvStatus;
typedef Mat = imp$1.Mat;

const int STITCHING_ERR_CAMERA_PARAMS_ADJUST_FAIL = 3;

const int STITCHING_ERR_HOMOGRAPHY_EST_FAIL = 2;

const int STITCHING_ERR_NEED_MORE_IMGS = 1;

const int STITCHING_OK = 0;

const int STITCHING_PANORAMA = 0;

const int STITCHING_SCANS = 1;

final class Stitcher extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef StitcherPtr = ffi.Pointer<Stitcher>;
typedef VecI32 = imp$1.VecI32;
typedef VecMat = imp$1.VecMat;
