// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<ffi.Void Function(CascadeClassifierPtr)>()
external void cv_CascadeClassifier_close(
  CascadeClassifierPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<CascadeClassifier>)>()
external ffi.Pointer<CvStatus> cv_CascadeClassifier_create(
  ffi.Pointer<CascadeClassifier> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<CascadeClassifier>)>()
external ffi.Pointer<CvStatus> cv_CascadeClassifier_create_1(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<CascadeClassifier> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier, Mat, ffi.Pointer<VecRect>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_CascadeClassifier_detectMultiScale(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>,
        ffi.Double, ffi.Int, ffi.Int, CvSize, CvSize, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_CascadeClassifier_detectMultiScale_1(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  double scale,
  int minNeighbors,
  int flags,
  CvSize minSize,
  CvSize maxSize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier,
        Mat,
        ffi.Pointer<VecRect>,
        ffi.Pointer<VecI32>,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        CvSize,
        CvSize,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_CascadeClassifier_detectMultiScale_2(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  ffi.Pointer<VecI32> numDetections,
  double scaleFactor,
  int minNeighbors,
  int flags,
  CvSize minSize,
  CvSize maxSize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier,
        Mat,
        ffi.Pointer<VecRect>,
        ffi.Pointer<VecI32>,
        ffi.Pointer<VecF64>,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        CvSize,
        CvSize,
        ffi.Bool,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_CascadeClassifier_detectMultiScale_3(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  ffi.Pointer<VecI32> rejectLevels,
  ffi.Pointer<VecF64> levelWeights,
  double scaleFactor,
  int minNeighbors,
  int flags,
  CvSize minSize,
  CvSize maxSize,
  bool outputRejectLevels,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Bool Function(CascadeClassifier)>()
external bool cv_CascadeClassifier_empty(
  CascadeClassifier self,
);

@ffi.Native<ffi.Int Function(CascadeClassifier)>()
external int cv_CascadeClassifier_getFeatureType(
  CascadeClassifier self,
);

@ffi.Native<CvSize Function(CascadeClassifier)>()
external CvSize cv_CascadeClassifier_getOriginalWindowSize(
  CascadeClassifier self,
);

@ffi.Native<ffi.Bool Function(CascadeClassifier)>()
external bool cv_CascadeClassifier_isOldFormatCascade(
  CascadeClassifier self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> cv_CascadeClassifier_load(
  CascadeClassifier self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Void Function(FaceDetectorYNPtr)>()
external void cv_FaceDetectorYN_close(
  FaceDetectorYNPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        CvSize,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<FaceDetectorYN>)>()
external ffi.Pointer<CvStatus> cv_FaceDetectorYN_create(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  CvSize input_size,
  double score_threshold,
  double nms_threshold,
  int top_k,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceDetectorYN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        VecUChar,
        VecUChar,
        CvSize,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<FaceDetectorYN>)>()
external ffi.Pointer<CvStatus> cv_FaceDetectorYN_create_1(
  ffi.Pointer<ffi.Char> framework,
  VecUChar buffer,
  VecUChar buffer_config,
  CvSize input_size,
  double score_threshold,
  double nms_threshold,
  int top_k,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceDetectorYN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceDetectorYN, Mat, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_FaceDetectorYN_detect(
  FaceDetectorYN self,
  Mat img,
  ffi.Pointer<Mat> faces,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<CvSize Function(FaceDetectorYN)>()
external CvSize cv_FaceDetectorYN_getInputSize(
  FaceDetectorYN self,
);

@ffi.Native<ffi.Float Function(FaceDetectorYN)>()
external double cv_FaceDetectorYN_getNMSThreshold(
  FaceDetectorYN self,
);

@ffi.Native<ffi.Float Function(FaceDetectorYN)>()
external double cv_FaceDetectorYN_getScoreThreshold(
  FaceDetectorYN self,
);

@ffi.Native<ffi.Int Function(FaceDetectorYN)>()
external int cv_FaceDetectorYN_getTopK(
  FaceDetectorYN self,
);

@ffi.Native<ffi.Void Function(FaceDetectorYN, CvSize)>()
external void cv_FaceDetectorYN_setInputSize(
  FaceDetectorYN self,
  CvSize input_size,
);

@ffi.Native<ffi.Void Function(FaceDetectorYN, ffi.Float)>()
external void cv_FaceDetectorYN_setNMSThreshold(
  FaceDetectorYN self,
  double nms_threshold,
);

@ffi.Native<ffi.Void Function(FaceDetectorYN, ffi.Float)>()
external void cv_FaceDetectorYN_setScoreThreshold(
  FaceDetectorYN self,
  double score_threshold,
);

@ffi.Native<ffi.Void Function(FaceDetectorYN, ffi.Int)>()
external void cv_FaceDetectorYN_setTopK(
  FaceDetectorYN self,
  int top_k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, Mat, ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_FaceRecognizerSF_alignCrop(
  FaceRecognizerSF self,
  Mat src_img,
  Mat face_box,
  ffi.Pointer<Mat> aligned_img,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(FaceRecognizerSFPtr)>()
external void cv_FaceRecognizerSF_close(
  FaceRecognizerSFPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Int, ffi.Int, ffi.Pointer<FaceRecognizerSF>)>()
external ffi.Pointer<CvStatus> cv_FaceRecognizerSF_create(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceRecognizerSF> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, ffi.Bool,
        ffi.Pointer<Mat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_FaceRecognizerSF_feature(
  FaceRecognizerSF self,
  Mat aligned_img,
  bool clone,
  ffi.Pointer<Mat> face_feature,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, Mat, ffi.Int,
        ffi.Pointer<ffi.Double>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_FaceRecognizerSF_match(
  FaceRecognizerSF self,
  Mat face_feature1,
  Mat face_feature2,
  int dis_type,
  ffi.Pointer<ffi.Double> distance,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(HOGDescriptorPtr)>()
external void cv_HOGDescriptor_close(
  HOGDescriptorPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecF32>,
        CvSize, CvSize, ffi.Pointer<VecPoint>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_compute(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecF32> descriptors,
  CvSize winStride,
  CvSize padding,
  ffi.Pointer<VecPoint> locations,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, Mat, Mat, Mat, CvSize, CvSize, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_computeGradient(
  HOGDescriptor self,
  Mat img,
  Mat grad,
  Mat angleOfs,
  CvSize paddingTL,
  CvSize paddingBR,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<HOGDescriptor>)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_create(
  ffi.Pointer<HOGDescriptor> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<HOGDescriptor>)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_create_1(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<HOGDescriptor> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor,
        Mat,
        ffi.Pointer<VecPoint>,
        ffi.Pointer<VecF64>,
        ffi.Double,
        CvSize,
        CvSize,
        ffi.Pointer<VecPoint>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_detect(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecPoint> foundLocations,
  ffi.Pointer<VecF64> weights,
  double hitThresh,
  CvSize winStride,
  CvSize padding,
  ffi.Pointer<VecPoint> searchLocations,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor,
        Mat,
        ffi.Pointer<VecPoint>,
        ffi.Double,
        CvSize,
        CvSize,
        ffi.Pointer<VecPoint>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_detect2(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecPoint> foundLocations,
  double hitThresh,
  CvSize winStride,
  CvSize padding,
  ffi.Pointer<VecPoint> searchLocations,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, Mat, ffi.Pointer<VecRect>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_detectMultiScale(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor,
        Mat,
        ffi.Double,
        CvSize,
        CvSize,
        ffi.Double,
        ffi.Double,
        ffi.Bool,
        ffi.Pointer<VecRect>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_detectMultiScale_1(
  HOGDescriptor self,
  Mat img,
  double hitThresh,
  CvSize winStride,
  CvSize padding,
  double scale,
  double finalThreshold,
  bool useMeanshiftGrouping,
  ffi.Pointer<VecRect> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_getDaimlerPeopleDetector(
  ffi.Pointer<VecF32> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_getDefaultPeopleDetector(
  ffi.Pointer<VecF32> rval,
);

@ffi.Native<ffi.Size Function(HOGDescriptor)>()
external int cv_HOGDescriptor_getDescriptorSize(
  HOGDescriptor self,
);

@ffi.Native<ffi.Double Function(HOGDescriptor)>()
external double cv_HOGDescriptor_getWinSigma(
  HOGDescriptor self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<VecRect>,
        ffi.Pointer<VecF64>, ffi.Int, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_groupRectangles(
  HOGDescriptor self,
  ffi.Pointer<VecRect> rectList,
  ffi.Pointer<VecF64> weights,
  int groupThreshold,
  double eps,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_load(
  HOGDescriptor self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(HOGDescriptor, VecF32)>()
external ffi.Pointer<CvStatus> cv_HOGDescriptor_setSVMDetector(
  HOGDescriptor self,
  VecF32 det,
);

@ffi.Native<ffi.Void Function(QRCodeDetectorPtr)>()
external void cv_QRCodeDetector_close(
  QRCodeDetectorPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<QRCodeDetector>)>()
external ffi.Pointer<CvStatus> cv_QRCodeDetector_create(
  ffi.Pointer<QRCodeDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        Mat, ffi.Pointer<ffi.Pointer<ffi.Char>>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_QRCodeDetector_decode(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  Mat straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector,
        Mat,
        VecPoint,
        ffi.Pointer<Mat>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_QRCodeDetector_decodeCurved(
  QRCodeDetector self,
  Mat img,
  VecPoint points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_QRCodeDetector_detect(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector,
        Mat,
        ffi.Pointer<VecPoint>,
        ffi.Pointer<Mat>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_QRCodeDetector_detectAndDecode(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector,
        Mat,
        ffi.Pointer<VecPoint>,
        ffi.Pointer<Mat>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_QRCodeDetector_detectAndDecodeCurved(
  QRCodeDetector self,
  Mat img,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector,
        Mat,
        ffi.Pointer<VecVecChar>,
        ffi.Pointer<VecPoint>,
        ffi.Pointer<VecMat>,
        ffi.Pointer<ffi.Bool>,
        imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_QRCodeDetector_detectAndDecodeMulti(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecVecChar> decoded,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<VecMat> straight_code,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        ffi.Pointer<ffi.Bool>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_QRCodeDetector_detectMulti(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<ffi.Bool> rval,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(QRCodeDetector, ffi.Double)>()
external void cv_QRCodeDetector_setEpsX(
  QRCodeDetector self,
  double epsX,
);

@ffi.Native<ffi.Void Function(QRCodeDetector, ffi.Double)>()
external void cv_QRCodeDetector_setEpsY(
  QRCodeDetector self,
  double epsY,
);

@ffi.Native<ffi.Void Function(QRCodeDetector, ffi.Bool)>()
external void cv_QRCodeDetector_setUseAlignmentMarkers(
  QRCodeDetector self,
  bool useAlignmentMarkers,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<VecRect>, ffi.Int, ffi.Double, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_groupRectangles(
  ffi.Pointer<VecRect> rects,
  int groupThreshold,
  double eps,
  imp$1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CascadeClassifierPtr)>>
      get cv_CascadeClassifier_close =>
          ffi.Native.addressOf(self.cv_CascadeClassifier_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FaceDetectorYNPtr)>>
      get cv_FaceDetectorYN_close =>
          ffi.Native.addressOf(self.cv_FaceDetectorYN_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FaceRecognizerSFPtr)>>
      get cv_FaceRecognizerSF_close =>
          ffi.Native.addressOf(self.cv_FaceRecognizerSF_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HOGDescriptorPtr)>>
      get cv_HOGDescriptor_close =>
          ffi.Native.addressOf(self.cv_HOGDescriptor_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QRCodeDetectorPtr)>>
      get cv_QRCodeDetector_close =>
          ffi.Native.addressOf(self.cv_QRCodeDetector_close);
}

final class CascadeClassifier extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CascadeClassifierPtr = ffi.Pointer<CascadeClassifier>;
typedef CvSize = imp$1.CvSize;
typedef CvStatus = imp$1.CvStatus;

final class FaceDetectorYN extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceDetectorYNPtr = ffi.Pointer<FaceDetectorYN>;

final class FaceRecognizerSF extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceRecognizerSFPtr = ffi.Pointer<FaceRecognizerSF>;

final class HOGDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef HOGDescriptorPtr = ffi.Pointer<HOGDescriptor>;
typedef Mat = imp$1.Mat;

final class QRCodeDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QRCodeDetectorPtr = ffi.Pointer<QRCodeDetector>;
typedef VecF32 = imp$1.VecF32;
typedef VecF64 = imp$1.VecF64;
typedef VecI32 = imp$1.VecI32;
typedef VecMat = imp$1.VecMat;
typedef VecPoint = imp$1.VecPoint;
typedef VecRect = imp$1.VecRect;
typedef VecUChar = imp$1.VecUChar;
typedef VecVecChar = imp$1.VecVecChar;
