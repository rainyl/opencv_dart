// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp$1;
import '' as self;

@ffi.Native<ffi.Void Function(AlignMTBPtr)>()
external void cv_AlignMTB_close(
  AlignMTBPtr b,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AlignMTB, VecMat, ffi.Pointer<VecMat>, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_AlignMTB_process(
  AlignMTB b,
  VecMat src,
  ffi.Pointer<VecMat> dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(MergeMertensPtr)>()
external void cv_MergeMertens_close(
  MergeMertensPtr b,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        MergeMertens, VecMat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_MergeMertens_process(
  MergeMertens b,
  VecMat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_colorChange(
  Mat src,
  Mat mask,
  Mat dst,
  double red_mul,
  double green_mul,
  double blue_mul,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AlignMTB>)>()
external ffi.Pointer<CvStatus> cv_createAlignMTB(
  ffi.Pointer<AlignMTB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Bool, ffi.Pointer<AlignMTB>)>()
external ffi.Pointer<CvStatus> cv_createAlignMTB_1(
  int max_bits,
  int exclude_range,
  bool cut,
  ffi.Pointer<AlignMTB> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<MergeMertens>)>()
external ffi.Pointer<CvStatus> cv_createMergeMertens(
  ffi.Pointer<MergeMertens> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Float, ffi.Float, ffi.Float, ffi.Pointer<MergeMertens>)>()
external ffi.Pointer<CvStatus> cv_createMergeMertens_1(
  double contrast_weight,
  double saturation_weight,
  double exposure_weight,
  ffi.Pointer<MergeMertens> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_detailEnhance(
  Mat src,
  Mat dst,
  double sigma_s,
  double sigma_r,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_edgePreservingFilter(
  Mat src,
  Mat dst,
  int filter,
  double sigma_s,
  double sigma_r,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fastNlMeansDenoising(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fastNlMeansDenoisingColored(
  Mat src,
  Mat dst,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, Mat, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fastNlMeansDenoisingColoredMulti(
  VecMat src,
  Mat dst,
  int imgToDenoiseIndex,
  int temporalWindowSize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecMat, Mat, ffi.Int, ffi.Int, ffi.Float,
        ffi.Float, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fastNlMeansDenoisingColoredMulti_1(
  VecMat src,
  Mat dst,
  int imgToDenoiseIndex,
  int temporalWindowSize,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fastNlMeansDenoisingColored_1(
  Mat src,
  Mat dst,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Int, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_fastNlMeansDenoising_1(
  Mat src,
  Mat dst,
  double h,
  int templateWindowSize,
  int searchWindowSize,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_illuminationChange(
  Mat src,
  Mat mask,
  Mat dst,
  double alpha,
  double beta,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_inpaint(
  Mat src,
  Mat mask,
  Mat dst,
  double inpaint_radius,
  int algorithm_type,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_pencilSketch(
  Mat src,
  Mat dst1,
  Mat dst2,
  double sigma_s,
  double sigma_r,
  double shade_factor,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, CvPoint, Mat, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_seamlessClone(
  Mat src,
  Mat dst,
  Mat mask,
  CvPoint p,
  Mat blend,
  int flags,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_stylization(
  Mat src,
  Mat dst,
  double sigma_s,
  double sigma_r,
  imp$1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Int, imp$1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_textureFlattening(
  Mat src,
  Mat mask,
  Mat dst,
  double low_threshold,
  double high_threshold,
  int kernel_size,
  imp$1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AlignMTBPtr)>>
      get cv_AlignMTB_close => ffi.Native.addressOf(self.cv_AlignMTB_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MergeMertensPtr)>>
      get cv_MergeMertens_close =>
          ffi.Native.addressOf(self.cv_MergeMertens_close);
}

final class AlignMTB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AlignMTBPtr = ffi.Pointer<AlignMTB>;
typedef CvPoint = imp$1.CvPoint;
typedef CvStatus = imp$1.CvStatus;
typedef Mat = imp$1.Mat;

final class MergeMertens extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MergeMertensPtr = ffi.Pointer<MergeMertens>;
typedef VecMat = imp$1.VecMat;
