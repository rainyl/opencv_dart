// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Objdetect
///
class CvNativeObjdetect {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeObjdetect(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeObjdetect.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void cv_CascadeClassifier_close(
    CascadeClassifierPtr self,
  ) {
    return _cv_CascadeClassifier_close(
      self,
    );
  }

  late final _cv_CascadeClassifier_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CascadeClassifierPtr)>>('cv_CascadeClassifier_close');
  late final _cv_CascadeClassifier_close =
      _cv_CascadeClassifier_closePtr.asFunction<void Function(CascadeClassifierPtr)>();

  ffi.Pointer<CvStatus> cv_CascadeClassifier_create(
    ffi.Pointer<CascadeClassifier> rval,
  ) {
    return _cv_CascadeClassifier_create(
      rval,
    );
  }

  late final _cv_CascadeClassifier_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<CascadeClassifier>)>>(
          'cv_CascadeClassifier_create');
  late final _cv_CascadeClassifier_create = _cv_CascadeClassifier_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<CascadeClassifier>)>();

  ffi.Pointer<CvStatus> cv_CascadeClassifier_create_1(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<CascadeClassifier> rval,
  ) {
    return _cv_CascadeClassifier_create_1(
      filename,
      rval,
    );
  }

  late final _cv_CascadeClassifier_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<CascadeClassifier>)>>('cv_CascadeClassifier_create_1');
  late final _cv_CascadeClassifier_create_1 = _cv_CascadeClassifier_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CascadeClassifier>)>();

  ffi.Pointer<CvStatus> cv_CascadeClassifier_detectMultiScale(
    CascadeClassifier self,
    Mat img,
    ffi.Pointer<VecRect> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_CascadeClassifier_detectMultiScale(
      self,
      img,
      rval,
      callback,
    );
  }

  late final _cv_CascadeClassifier_detectMultiScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>,
              imp1.CvCallback_0)>>('cv_CascadeClassifier_detectMultiScale');
  late final _cv_CascadeClassifier_detectMultiScale = _cv_CascadeClassifier_detectMultiScalePtr.asFunction<
      ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_CascadeClassifier_detectMultiScale_1(
    CascadeClassifier self,
    Mat img,
    ffi.Pointer<VecRect> objects,
    double scale,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_CascadeClassifier_detectMultiScale_1(
      self,
      img,
      objects,
      scale,
      minNeighbors,
      flags,
      minSize,
      maxSize,
      callback,
    );
  }

  late final _cv_CascadeClassifier_detectMultiScale_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>, ffi.Double, ffi.Int,
              ffi.Int, CvSize, CvSize, imp1.CvCallback_0)>>('cv_CascadeClassifier_detectMultiScale_1');
  late final _cv_CascadeClassifier_detectMultiScale_1 =
      _cv_CascadeClassifier_detectMultiScale_1Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>, double, int, int,
              CvSize, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_CascadeClassifier_detectMultiScale_2(
    CascadeClassifier self,
    Mat img,
    ffi.Pointer<VecRect> objects,
    ffi.Pointer<VecI32> numDetections,
    double scaleFactor,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_CascadeClassifier_detectMultiScale_2(
      self,
      img,
      objects,
      numDetections,
      scaleFactor,
      minNeighbors,
      flags,
      minSize,
      maxSize,
      callback,
    );
  }

  late final _cv_CascadeClassifier_detectMultiScale_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecI32>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              CvSize,
              CvSize,
              imp1.CvCallback_0)>>('cv_CascadeClassifier_detectMultiScale_2');
  late final _cv_CascadeClassifier_detectMultiScale_2 =
      _cv_CascadeClassifier_detectMultiScale_2Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>, ffi.Pointer<VecI32>,
              double, int, int, CvSize, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_CascadeClassifier_detectMultiScale_3(
    CascadeClassifier self,
    Mat img,
    ffi.Pointer<VecRect> objects,
    ffi.Pointer<VecI32> rejectLevels,
    ffi.Pointer<VecF64> levelWeights,
    double scaleFactor,
    int minNeighbors,
    int flags,
    CvSize minSize,
    CvSize maxSize,
    bool outputRejectLevels,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_CascadeClassifier_detectMultiScale_3(
      self,
      img,
      objects,
      rejectLevels,
      levelWeights,
      scaleFactor,
      minNeighbors,
      flags,
      minSize,
      maxSize,
      outputRejectLevels,
      callback,
    );
  }

  late final _cv_CascadeClassifier_detectMultiScale_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier,
              Mat,
              ffi.Pointer<VecRect>,
              ffi.Pointer<VecI32>,
              ffi.Pointer<VecF64>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              CvSize,
              CvSize,
              ffi.Bool,
              imp1.CvCallback_0)>>('cv_CascadeClassifier_detectMultiScale_3');
  late final _cv_CascadeClassifier_detectMultiScale_3 =
      _cv_CascadeClassifier_detectMultiScale_3Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>, ffi.Pointer<VecI32>,
              ffi.Pointer<VecF64>, double, int, int, CvSize, CvSize, bool, imp1.CvCallback_0)>();

  bool cv_CascadeClassifier_empty(
    CascadeClassifier self,
  ) {
    return _cv_CascadeClassifier_empty(
      self,
    );
  }

  late final _cv_CascadeClassifier_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CascadeClassifier)>>('cv_CascadeClassifier_empty');
  late final _cv_CascadeClassifier_empty =
      _cv_CascadeClassifier_emptyPtr.asFunction<bool Function(CascadeClassifier)>();

  int cv_CascadeClassifier_getFeatureType(
    CascadeClassifier self,
  ) {
    return _cv_CascadeClassifier_getFeatureType(
      self,
    );
  }

  late final _cv_CascadeClassifier_getFeatureTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CascadeClassifier)>>('cv_CascadeClassifier_getFeatureType');
  late final _cv_CascadeClassifier_getFeatureType =
      _cv_CascadeClassifier_getFeatureTypePtr.asFunction<int Function(CascadeClassifier)>();

  CvSize cv_CascadeClassifier_getOriginalWindowSize(
    CascadeClassifier self,
  ) {
    return _cv_CascadeClassifier_getOriginalWindowSize(
      self,
    );
  }

  late final _cv_CascadeClassifier_getOriginalWindowSizePtr =
      _lookup<ffi.NativeFunction<CvSize Function(CascadeClassifier)>>(
          'cv_CascadeClassifier_getOriginalWindowSize');
  late final _cv_CascadeClassifier_getOriginalWindowSize =
      _cv_CascadeClassifier_getOriginalWindowSizePtr.asFunction<CvSize Function(CascadeClassifier)>();

  bool cv_CascadeClassifier_isOldFormatCascade(
    CascadeClassifier self,
  ) {
    return _cv_CascadeClassifier_isOldFormatCascade(
      self,
    );
  }

  late final _cv_CascadeClassifier_isOldFormatCascadePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CascadeClassifier)>>(
          'cv_CascadeClassifier_isOldFormatCascade');
  late final _cv_CascadeClassifier_isOldFormatCascade =
      _cv_CascadeClassifier_isOldFormatCascadePtr.asFunction<bool Function(CascadeClassifier)>();

  ffi.Pointer<CvStatus> cv_CascadeClassifier_load(
    CascadeClassifier self,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _cv_CascadeClassifier_load(
      self,
      name,
      rval,
    );
  }

  late final _cv_CascadeClassifier_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CascadeClassifier, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('cv_CascadeClassifier_load');
  late final _cv_CascadeClassifier_load = _cv_CascadeClassifier_loadPtr.asFunction<
      ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void cv_FaceDetectorYN_close(
    FaceDetectorYNPtr self,
  ) {
    return _cv_FaceDetectorYN_close(
      self,
    );
  }

  late final _cv_FaceDetectorYN_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FaceDetectorYNPtr)>>('cv_FaceDetectorYN_close');
  late final _cv_FaceDetectorYN_close =
      _cv_FaceDetectorYN_closePtr.asFunction<void Function(FaceDetectorYNPtr)>();

  ffi.Pointer<CvStatus> cv_FaceDetectorYN_create(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    CvSize input_size,
    double score_threshold,
    double nms_threshold,
    int top_k,
    int backend_id,
    int target_id,
    ffi.Pointer<FaceDetectorYN> rval,
  ) {
    return _cv_FaceDetectorYN_create(
      model,
      config,
      input_size,
      score_threshold,
      nms_threshold,
      top_k,
      backend_id,
      target_id,
      rval,
    );
  }

  late final _cv_FaceDetectorYN_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              CvSize,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<FaceDetectorYN>)>>('cv_FaceDetectorYN_create');
  late final _cv_FaceDetectorYN_create = _cv_FaceDetectorYN_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, CvSize, double, double,
          int, int, int, ffi.Pointer<FaceDetectorYN>)>();

  ffi.Pointer<CvStatus> cv_FaceDetectorYN_create_1(
    ffi.Pointer<ffi.Char> framework,
    VecUChar buffer,
    VecUChar buffer_config,
    CvSize input_size,
    double score_threshold,
    double nms_threshold,
    int top_k,
    int backend_id,
    int target_id,
    ffi.Pointer<FaceDetectorYN> rval,
  ) {
    return _cv_FaceDetectorYN_create_1(
      framework,
      buffer,
      buffer_config,
      input_size,
      score_threshold,
      nms_threshold,
      top_k,
      backend_id,
      target_id,
      rval,
    );
  }

  late final _cv_FaceDetectorYN_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              VecUChar,
              VecUChar,
              CvSize,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<FaceDetectorYN>)>>('cv_FaceDetectorYN_create_1');
  late final _cv_FaceDetectorYN_create_1 = _cv_FaceDetectorYN_create_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, VecUChar, VecUChar, CvSize, double, double, int,
          int, int, ffi.Pointer<FaceDetectorYN>)>();

  ffi.Pointer<CvStatus> cv_FaceDetectorYN_detect(
    FaceDetectorYN self,
    Mat img,
    ffi.Pointer<Mat> faces,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_FaceDetectorYN_detect(
      self,
      img,
      faces,
      callback,
    );
  }

  late final _cv_FaceDetectorYN_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              FaceDetectorYN, Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_FaceDetectorYN_detect');
  late final _cv_FaceDetectorYN_detect = _cv_FaceDetectorYN_detectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(FaceDetectorYN, Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  CvSize cv_FaceDetectorYN_getInputSize(
    FaceDetectorYN self,
  ) {
    return _cv_FaceDetectorYN_getInputSize(
      self,
    );
  }

  late final _cv_FaceDetectorYN_getInputSizePtr =
      _lookup<ffi.NativeFunction<CvSize Function(FaceDetectorYN)>>('cv_FaceDetectorYN_getInputSize');
  late final _cv_FaceDetectorYN_getInputSize =
      _cv_FaceDetectorYN_getInputSizePtr.asFunction<CvSize Function(FaceDetectorYN)>();

  double cv_FaceDetectorYN_getNMSThreshold(
    FaceDetectorYN self,
  ) {
    return _cv_FaceDetectorYN_getNMSThreshold(
      self,
    );
  }

  late final _cv_FaceDetectorYN_getNMSThresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(FaceDetectorYN)>>('cv_FaceDetectorYN_getNMSThreshold');
  late final _cv_FaceDetectorYN_getNMSThreshold =
      _cv_FaceDetectorYN_getNMSThresholdPtr.asFunction<double Function(FaceDetectorYN)>();

  double cv_FaceDetectorYN_getScoreThreshold(
    FaceDetectorYN self,
  ) {
    return _cv_FaceDetectorYN_getScoreThreshold(
      self,
    );
  }

  late final _cv_FaceDetectorYN_getScoreThresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(FaceDetectorYN)>>('cv_FaceDetectorYN_getScoreThreshold');
  late final _cv_FaceDetectorYN_getScoreThreshold =
      _cv_FaceDetectorYN_getScoreThresholdPtr.asFunction<double Function(FaceDetectorYN)>();

  int cv_FaceDetectorYN_getTopK(
    FaceDetectorYN self,
  ) {
    return _cv_FaceDetectorYN_getTopK(
      self,
    );
  }

  late final _cv_FaceDetectorYN_getTopKPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(FaceDetectorYN)>>('cv_FaceDetectorYN_getTopK');
  late final _cv_FaceDetectorYN_getTopK =
      _cv_FaceDetectorYN_getTopKPtr.asFunction<int Function(FaceDetectorYN)>();

  void cv_FaceDetectorYN_setInputSize(
    FaceDetectorYN self,
    CvSize input_size,
  ) {
    return _cv_FaceDetectorYN_setInputSize(
      self,
      input_size,
    );
  }

  late final _cv_FaceDetectorYN_setInputSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FaceDetectorYN, CvSize)>>(
          'cv_FaceDetectorYN_setInputSize');
  late final _cv_FaceDetectorYN_setInputSize =
      _cv_FaceDetectorYN_setInputSizePtr.asFunction<void Function(FaceDetectorYN, CvSize)>();

  void cv_FaceDetectorYN_setNMSThreshold(
    FaceDetectorYN self,
    double nms_threshold,
  ) {
    return _cv_FaceDetectorYN_setNMSThreshold(
      self,
      nms_threshold,
    );
  }

  late final _cv_FaceDetectorYN_setNMSThresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FaceDetectorYN, ffi.Float)>>(
          'cv_FaceDetectorYN_setNMSThreshold');
  late final _cv_FaceDetectorYN_setNMSThreshold =
      _cv_FaceDetectorYN_setNMSThresholdPtr.asFunction<void Function(FaceDetectorYN, double)>();

  void cv_FaceDetectorYN_setScoreThreshold(
    FaceDetectorYN self,
    double score_threshold,
  ) {
    return _cv_FaceDetectorYN_setScoreThreshold(
      self,
      score_threshold,
    );
  }

  late final _cv_FaceDetectorYN_setScoreThresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FaceDetectorYN, ffi.Float)>>(
          'cv_FaceDetectorYN_setScoreThreshold');
  late final _cv_FaceDetectorYN_setScoreThreshold =
      _cv_FaceDetectorYN_setScoreThresholdPtr.asFunction<void Function(FaceDetectorYN, double)>();

  void cv_FaceDetectorYN_setTopK(
    FaceDetectorYN self,
    int top_k,
  ) {
    return _cv_FaceDetectorYN_setTopK(
      self,
      top_k,
    );
  }

  late final _cv_FaceDetectorYN_setTopKPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FaceDetectorYN, ffi.Int)>>('cv_FaceDetectorYN_setTopK');
  late final _cv_FaceDetectorYN_setTopK =
      _cv_FaceDetectorYN_setTopKPtr.asFunction<void Function(FaceDetectorYN, int)>();

  ffi.Pointer<CvStatus> cv_FaceRecognizerSF_alignCrop(
    FaceRecognizerSF self,
    Mat src_img,
    Mat face_box,
    ffi.Pointer<Mat> aligned_img,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_FaceRecognizerSF_alignCrop(
      self,
      src_img,
      face_box,
      aligned_img,
      callback,
    );
  }

  late final _cv_FaceRecognizerSF_alignCropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, Mat, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_FaceRecognizerSF_alignCrop');
  late final _cv_FaceRecognizerSF_alignCrop = _cv_FaceRecognizerSF_alignCropPtr.asFunction<
      ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  void cv_FaceRecognizerSF_close(
    FaceRecognizerSFPtr self,
  ) {
    return _cv_FaceRecognizerSF_close(
      self,
    );
  }

  late final _cv_FaceRecognizerSF_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FaceRecognizerSFPtr)>>('cv_FaceRecognizerSF_close');
  late final _cv_FaceRecognizerSF_close =
      _cv_FaceRecognizerSF_closePtr.asFunction<void Function(FaceRecognizerSFPtr)>();

  ffi.Pointer<CvStatus> cv_FaceRecognizerSF_create(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
    int backend_id,
    int target_id,
    ffi.Pointer<FaceRecognizerSF> rval,
  ) {
    return _cv_FaceRecognizerSF_create(
      model,
      config,
      backend_id,
      target_id,
      rval,
    );
  }

  late final _cv_FaceRecognizerSF_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<FaceRecognizerSF>)>>('cv_FaceRecognizerSF_create');
  late final _cv_FaceRecognizerSF_create = _cv_FaceRecognizerSF_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<FaceRecognizerSF>)>();

  ffi.Pointer<CvStatus> cv_FaceRecognizerSF_feature(
    FaceRecognizerSF self,
    Mat aligned_img,
    bool clone,
    ffi.Pointer<Mat> face_feature,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_FaceRecognizerSF_feature(
      self,
      aligned_img,
      clone,
      face_feature,
      callback,
    );
  }

  late final _cv_FaceRecognizerSF_featurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, ffi.Bool, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_FaceRecognizerSF_feature');
  late final _cv_FaceRecognizerSF_feature = _cv_FaceRecognizerSF_featurePtr.asFunction<
      ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, bool, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_FaceRecognizerSF_match(
    FaceRecognizerSF self,
    Mat face_feature1,
    Mat face_feature2,
    int dis_type,
    ffi.Pointer<ffi.Double> distance,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_FaceRecognizerSF_match(
      self,
      face_feature1,
      face_feature2,
      dis_type,
      distance,
      callback,
    );
  }

  late final _cv_FaceRecognizerSF_matchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FaceRecognizerSF, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_FaceRecognizerSF_match');
  late final _cv_FaceRecognizerSF_match = _cv_FaceRecognizerSF_matchPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          FaceRecognizerSF, Mat, Mat, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  void cv_HOGDescriptor_close(
    HOGDescriptorPtr self,
  ) {
    return _cv_HOGDescriptor_close(
      self,
    );
  }

  late final _cv_HOGDescriptor_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HOGDescriptorPtr)>>('cv_HOGDescriptor_close');
  late final _cv_HOGDescriptor_close =
      _cv_HOGDescriptor_closePtr.asFunction<void Function(HOGDescriptorPtr)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_compute(
    HOGDescriptor self,
    Mat img,
    ffi.Pointer<VecF32> descriptors,
    CvSize winStride,
    CvSize padding,
    ffi.Pointer<VecPoint> locations,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HOGDescriptor_compute(
      self,
      img,
      descriptors,
      winStride,
      padding,
      locations,
      callback,
    );
  }

  late final _cv_HOGDescriptor_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecF32>, CvSize, CvSize,
              ffi.Pointer<VecPoint>, imp1.CvCallback_0)>>('cv_HOGDescriptor_compute');
  late final _cv_HOGDescriptor_compute = _cv_HOGDescriptor_computePtr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecF32>, CvSize, CvSize,
          ffi.Pointer<VecPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_computeGradient(
    HOGDescriptor self,
    Mat img,
    Mat grad,
    Mat angleOfs,
    CvSize paddingTL,
    CvSize paddingBR,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HOGDescriptor_computeGradient(
      self,
      img,
      grad,
      angleOfs,
      paddingTL,
      paddingBR,
      callback,
    );
  }

  late final _cv_HOGDescriptor_computeGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, Mat, Mat, CvSize, CvSize,
              imp1.CvCallback_0)>>('cv_HOGDescriptor_computeGradient');
  late final _cv_HOGDescriptor_computeGradient = _cv_HOGDescriptor_computeGradientPtr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, Mat, Mat, CvSize, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_create(
    ffi.Pointer<HOGDescriptor> rval,
  ) {
    return _cv_HOGDescriptor_create(
      rval,
    );
  }

  late final _cv_HOGDescriptor_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<HOGDescriptor>)>>(
          'cv_HOGDescriptor_create');
  late final _cv_HOGDescriptor_create =
      _cv_HOGDescriptor_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<HOGDescriptor>)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_create_1(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<HOGDescriptor> rval,
  ) {
    return _cv_HOGDescriptor_create_1(
      filename,
      rval,
    );
  }

  late final _cv_HOGDescriptor_create_1Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<HOGDescriptor>)>>(
      'cv_HOGDescriptor_create_1');
  late final _cv_HOGDescriptor_create_1 = _cv_HOGDescriptor_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<HOGDescriptor>)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_detect(
    HOGDescriptor self,
    Mat img,
    ffi.Pointer<VecPoint> foundLocations,
    ffi.Pointer<VecF64> weights,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    ffi.Pointer<VecPoint> searchLocations,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HOGDescriptor_detect(
      self,
      img,
      foundLocations,
      weights,
      hitThresh,
      winStride,
      padding,
      searchLocations,
      callback,
    );
  }

  late final _cv_HOGDescriptor_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor,
              Mat,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<VecF64>,
              ffi.Double,
              CvSize,
              CvSize,
              ffi.Pointer<VecPoint>,
              imp1.CvCallback_0)>>('cv_HOGDescriptor_detect');
  late final _cv_HOGDescriptor_detect = _cv_HOGDescriptor_detectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<VecF64>, double,
          CvSize, CvSize, ffi.Pointer<VecPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_detect2(
    HOGDescriptor self,
    Mat img,
    ffi.Pointer<VecPoint> foundLocations,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    ffi.Pointer<VecPoint> searchLocations,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HOGDescriptor_detect2(
      self,
      img,
      foundLocations,
      hitThresh,
      winStride,
      padding,
      searchLocations,
      callback,
    );
  }

  late final _cv_HOGDescriptor_detect2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecPoint>, ffi.Double, CvSize,
              CvSize, ffi.Pointer<VecPoint>, imp1.CvCallback_0)>>('cv_HOGDescriptor_detect2');
  late final _cv_HOGDescriptor_detect2 = _cv_HOGDescriptor_detect2Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecPoint>, double, CvSize, CvSize,
          ffi.Pointer<VecPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_detectMultiScale(
    HOGDescriptor self,
    Mat img,
    ffi.Pointer<VecRect> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HOGDescriptor_detectMultiScale(
      self,
      img,
      rval,
      callback,
    );
  }

  late final _cv_HOGDescriptor_detectMultiScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecRect>,
              imp1.CvCallback_0)>>('cv_HOGDescriptor_detectMultiScale');
  late final _cv_HOGDescriptor_detectMultiScale = _cv_HOGDescriptor_detectMultiScalePtr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecRect>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_detectMultiScale_1(
    HOGDescriptor self,
    Mat img,
    double hitThresh,
    CvSize winStride,
    CvSize padding,
    double scale,
    double finalThreshold,
    bool useMeanshiftGrouping,
    ffi.Pointer<VecRect> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HOGDescriptor_detectMultiScale_1(
      self,
      img,
      hitThresh,
      winStride,
      padding,
      scale,
      finalThreshold,
      useMeanshiftGrouping,
      rval,
      callback,
    );
  }

  late final _cv_HOGDescriptor_detectMultiScale_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor,
              Mat,
              ffi.Double,
              CvSize,
              CvSize,
              ffi.Double,
              ffi.Double,
              ffi.Bool,
              ffi.Pointer<VecRect>,
              imp1.CvCallback_0)>>('cv_HOGDescriptor_detectMultiScale_1');
  late final _cv_HOGDescriptor_detectMultiScale_1 = _cv_HOGDescriptor_detectMultiScale_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, double, CvSize, CvSize, double, double, bool,
          ffi.Pointer<VecRect>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_getDaimlerPeopleDetector(
    ffi.Pointer<VecF32> rval,
  ) {
    return _cv_HOGDescriptor_getDaimlerPeopleDetector(
      rval,
    );
  }

  late final _cv_HOGDescriptor_getDaimlerPeopleDetectorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>>(
          'cv_HOGDescriptor_getDaimlerPeopleDetector');
  late final _cv_HOGDescriptor_getDaimlerPeopleDetector = _cv_HOGDescriptor_getDaimlerPeopleDetectorPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_getDefaultPeopleDetector(
    ffi.Pointer<VecF32> rval,
  ) {
    return _cv_HOGDescriptor_getDefaultPeopleDetector(
      rval,
    );
  }

  late final _cv_HOGDescriptor_getDefaultPeopleDetectorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>>(
          'cv_HOGDescriptor_getDefaultPeopleDetector');
  late final _cv_HOGDescriptor_getDefaultPeopleDetector = _cv_HOGDescriptor_getDefaultPeopleDetectorPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>();

  int cv_HOGDescriptor_getDescriptorSize(
    HOGDescriptor self,
  ) {
    return _cv_HOGDescriptor_getDescriptorSize(
      self,
    );
  }

  late final _cv_HOGDescriptor_getDescriptorSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(HOGDescriptor)>>('cv_HOGDescriptor_getDescriptorSize');
  late final _cv_HOGDescriptor_getDescriptorSize =
      _cv_HOGDescriptor_getDescriptorSizePtr.asFunction<int Function(HOGDescriptor)>();

  double cv_HOGDescriptor_getWinSigma(
    HOGDescriptor self,
  ) {
    return _cv_HOGDescriptor_getWinSigma(
      self,
    );
  }

  late final _cv_HOGDescriptor_getWinSigmaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(HOGDescriptor)>>('cv_HOGDescriptor_getWinSigma');
  late final _cv_HOGDescriptor_getWinSigma =
      _cv_HOGDescriptor_getWinSigmaPtr.asFunction<double Function(HOGDescriptor)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_groupRectangles(
    HOGDescriptor self,
    ffi.Pointer<VecRect> rectList,
    ffi.Pointer<VecF64> weights,
    int groupThreshold,
    double eps,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HOGDescriptor_groupRectangles(
      self,
      rectList,
      weights,
      groupThreshold,
      eps,
      callback,
    );
  }

  late final _cv_HOGDescriptor_groupRectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<VecRect>, ffi.Pointer<VecF64>, ffi.Int,
              ffi.Double, imp1.CvCallback_0)>>('cv_HOGDescriptor_groupRectangles');
  late final _cv_HOGDescriptor_groupRectangles = _cv_HOGDescriptor_groupRectanglesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          HOGDescriptor, ffi.Pointer<VecRect>, ffi.Pointer<VecF64>, int, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_load(
    HOGDescriptor self,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _cv_HOGDescriptor_load(
      self,
      name,
      rval,
    );
  }

  late final _cv_HOGDescriptor_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              HOGDescriptor, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>>('cv_HOGDescriptor_load');
  late final _cv_HOGDescriptor_load = _cv_HOGDescriptor_loadPtr.asFunction<
      ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> cv_HOGDescriptor_setSVMDetector(
    HOGDescriptor self,
    VecF32 det,
  ) {
    return _cv_HOGDescriptor_setSVMDetector(
      self,
      det,
    );
  }

  late final _cv_HOGDescriptor_setSVMDetectorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(HOGDescriptor, VecF32)>>(
          'cv_HOGDescriptor_setSVMDetector');
  late final _cv_HOGDescriptor_setSVMDetector =
      _cv_HOGDescriptor_setSVMDetectorPtr.asFunction<ffi.Pointer<CvStatus> Function(HOGDescriptor, VecF32)>();

  void cv_QRCodeDetector_close(
    QRCodeDetectorPtr self,
  ) {
    return _cv_QRCodeDetector_close(
      self,
    );
  }

  late final _cv_QRCodeDetector_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QRCodeDetectorPtr)>>('cv_QRCodeDetector_close');
  late final _cv_QRCodeDetector_close =
      _cv_QRCodeDetector_closePtr.asFunction<void Function(QRCodeDetectorPtr)>();

  ffi.Pointer<CvStatus> cv_QRCodeDetector_create(
    ffi.Pointer<QRCodeDetector> rval,
  ) {
    return _cv_QRCodeDetector_create(
      rval,
    );
  }

  late final _cv_QRCodeDetector_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<QRCodeDetector>)>>(
          'cv_QRCodeDetector_create');
  late final _cv_QRCodeDetector_create =
      _cv_QRCodeDetector_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<QRCodeDetector>)>();

  ffi.Pointer<CvStatus> cv_QRCodeDetector_decode(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecPoint> points,
    Mat straight_qrcode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_QRCodeDetector_decode(
      self,
      input,
      points,
      straight_qrcode,
      rval,
      callback,
    );
  }

  late final _cv_QRCodeDetector_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>, Mat,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, imp1.CvCallback_0)>>('cv_QRCodeDetector_decode');
  late final _cv_QRCodeDetector_decode = _cv_QRCodeDetector_decodePtr.asFunction<
      ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>, Mat,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_QRCodeDetector_decodeCurved(
    QRCodeDetector self,
    Mat img,
    VecPoint points,
    ffi.Pointer<Mat> straight_qrcode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_QRCodeDetector_decodeCurved(
      self,
      img,
      points,
      straight_qrcode,
      rval,
      callback,
    );
  }

  late final _cv_QRCodeDetector_decodeCurvedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, VecPoint, ffi.Pointer<Mat>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, imp1.CvCallback_0)>>('cv_QRCodeDetector_decodeCurved');
  late final _cv_QRCodeDetector_decodeCurved = _cv_QRCodeDetector_decodeCurvedPtr.asFunction<
      ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, VecPoint, ffi.Pointer<Mat>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_QRCodeDetector_detect(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_QRCodeDetector_detect(
      self,
      input,
      points,
      rval,
      callback,
    );
  }

  late final _cv_QRCodeDetector_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_QRCodeDetector_detect');
  late final _cv_QRCodeDetector_detect = _cv_QRCodeDetector_detectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_QRCodeDetector_detectAndDecode(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<Mat> straight_qrcode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_QRCodeDetector_detectAndDecode(
      self,
      input,
      points,
      straight_qrcode,
      rval,
      callback,
    );
  }

  late final _cv_QRCodeDetector_detectAndDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<Mat>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, imp1.CvCallback_0)>>('cv_QRCodeDetector_detectAndDecode');
  late final _cv_QRCodeDetector_detectAndDecode = _cv_QRCodeDetector_detectAndDecodePtr.asFunction<
      ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<Mat>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_QRCodeDetector_detectAndDecodeCurved(
    QRCodeDetector self,
    Mat img,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<Mat> straight_qrcode,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_QRCodeDetector_detectAndDecodeCurved(
      self,
      img,
      points,
      straight_qrcode,
      rval,
      callback,
    );
  }

  late final _cv_QRCodeDetector_detectAndDecodeCurvedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<Mat>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              imp1.CvCallback_0)>>('cv_QRCodeDetector_detectAndDecodeCurved');
  late final _cv_QRCodeDetector_detectAndDecodeCurved =
      _cv_QRCodeDetector_detectAndDecodeCurvedPtr.asFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<Mat>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_QRCodeDetector_detectAndDecodeMulti(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecVecChar> decoded,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<VecMat> straight_code,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_QRCodeDetector_detectAndDecodeMulti(
      self,
      input,
      decoded,
      points,
      straight_code,
      rval,
      callback,
    );
  }

  late final _cv_QRCodeDetector_detectAndDecodeMultiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QRCodeDetector,
              Mat,
              ffi.Pointer<VecVecChar>,
              ffi.Pointer<VecPoint>,
              ffi.Pointer<VecMat>,
              ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_QRCodeDetector_detectAndDecodeMulti');
  late final _cv_QRCodeDetector_detectAndDecodeMulti = _cv_QRCodeDetector_detectAndDecodeMultiPtr.asFunction<
      ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecVecChar>, ffi.Pointer<VecPoint>,
          ffi.Pointer<VecMat>, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_QRCodeDetector_detectMulti(
    QRCodeDetector self,
    Mat input,
    ffi.Pointer<VecPoint> points,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_QRCodeDetector_detectMulti(
      self,
      input,
      points,
      rval,
      callback,
    );
  }

  late final _cv_QRCodeDetector_detectMultiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_QRCodeDetector_detectMulti');
  late final _cv_QRCodeDetector_detectMulti = _cv_QRCodeDetector_detectMultiPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  void cv_QRCodeDetector_setEpsX(
    QRCodeDetector self,
    double epsX,
  ) {
    return _cv_QRCodeDetector_setEpsX(
      self,
      epsX,
    );
  }

  late final _cv_QRCodeDetector_setEpsXPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QRCodeDetector, ffi.Double)>>('cv_QRCodeDetector_setEpsX');
  late final _cv_QRCodeDetector_setEpsX =
      _cv_QRCodeDetector_setEpsXPtr.asFunction<void Function(QRCodeDetector, double)>();

  void cv_QRCodeDetector_setEpsY(
    QRCodeDetector self,
    double epsY,
  ) {
    return _cv_QRCodeDetector_setEpsY(
      self,
      epsY,
    );
  }

  late final _cv_QRCodeDetector_setEpsYPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QRCodeDetector, ffi.Double)>>('cv_QRCodeDetector_setEpsY');
  late final _cv_QRCodeDetector_setEpsY =
      _cv_QRCodeDetector_setEpsYPtr.asFunction<void Function(QRCodeDetector, double)>();

  void cv_QRCodeDetector_setUseAlignmentMarkers(
    QRCodeDetector self,
    bool useAlignmentMarkers,
  ) {
    return _cv_QRCodeDetector_setUseAlignmentMarkers(
      self,
      useAlignmentMarkers,
    );
  }

  late final _cv_QRCodeDetector_setUseAlignmentMarkersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QRCodeDetector, ffi.Bool)>>(
          'cv_QRCodeDetector_setUseAlignmentMarkers');
  late final _cv_QRCodeDetector_setUseAlignmentMarkers =
      _cv_QRCodeDetector_setUseAlignmentMarkersPtr.asFunction<void Function(QRCodeDetector, bool)>();

  ffi.Pointer<CvStatus> cv_groupRectangles(
    ffi.Pointer<VecRect> rects,
    int groupThreshold,
    double eps,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_groupRectangles(
      rects,
      groupThreshold,
      eps,
      callback,
    );
  }

  late final _cv_groupRectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<VecRect>, ffi.Int, ffi.Double, imp1.CvCallback_0)>>('cv_groupRectangles');
  late final _cv_groupRectangles = _cv_groupRectanglesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecRect>, int, double, imp1.CvCallback_0)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeObjdetect _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CascadeClassifierPtr)>> get cv_CascadeClassifier_close =>
      _library._cv_CascadeClassifier_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FaceDetectorYNPtr)>> get cv_FaceDetectorYN_close =>
      _library._cv_FaceDetectorYN_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FaceRecognizerSFPtr)>> get cv_FaceRecognizerSF_close =>
      _library._cv_FaceRecognizerSF_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HOGDescriptorPtr)>> get cv_HOGDescriptor_close =>
      _library._cv_HOGDescriptor_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QRCodeDetectorPtr)>> get cv_QRCodeDetector_close =>
      _library._cv_QRCodeDetector_closePtr;
}

final class CascadeClassifier extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CascadeClassifierPtr = ffi.Pointer<CascadeClassifier>;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;

final class FaceDetectorYN extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceDetectorYNPtr = ffi.Pointer<FaceDetectorYN>;

final class FaceRecognizerSF extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceRecognizerSFPtr = ffi.Pointer<FaceRecognizerSF>;

final class HOGDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef HOGDescriptorPtr = ffi.Pointer<HOGDescriptor>;
typedef Mat = imp1.Mat;

final class QRCodeDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QRCodeDetectorPtr = ffi.Pointer<QRCodeDetector>;
typedef VecF32 = imp1.VecF32;
typedef VecF64 = imp1.VecF64;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecRect = imp1.VecRect;
typedef VecUChar = imp1.VecUChar;
typedef VecVecChar = imp1.VecVecChar;
