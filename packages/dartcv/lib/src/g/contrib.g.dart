// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Contrib
///
class CvNativeContrib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeContrib(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeContrib.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void cv_aruco_Dictionary_close(
    ArucoDictionaryPtr self,
  ) {
    return _cv_aruco_Dictionary_close(
      self,
    );
  }

  late final _cv_aruco_Dictionary_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDictionaryPtr)>>('cv_aruco_Dictionary_close');
  late final _cv_aruco_Dictionary_close =
      _cv_aruco_Dictionary_closePtr.asFunction<void Function(ArucoDictionaryPtr)>();

  ffi.Pointer<CvStatus> cv_aruco_Dictionary_create(
    ffi.Pointer<ArucoDictionary> rval,
  ) {
    return _cv_aruco_Dictionary_create(
      rval,
    );
  }

  late final _cv_aruco_Dictionary_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDictionary>)>>(
          'cv_aruco_Dictionary_create');
  late final _cv_aruco_Dictionary_create = _cv_aruco_Dictionary_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDictionary>)>();

  ffi.Pointer<CvStatus> cv_aruco_Dictionary_create_1(
    Mat bytesList,
    int markerSize,
    int maxCorr,
    ffi.Pointer<ArucoDictionary> rval,
  ) {
    return _cv_aruco_Dictionary_create_1(
      bytesList,
      markerSize,
      maxCorr,
      rval,
    );
  }

  late final _cv_aruco_Dictionary_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<ArucoDictionary>)>>('cv_aruco_Dictionary_create_1');
  late final _cv_aruco_Dictionary_create_1 = _cv_aruco_Dictionary_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int, int, ffi.Pointer<ArucoDictionary>)>();

  ffi.Pointer<CvStatus> cv_aruco_Dictionary_generateImageMarker(
    ArucoDictionary self,
    int id,
    int sidePixels,
    Mat _img,
    int borderBits,
  ) {
    return _cv_aruco_Dictionary_generateImageMarker(
      self,
      id,
      sidePixels,
      _img,
      borderBits,
    );
  }

  late final _cv_aruco_Dictionary_generateImageMarkerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(ArucoDictionary, ffi.Int, ffi.Int, Mat, ffi.Int)>>(
      'cv_aruco_Dictionary_generateImageMarker');
  late final _cv_aruco_Dictionary_generateImageMarker = _cv_aruco_Dictionary_generateImageMarkerPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ArucoDictionary, int, int, Mat, int)>();

  int cv_aruco_Dictionary_getDistanceToId(
    ArucoDictionary self,
    Mat bits,
    int id,
    bool allRotations,
  ) {
    return _cv_aruco_Dictionary_getDistanceToId(
      self,
      bits,
      id,
      allRotations,
    );
  }

  late final _cv_aruco_Dictionary_getDistanceToIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDictionary, Mat, ffi.Int, ffi.Bool)>>(
          'cv_aruco_Dictionary_getDistanceToId');
  late final _cv_aruco_Dictionary_getDistanceToId =
      _cv_aruco_Dictionary_getDistanceToIdPtr.asFunction<int Function(ArucoDictionary, Mat, int, bool)>();

  ffi.Pointer<CvStatus> cv_aruco_Dictionary_get_bytesList(
    ArucoDictionary self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_aruco_Dictionary_get_bytesList(
      self,
      rval,
    );
  }

  late final _cv_aruco_Dictionary_get_bytesListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ArucoDictionary, ffi.Pointer<Mat>)>>(
          'cv_aruco_Dictionary_get_bytesList');
  late final _cv_aruco_Dictionary_get_bytesList = _cv_aruco_Dictionary_get_bytesListPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ArucoDictionary, ffi.Pointer<Mat>)>();

  int cv_aruco_Dictionary_get_markerSize(
    ArucoDictionary self,
  ) {
    return _cv_aruco_Dictionary_get_markerSize(
      self,
    );
  }

  late final _cv_aruco_Dictionary_get_markerSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDictionary)>>('cv_aruco_Dictionary_get_markerSize');
  late final _cv_aruco_Dictionary_get_markerSize =
      _cv_aruco_Dictionary_get_markerSizePtr.asFunction<int Function(ArucoDictionary)>();

  int cv_aruco_Dictionary_get_maxCorrectionBits(
    ArucoDictionary self,
  ) {
    return _cv_aruco_Dictionary_get_maxCorrectionBits(
      self,
    );
  }

  late final _cv_aruco_Dictionary_get_maxCorrectionBitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDictionary)>>(
          'cv_aruco_Dictionary_get_maxCorrectionBits');
  late final _cv_aruco_Dictionary_get_maxCorrectionBits =
      _cv_aruco_Dictionary_get_maxCorrectionBitsPtr.asFunction<int Function(ArucoDictionary)>();

  bool cv_aruco_Dictionary_identify(
    ArucoDictionary self,
    Mat onlyBits,
    ffi.Pointer<ffi.Int> idx,
    ffi.Pointer<ffi.Int> rotation,
    double maxCorrectionRate,
  ) {
    return _cv_aruco_Dictionary_identify(
      self,
      onlyBits,
      idx,
      rotation,
      maxCorrectionRate,
    );
  }

  late final _cv_aruco_Dictionary_identifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ArucoDictionary, Mat, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Double)>>('cv_aruco_Dictionary_identify');
  late final _cv_aruco_Dictionary_identify = _cv_aruco_Dictionary_identifyPtr
      .asFunction<bool Function(ArucoDictionary, Mat, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, double)>();

  ffi.Pointer<CvStatus> cv_aruco_Dictionary_set_bytesList(
    ArucoDictionary self,
    Mat value,
  ) {
    return _cv_aruco_Dictionary_set_bytesList(
      self,
      value,
    );
  }

  late final _cv_aruco_Dictionary_set_bytesListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ArucoDictionary, Mat)>>(
          'cv_aruco_Dictionary_set_bytesList');
  late final _cv_aruco_Dictionary_set_bytesList = _cv_aruco_Dictionary_set_bytesListPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ArucoDictionary, Mat)>();

  void cv_aruco_Dictionary_set_markerSize(
    ArucoDictionary self,
    int value,
  ) {
    return _cv_aruco_Dictionary_set_markerSize(
      self,
      value,
    );
  }

  late final _cv_aruco_Dictionary_set_markerSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDictionary, ffi.Int)>>(
          'cv_aruco_Dictionary_set_markerSize');
  late final _cv_aruco_Dictionary_set_markerSize =
      _cv_aruco_Dictionary_set_markerSizePtr.asFunction<void Function(ArucoDictionary, int)>();

  void cv_aruco_Dictionary_set_maxCorrectionBits(
    ArucoDictionary self,
    int value,
  ) {
    return _cv_aruco_Dictionary_set_maxCorrectionBits(
      self,
      value,
    );
  }

  late final _cv_aruco_Dictionary_set_maxCorrectionBitsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDictionary, ffi.Int)>>(
          'cv_aruco_Dictionary_set_maxCorrectionBits');
  late final _cv_aruco_Dictionary_set_maxCorrectionBits =
      _cv_aruco_Dictionary_set_maxCorrectionBitsPtr.asFunction<void Function(ArucoDictionary, int)>();

  void cv_aruco_arucoDetector_close(
    ArucoDetectorPtr self,
  ) {
    return _cv_aruco_arucoDetector_close(
      self,
    );
  }

  late final _cv_aruco_arucoDetector_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorPtr)>>('cv_aruco_arucoDetector_close');
  late final _cv_aruco_arucoDetector_close =
      _cv_aruco_arucoDetector_closePtr.asFunction<void Function(ArucoDetectorPtr)>();

  ffi.Pointer<CvStatus> cv_aruco_arucoDetector_create(
    ffi.Pointer<ArucoDetector> rval,
  ) {
    return _cv_aruco_arucoDetector_create(
      rval,
    );
  }

  late final _cv_aruco_arucoDetector_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetector>)>>(
          'cv_aruco_arucoDetector_create');
  late final _cv_aruco_arucoDetector_create = _cv_aruco_arucoDetector_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetector>)>();

  ffi.Pointer<CvStatus> cv_aruco_arucoDetector_create_1(
    ArucoDictionary dictionary,
    ArucoDetectorParams params,
    ffi.Pointer<ArucoDetector> rval,
  ) {
    return _cv_aruco_arucoDetector_create_1(
      dictionary,
      params,
      rval,
    );
  }

  late final _cv_aruco_arucoDetector_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDictionary, ArucoDetectorParams,
              ffi.Pointer<ArucoDetector>)>>('cv_aruco_arucoDetector_create_1');
  late final _cv_aruco_arucoDetector_create_1 = _cv_aruco_arucoDetector_create_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(ArucoDictionary, ArucoDetectorParams, ffi.Pointer<ArucoDetector>)>();

  ffi.Pointer<CvStatus> cv_aruco_arucoDetector_detectMarkers(
    ArucoDetector self,
    Mat inputArr,
    ffi.Pointer<VecVecPoint2f> out_markerCorners,
    ffi.Pointer<VecI32> out_markerIds,
    ffi.Pointer<VecVecPoint2f> out_rejectedCandidates,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_aruco_arucoDetector_detectMarkers(
      self,
      inputArr,
      out_markerCorners,
      out_markerIds,
      out_rejectedCandidates,
      callback,
    );
  }

  late final _cv_aruco_arucoDetector_detectMarkersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ArucoDetector, Mat, ffi.Pointer<VecVecPoint2f>, ffi.Pointer<VecI32>,
              ffi.Pointer<VecVecPoint2f>, imp1.CvCallback_0)>>('cv_aruco_arucoDetector_detectMarkers');
  late final _cv_aruco_arucoDetector_detectMarkers = _cv_aruco_arucoDetector_detectMarkersPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ArucoDetector, Mat, ffi.Pointer<VecVecPoint2f>, ffi.Pointer<VecI32>,
          ffi.Pointer<VecVecPoint2f>, imp1.CvCallback_0)>();

  void cv_aruco_detectorParameters_close(
    ArucoDetectorParamsPtr ap,
  ) {
    return _cv_aruco_detectorParameters_close(
      ap,
    );
  }

  late final _cv_aruco_detectorParameters_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParamsPtr)>>(
          'cv_aruco_detectorParameters_close');
  late final _cv_aruco_detectorParameters_close =
      _cv_aruco_detectorParameters_closePtr.asFunction<void Function(ArucoDetectorParamsPtr)>();

  ffi.Pointer<CvStatus> cv_aruco_detectorParameters_create(
    ffi.Pointer<ArucoDetectorParams> rval,
  ) {
    return _cv_aruco_detectorParameters_create(
      rval,
    );
  }

  late final _cv_aruco_detectorParameters_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetectorParams>)>>(
          'cv_aruco_detectorParameters_create');
  late final _cv_aruco_detectorParameters_create = _cv_aruco_detectorParameters_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetectorParams>)>();

  double cv_aruco_detectorParameters_get_adaptiveThreshConstant(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_adaptiveThreshConstant(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_adaptiveThreshConstantPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_adaptiveThreshConstant');
  late final _cv_aruco_detectorParameters_get_adaptiveThreshConstant =
      _cv_aruco_detectorParameters_get_adaptiveThreshConstantPtr
          .asFunction<double Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMax(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMax(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMaxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMax');
  late final _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMax =
      _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMaxPtr
          .asFunction<int Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMin(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMin(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMin');
  late final _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMin =
      _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeMinPtr
          .asFunction<int Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_adaptiveThreshWinSizeStep(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeStep(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeStepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_adaptiveThreshWinSizeStep');
  late final _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeStep =
      _cv_aruco_detectorParameters_get_adaptiveThreshWinSizeStepPtr
          .asFunction<int Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_aprilTagCriticalRad(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_aprilTagCriticalRad(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_aprilTagCriticalRadPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_aprilTagCriticalRad');
  late final _cv_aruco_detectorParameters_get_aprilTagCriticalRad =
      _cv_aruco_detectorParameters_get_aprilTagCriticalRadPtr
          .asFunction<double Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_aprilTagDeglitch(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_aprilTagDeglitch(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_aprilTagDeglitchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_aprilTagDeglitch');
  late final _cv_aruco_detectorParameters_get_aprilTagDeglitch =
      _cv_aruco_detectorParameters_get_aprilTagDeglitchPtr.asFunction<int Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_aprilTagMaxLineFitMse(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_aprilTagMaxLineFitMse(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_aprilTagMaxLineFitMsePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_aprilTagMaxLineFitMse');
  late final _cv_aruco_detectorParameters_get_aprilTagMaxLineFitMse =
      _cv_aruco_detectorParameters_get_aprilTagMaxLineFitMsePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_aprilTagMaxNmaxima(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_aprilTagMaxNmaxima(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_aprilTagMaxNmaximaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_aprilTagMaxNmaxima');
  late final _cv_aruco_detectorParameters_get_aprilTagMaxNmaxima =
      _cv_aruco_detectorParameters_get_aprilTagMaxNmaximaPtr.asFunction<int Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_aprilTagMinClusterPixels(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_aprilTagMinClusterPixels(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_aprilTagMinClusterPixelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_aprilTagMinClusterPixels');
  late final _cv_aruco_detectorParameters_get_aprilTagMinClusterPixels =
      _cv_aruco_detectorParameters_get_aprilTagMinClusterPixelsPtr
          .asFunction<int Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_aprilTagMinWhiteBlackDiff(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_aprilTagMinWhiteBlackDiff(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_aprilTagMinWhiteBlackDiffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_aprilTagMinWhiteBlackDiff');
  late final _cv_aruco_detectorParameters_get_aprilTagMinWhiteBlackDiff =
      _cv_aruco_detectorParameters_get_aprilTagMinWhiteBlackDiffPtr
          .asFunction<int Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_aprilTagQuadDecimate(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_aprilTagQuadDecimate(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_aprilTagQuadDecimatePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_aprilTagQuadDecimate');
  late final _cv_aruco_detectorParameters_get_aprilTagQuadDecimate =
      _cv_aruco_detectorParameters_get_aprilTagQuadDecimatePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_aprilTagQuadSigma(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_aprilTagQuadSigma(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_aprilTagQuadSigmaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_aprilTagQuadSigma');
  late final _cv_aruco_detectorParameters_get_aprilTagQuadSigma =
      _cv_aruco_detectorParameters_get_aprilTagQuadSigmaPtr
          .asFunction<double Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_cornerRefinementMaxIterations(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_cornerRefinementMaxIterations(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_cornerRefinementMaxIterationsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_cornerRefinementMaxIterations');
  late final _cv_aruco_detectorParameters_get_cornerRefinementMaxIterations =
      _cv_aruco_detectorParameters_get_cornerRefinementMaxIterationsPtr
          .asFunction<int Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_cornerRefinementMethod(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_cornerRefinementMethod(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_cornerRefinementMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_cornerRefinementMethod');
  late final _cv_aruco_detectorParameters_get_cornerRefinementMethod =
      _cv_aruco_detectorParameters_get_cornerRefinementMethodPtr
          .asFunction<int Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_cornerRefinementMinAccuracy(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_cornerRefinementMinAccuracy(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_cornerRefinementMinAccuracyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_cornerRefinementMinAccuracy');
  late final _cv_aruco_detectorParameters_get_cornerRefinementMinAccuracy =
      _cv_aruco_detectorParameters_get_cornerRefinementMinAccuracyPtr
          .asFunction<double Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_cornerRefinementWinSize(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_cornerRefinementWinSize(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_cornerRefinementWinSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_cornerRefinementWinSize');
  late final _cv_aruco_detectorParameters_get_cornerRefinementWinSize =
      _cv_aruco_detectorParameters_get_cornerRefinementWinSizePtr
          .asFunction<int Function(ArucoDetectorParams)>();

  bool cv_aruco_detectorParameters_get_detectInvertedMarker(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_detectInvertedMarker(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_detectInvertedMarkerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_detectInvertedMarker');
  late final _cv_aruco_detectorParameters_get_detectInvertedMarker =
      _cv_aruco_detectorParameters_get_detectInvertedMarkerPtr
          .asFunction<bool Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_errorCorrectionRate(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_errorCorrectionRate(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_errorCorrectionRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_errorCorrectionRate');
  late final _cv_aruco_detectorParameters_get_errorCorrectionRate =
      _cv_aruco_detectorParameters_get_errorCorrectionRatePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_markerBorderBits(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_markerBorderBits(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_markerBorderBitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_markerBorderBits');
  late final _cv_aruco_detectorParameters_get_markerBorderBits =
      _cv_aruco_detectorParameters_get_markerBorderBitsPtr.asFunction<int Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_maxErroneousBitsInBorderRate(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_maxErroneousBitsInBorderRate(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_maxErroneousBitsInBorderRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_maxErroneousBitsInBorderRate');
  late final _cv_aruco_detectorParameters_get_maxErroneousBitsInBorderRate =
      _cv_aruco_detectorParameters_get_maxErroneousBitsInBorderRatePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_maxMarkerPerimeterRate(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_maxMarkerPerimeterRate(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_maxMarkerPerimeterRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_maxMarkerPerimeterRate');
  late final _cv_aruco_detectorParameters_get_maxMarkerPerimeterRate =
      _cv_aruco_detectorParameters_get_maxMarkerPerimeterRatePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_minCornerDistanceRate(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_minCornerDistanceRate(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_minCornerDistanceRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_minCornerDistanceRate');
  late final _cv_aruco_detectorParameters_get_minCornerDistanceRate =
      _cv_aruco_detectorParameters_get_minCornerDistanceRatePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_minDistanceToBorder(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_minDistanceToBorder(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_minDistanceToBorderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_minDistanceToBorder');
  late final _cv_aruco_detectorParameters_get_minDistanceToBorder =
      _cv_aruco_detectorParameters_get_minDistanceToBorderPtr.asFunction<int Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_minMarkerDistanceRate(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_minMarkerDistanceRate(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_minMarkerDistanceRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_minMarkerDistanceRate');
  late final _cv_aruco_detectorParameters_get_minMarkerDistanceRate =
      _cv_aruco_detectorParameters_get_minMarkerDistanceRatePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_minMarkerPerimeterRate(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_minMarkerPerimeterRate(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_minMarkerPerimeterRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_minMarkerPerimeterRate');
  late final _cv_aruco_detectorParameters_get_minMarkerPerimeterRate =
      _cv_aruco_detectorParameters_get_minMarkerPerimeterRatePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_minOtsuStdDev(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_minOtsuStdDev(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_minOtsuStdDevPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_minOtsuStdDev');
  late final _cv_aruco_detectorParameters_get_minOtsuStdDev =
      _cv_aruco_detectorParameters_get_minOtsuStdDevPtr.asFunction<double Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_perspectiveRemoveIgnoredMarginPerCell(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_perspectiveRemoveIgnoredMarginPerCell(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_perspectiveRemoveIgnoredMarginPerCellPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_perspectiveRemoveIgnoredMarginPerCell');
  late final _cv_aruco_detectorParameters_get_perspectiveRemoveIgnoredMarginPerCell =
      _cv_aruco_detectorParameters_get_perspectiveRemoveIgnoredMarginPerCellPtr
          .asFunction<double Function(ArucoDetectorParams)>();

  int cv_aruco_detectorParameters_get_perspectiveRemovePixelPerCell(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_perspectiveRemovePixelPerCell(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_perspectiveRemovePixelPerCellPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_perspectiveRemovePixelPerCell');
  late final _cv_aruco_detectorParameters_get_perspectiveRemovePixelPerCell =
      _cv_aruco_detectorParameters_get_perspectiveRemovePixelPerCellPtr
          .asFunction<int Function(ArucoDetectorParams)>();

  double cv_aruco_detectorParameters_get_polygonalApproxAccuracyRate(
    ArucoDetectorParams self,
  ) {
    return _cv_aruco_detectorParameters_get_polygonalApproxAccuracyRate(
      self,
    );
  }

  late final _cv_aruco_detectorParameters_get_polygonalApproxAccuracyRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParams)>>(
          'cv_aruco_detectorParameters_get_polygonalApproxAccuracyRate');
  late final _cv_aruco_detectorParameters_get_polygonalApproxAccuracyRate =
      _cv_aruco_detectorParameters_get_polygonalApproxAccuracyRatePtr
          .asFunction<double Function(ArucoDetectorParams)>();

  void cv_aruco_detectorParameters_set_adaptiveThreshConstant(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_adaptiveThreshConstant(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_adaptiveThreshConstantPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_adaptiveThreshConstant');
  late final _cv_aruco_detectorParameters_set_adaptiveThreshConstant =
      _cv_aruco_detectorParameters_set_adaptiveThreshConstantPtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMax(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMax(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMaxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMax');
  late final _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMax =
      _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMaxPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMin(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMin(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMin');
  late final _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMin =
      _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeMinPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_adaptiveThreshWinSizeStep(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeStep(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeStepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_adaptiveThreshWinSizeStep');
  late final _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeStep =
      _cv_aruco_detectorParameters_set_adaptiveThreshWinSizeStepPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_aprilTagCriticalRad(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_aprilTagCriticalRad(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_aprilTagCriticalRadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Float)>>(
          'cv_aruco_detectorParameters_set_aprilTagCriticalRad');
  late final _cv_aruco_detectorParameters_set_aprilTagCriticalRad =
      _cv_aruco_detectorParameters_set_aprilTagCriticalRadPtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_aprilTagDeglitch(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_aprilTagDeglitch(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_aprilTagDeglitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_aprilTagDeglitch');
  late final _cv_aruco_detectorParameters_set_aprilTagDeglitch =
      _cv_aruco_detectorParameters_set_aprilTagDeglitchPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_aprilTagMaxLineFitMse(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_aprilTagMaxLineFitMse(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_aprilTagMaxLineFitMsePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Float)>>(
          'cv_aruco_detectorParameters_set_aprilTagMaxLineFitMse');
  late final _cv_aruco_detectorParameters_set_aprilTagMaxLineFitMse =
      _cv_aruco_detectorParameters_set_aprilTagMaxLineFitMsePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_aprilTagMaxNmaxima(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_aprilTagMaxNmaxima(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_aprilTagMaxNmaximaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_aprilTagMaxNmaxima');
  late final _cv_aruco_detectorParameters_set_aprilTagMaxNmaxima =
      _cv_aruco_detectorParameters_set_aprilTagMaxNmaximaPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_aprilTagMinClusterPixels(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_aprilTagMinClusterPixels(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_aprilTagMinClusterPixelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_aprilTagMinClusterPixels');
  late final _cv_aruco_detectorParameters_set_aprilTagMinClusterPixels =
      _cv_aruco_detectorParameters_set_aprilTagMinClusterPixelsPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_aprilTagMinWhiteBlackDiff(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_aprilTagMinWhiteBlackDiff(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_aprilTagMinWhiteBlackDiffPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_aprilTagMinWhiteBlackDiff');
  late final _cv_aruco_detectorParameters_set_aprilTagMinWhiteBlackDiff =
      _cv_aruco_detectorParameters_set_aprilTagMinWhiteBlackDiffPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_aprilTagQuadDecimate(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_aprilTagQuadDecimate(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_aprilTagQuadDecimatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Float)>>(
          'cv_aruco_detectorParameters_set_aprilTagQuadDecimate');
  late final _cv_aruco_detectorParameters_set_aprilTagQuadDecimate =
      _cv_aruco_detectorParameters_set_aprilTagQuadDecimatePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_aprilTagQuadSigma(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_aprilTagQuadSigma(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_aprilTagQuadSigmaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Float)>>(
          'cv_aruco_detectorParameters_set_aprilTagQuadSigma');
  late final _cv_aruco_detectorParameters_set_aprilTagQuadSigma =
      _cv_aruco_detectorParameters_set_aprilTagQuadSigmaPtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_cornerRefinementMaxIterations(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_cornerRefinementMaxIterations(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_cornerRefinementMaxIterationsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_cornerRefinementMaxIterations');
  late final _cv_aruco_detectorParameters_set_cornerRefinementMaxIterations =
      _cv_aruco_detectorParameters_set_cornerRefinementMaxIterationsPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_cornerRefinementMethod(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_cornerRefinementMethod(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_cornerRefinementMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_cornerRefinementMethod');
  late final _cv_aruco_detectorParameters_set_cornerRefinementMethod =
      _cv_aruco_detectorParameters_set_cornerRefinementMethodPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_cornerRefinementMinAccuracy(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_cornerRefinementMinAccuracy(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_cornerRefinementMinAccuracyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_cornerRefinementMinAccuracy');
  late final _cv_aruco_detectorParameters_set_cornerRefinementMinAccuracy =
      _cv_aruco_detectorParameters_set_cornerRefinementMinAccuracyPtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_cornerRefinementWinSize(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_cornerRefinementWinSize(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_cornerRefinementWinSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_cornerRefinementWinSize');
  late final _cv_aruco_detectorParameters_set_cornerRefinementWinSize =
      _cv_aruco_detectorParameters_set_cornerRefinementWinSizePtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_detectInvertedMarker(
    ArucoDetectorParams self,
    bool value,
  ) {
    return _cv_aruco_detectorParameters_set_detectInvertedMarker(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_detectInvertedMarkerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Bool)>>(
          'cv_aruco_detectorParameters_set_detectInvertedMarker');
  late final _cv_aruco_detectorParameters_set_detectInvertedMarker =
      _cv_aruco_detectorParameters_set_detectInvertedMarkerPtr
          .asFunction<void Function(ArucoDetectorParams, bool)>();

  void cv_aruco_detectorParameters_set_errorCorrectionRate(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_errorCorrectionRate(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_errorCorrectionRatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_errorCorrectionRate');
  late final _cv_aruco_detectorParameters_set_errorCorrectionRate =
      _cv_aruco_detectorParameters_set_errorCorrectionRatePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_markerBorderBits(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_markerBorderBits(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_markerBorderBitsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_markerBorderBits');
  late final _cv_aruco_detectorParameters_set_markerBorderBits =
      _cv_aruco_detectorParameters_set_markerBorderBitsPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_maxErroneousBitsInBorderRate(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_maxErroneousBitsInBorderRate(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_maxErroneousBitsInBorderRatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_maxErroneousBitsInBorderRate');
  late final _cv_aruco_detectorParameters_set_maxErroneousBitsInBorderRate =
      _cv_aruco_detectorParameters_set_maxErroneousBitsInBorderRatePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_maxMarkerPerimeterRate(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_maxMarkerPerimeterRate(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_maxMarkerPerimeterRatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_maxMarkerPerimeterRate');
  late final _cv_aruco_detectorParameters_set_maxMarkerPerimeterRate =
      _cv_aruco_detectorParameters_set_maxMarkerPerimeterRatePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_minCornerDistanceRate(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_minCornerDistanceRate(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_minCornerDistanceRatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_minCornerDistanceRate');
  late final _cv_aruco_detectorParameters_set_minCornerDistanceRate =
      _cv_aruco_detectorParameters_set_minCornerDistanceRatePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_minDistanceToBorder(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_minDistanceToBorder(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_minDistanceToBorderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_minDistanceToBorder');
  late final _cv_aruco_detectorParameters_set_minDistanceToBorder =
      _cv_aruco_detectorParameters_set_minDistanceToBorderPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_minMarkerDistanceRate(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_minMarkerDistanceRate(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_minMarkerDistanceRatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_minMarkerDistanceRate');
  late final _cv_aruco_detectorParameters_set_minMarkerDistanceRate =
      _cv_aruco_detectorParameters_set_minMarkerDistanceRatePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_minMarkerPerimeterRate(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_minMarkerPerimeterRate(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_minMarkerPerimeterRatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_minMarkerPerimeterRate');
  late final _cv_aruco_detectorParameters_set_minMarkerPerimeterRate =
      _cv_aruco_detectorParameters_set_minMarkerPerimeterRatePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_minOtsuStdDev(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_minOtsuStdDev(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_minOtsuStdDevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_minOtsuStdDev');
  late final _cv_aruco_detectorParameters_set_minOtsuStdDev =
      _cv_aruco_detectorParameters_set_minOtsuStdDevPtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_perspectiveRemoveIgnoredMarginPerCell(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_perspectiveRemoveIgnoredMarginPerCell(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_perspectiveRemoveIgnoredMarginPerCellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_perspectiveRemoveIgnoredMarginPerCell');
  late final _cv_aruco_detectorParameters_set_perspectiveRemoveIgnoredMarginPerCell =
      _cv_aruco_detectorParameters_set_perspectiveRemoveIgnoredMarginPerCellPtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  void cv_aruco_detectorParameters_set_perspectiveRemovePixelPerCell(
    ArucoDetectorParams self,
    int value,
  ) {
    return _cv_aruco_detectorParameters_set_perspectiveRemovePixelPerCell(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_perspectiveRemovePixelPerCellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Int)>>(
          'cv_aruco_detectorParameters_set_perspectiveRemovePixelPerCell');
  late final _cv_aruco_detectorParameters_set_perspectiveRemovePixelPerCell =
      _cv_aruco_detectorParameters_set_perspectiveRemovePixelPerCellPtr
          .asFunction<void Function(ArucoDetectorParams, int)>();

  void cv_aruco_detectorParameters_set_polygonalApproxAccuracyRate(
    ArucoDetectorParams self,
    double value,
  ) {
    return _cv_aruco_detectorParameters_set_polygonalApproxAccuracyRate(
      self,
      value,
    );
  }

  late final _cv_aruco_detectorParameters_set_polygonalApproxAccuracyRatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParams, ffi.Double)>>(
          'cv_aruco_detectorParameters_set_polygonalApproxAccuracyRate');
  late final _cv_aruco_detectorParameters_set_polygonalApproxAccuracyRate =
      _cv_aruco_detectorParameters_set_polygonalApproxAccuracyRatePtr
          .asFunction<void Function(ArucoDetectorParams, double)>();

  ffi.Pointer<CvStatus> cv_aruco_drawDetectedMarkers(
    Mat image,
    VecVecPoint2f markerCorners,
    VecI32 markerIds,
    Scalar borderColor,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_aruco_drawDetectedMarkers(
      image,
      markerCorners,
      markerIds,
      borderColor,
      callback,
    );
  }

  late final _cv_aruco_drawDetectedMarkersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint2f, VecI32, Scalar, imp1.CvCallback_0)>>('cv_aruco_drawDetectedMarkers');
  late final _cv_aruco_drawDetectedMarkers = _cv_aruco_drawDetectedMarkersPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, VecVecPoint2f, VecI32, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_aruco_generateImageMarker(
    int dictionaryId,
    int id,
    int sidePixels,
    int borderBits,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_aruco_generateImageMarker(
      dictionaryId,
      id,
      sidePixels,
      borderBits,
      dst,
      callback,
    );
  }

  late final _cv_aruco_generateImageMarkerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, Mat, imp1.CvCallback_0)>>('cv_aruco_generateImageMarker');
  late final _cv_aruco_generateImageMarker = _cv_aruco_generateImageMarkerPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, int, int, int, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_aruco_getPredefinedDictionary(
    int dictionaryId,
    ffi.Pointer<ArucoDictionary> rval,
  ) {
    return _cv_aruco_getPredefinedDictionary(
      dictionaryId,
      rval,
    );
  }

  late final _cv_aruco_getPredefinedDictionaryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ArucoDictionary>)>>(
          'cv_aruco_getPredefinedDictionary');
  late final _cv_aruco_getPredefinedDictionary = _cv_aruco_getPredefinedDictionaryPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, ffi.Pointer<ArucoDictionary>)>();

  void cv_img_hash_BlockMeanHash_close(
    BlockMeanHashPtr self,
  ) {
    return _cv_img_hash_BlockMeanHash_close(
      self,
    );
  }

  late final _cv_img_hash_BlockMeanHash_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BlockMeanHashPtr)>>('cv_img_hash_BlockMeanHash_close');
  late final _cv_img_hash_BlockMeanHash_close =
      _cv_img_hash_BlockMeanHash_closePtr.asFunction<void Function(BlockMeanHashPtr)>();

  ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_compare(
    BlockMeanHash self,
    Mat hashOne,
    Mat hashTwo,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_BlockMeanHash_compare(
      self,
      hashOne,
      hashTwo,
      rval,
      callback,
    );
  }

  late final _cv_img_hash_BlockMeanHash_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat, Mat, ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_img_hash_BlockMeanHash_compare');
  late final _cv_img_hash_BlockMeanHash_compare = _cv_img_hash_BlockMeanHash_comparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_compute(
    BlockMeanHash self,
    Mat inputArr,
    Mat outputArr,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_BlockMeanHash_compute(
      self,
      inputArr,
      outputArr,
      callback,
    );
  }

  late final _cv_img_hash_BlockMeanHash_computePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_img_hash_BlockMeanHash_compute');
  late final _cv_img_hash_BlockMeanHash_compute = _cv_img_hash_BlockMeanHash_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_create(
    int mode,
    ffi.Pointer<BlockMeanHash> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_BlockMeanHash_create(
      mode,
      rval,
      callback,
    );
  }

  late final _cv_img_hash_BlockMeanHash_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Pointer<BlockMeanHash>, imp1.CvCallback_0)>>('cv_img_hash_BlockMeanHash_create');
  late final _cv_img_hash_BlockMeanHash_create = _cv_img_hash_BlockMeanHash_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, ffi.Pointer<BlockMeanHash>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_getMean(
    BlockMeanHash self,
    ffi.Pointer<VecF64> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_BlockMeanHash_getMean(
      self,
      rval,
      callback,
    );
  }

  late final _cv_img_hash_BlockMeanHash_getMeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BlockMeanHash, ffi.Pointer<VecF64>, imp1.CvCallback_0)>>('cv_img_hash_BlockMeanHash_getMean');
  late final _cv_img_hash_BlockMeanHash_getMean = _cv_img_hash_BlockMeanHash_getMeanPtr
      .asFunction<ffi.Pointer<CvStatus> Function(BlockMeanHash, ffi.Pointer<VecF64>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_BlockMeanHash_setMode(
    BlockMeanHash self,
    int mode,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_BlockMeanHash_setMode(
      self,
      mode,
      callback,
    );
  }

  late final _cv_img_hash_BlockMeanHash_setModePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(BlockMeanHash, ffi.Int, imp1.CvCallback_0)>>(
          'cv_img_hash_BlockMeanHash_setMode');
  late final _cv_img_hash_BlockMeanHash_setMode = _cv_img_hash_BlockMeanHash_setModePtr
      .asFunction<ffi.Pointer<CvStatus> Function(BlockMeanHash, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_averageHash_compare(
    Mat a,
    Mat b,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_averageHash_compare(
      a,
      b,
      rval,
      callback,
    );
  }

  late final _cv_img_hash_averageHash_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_img_hash_averageHash_compare');
  late final _cv_img_hash_averageHash_compare = _cv_img_hash_averageHash_comparePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_averageHash_compute(
    Mat inputArr,
    Mat outputArr,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_averageHash_compute(
      inputArr,
      outputArr,
      callback,
    );
  }

  late final _cv_img_hash_averageHash_computePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_img_hash_averageHash_compute');
  late final _cv_img_hash_averageHash_compute = _cv_img_hash_averageHash_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_colorMomentHash_compare(
    Mat a,
    Mat b,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_colorMomentHash_compare(
      a,
      b,
      rval,
      callback,
    );
  }

  late final _cv_img_hash_colorMomentHash_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_img_hash_colorMomentHash_compare');
  late final _cv_img_hash_colorMomentHash_compare = _cv_img_hash_colorMomentHash_comparePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_colorMomentHash_compute(
    Mat inputArr,
    Mat outputArr,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_colorMomentHash_compute(
      inputArr,
      outputArr,
      callback,
    );
  }

  late final _cv_img_hash_colorMomentHash_computePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_img_hash_colorMomentHash_compute');
  late final _cv_img_hash_colorMomentHash_compute = _cv_img_hash_colorMomentHash_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_marrHildrethHash_compare(
    Mat a,
    Mat b,
    double alpha,
    double scale,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_marrHildrethHash_compare(
      a,
      b,
      alpha,
      scale,
      rval,
      callback,
    );
  }

  late final _cv_img_hash_marrHildrethHash_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float, ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_img_hash_marrHildrethHash_compare');
  late final _cv_img_hash_marrHildrethHash_compare = _cv_img_hash_marrHildrethHash_comparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_marrHildrethHash_compute(
    Mat inputArr,
    Mat outputArr,
    double alpha,
    double scale,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_marrHildrethHash_compute(
      inputArr,
      outputArr,
      alpha,
      scale,
      callback,
    );
  }

  late final _cv_img_hash_marrHildrethHash_computePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float, imp1.CvCallback_0)>>(
      'cv_img_hash_marrHildrethHash_compute');
  late final _cv_img_hash_marrHildrethHash_compute = _cv_img_hash_marrHildrethHash_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_pHash_compare(
    Mat a,
    Mat b,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_pHash_compare(
      a,
      b,
      rval,
      callback,
    );
  }

  late final _cv_img_hash_pHash_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_img_hash_pHash_compare');
  late final _cv_img_hash_pHash_compare = _cv_img_hash_pHash_comparePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_pHash_compute(
    Mat inputArr,
    Mat outputArr,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_pHash_compute(
      inputArr,
      outputArr,
      callback,
    );
  }

  late final _cv_img_hash_pHash_computePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_img_hash_pHash_compute');
  late final _cv_img_hash_pHash_compute =
      _cv_img_hash_pHash_computePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_radialVarianceHash_compare(
    Mat a,
    Mat b,
    double sigma,
    int numOfAngleLine,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_radialVarianceHash_compare(
      a,
      b,
      sigma,
      numOfAngleLine,
      rval,
      callback,
    );
  }

  late final _cv_img_hash_radialVarianceHash_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int, ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_img_hash_radialVarianceHash_compare');
  late final _cv_img_hash_radialVarianceHash_compare = _cv_img_hash_radialVarianceHash_comparePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_img_hash_radialVarianceHash_compute(
    Mat inputArr,
    Mat outputArr,
    double sigma,
    int numOfAngleLine,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_img_hash_radialVarianceHash_compute(
      inputArr,
      outputArr,
      sigma,
      numOfAngleLine,
      callback,
    );
  }

  late final _cv_img_hash_radialVarianceHash_computePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int, imp1.CvCallback_0)>>(
      'cv_img_hash_radialVarianceHash_compute');
  late final _cv_img_hash_radialVarianceHash_compute = _cv_img_hash_radialVarianceHash_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, int, imp1.CvCallback_0)>();

  void cv_quality_QualityBRISQUE_close(
    QualityBRISQUEPtr self,
  ) {
    return _cv_quality_QualityBRISQUE_close(
      self,
    );
  }

  late final _cv_quality_QualityBRISQUE_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityBRISQUEPtr)>>('cv_quality_QualityBRISQUE_close');
  late final _cv_quality_QualityBRISQUE_close =
      _cv_quality_QualityBRISQUE_closePtr.asFunction<void Function(QualityBRISQUEPtr)>();

  ffi.Pointer<CvStatus> cv_quality_QualityBRISQUE_compute(
    QualityBRISQUE self,
    Mat img,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityBRISQUE_compute(
      self,
      img,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityBRISQUE_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(QualityBRISQUE, Mat, ffi.Pointer<Scalar>,
              imp1.CvCallback_0)>>('cv_quality_QualityBRISQUE_compute');
  late final _cv_quality_QualityBRISQUE_compute = _cv_quality_QualityBRISQUE_computePtr.asFunction<
      ffi.Pointer<CvStatus> Function(QualityBRISQUE, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityBRISQUE_computeFeatures_static(
    Mat img,
    Mat features,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityBRISQUE_computeFeatures_static(
      img,
      features,
      callback,
    );
  }

  late final _cv_quality_QualityBRISQUE_computeFeatures_staticPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_quality_QualityBRISQUE_computeFeatures_static');
  late final _cv_quality_QualityBRISQUE_computeFeatures_static =
      _cv_quality_QualityBRISQUE_computeFeatures_staticPtr
          .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityBRISQUE_compute_static(
    Mat img,
    ffi.Pointer<ffi.Char> model_file,
    ffi.Pointer<ffi.Char> range_file,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityBRISQUE_compute_static(
      img,
      model_file,
      range_file,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityBRISQUE_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_quality_QualityBRISQUE_compute_static');
  late final _cv_quality_QualityBRISQUE_compute_static =
      _cv_quality_QualityBRISQUE_compute_staticPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityBRISQUE_create(
    ffi.Pointer<ffi.Char> model_file,
    ffi.Pointer<ffi.Char> range_file,
    ffi.Pointer<QualityBRISQUE> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityBRISQUE_create(
      model_file,
      range_file,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityBRISQUE_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<QualityBRISQUE>, imp1.CvCallback_0)>>('cv_quality_QualityBRISQUE_create');
  late final _cv_quality_QualityBRISQUE_create = _cv_quality_QualityBRISQUE_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<QualityBRISQUE>, imp1.CvCallback_0)>();

  void cv_quality_QualityGMSD_close(
    QualityGMSDPtr self,
  ) {
    return _cv_quality_QualityGMSD_close(
      self,
    );
  }

  late final _cv_quality_QualityGMSD_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityGMSDPtr)>>('cv_quality_QualityGMSD_close');
  late final _cv_quality_QualityGMSD_close =
      _cv_quality_QualityGMSD_closePtr.asFunction<void Function(QualityGMSDPtr)>();

  ffi.Pointer<CvStatus> cv_quality_QualityGMSD_compute(
    QualityGMSD self,
    Mat cmp,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityGMSD_compute(
      self,
      cmp,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityGMSD_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualityGMSD, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_quality_QualityGMSD_compute');
  late final _cv_quality_QualityGMSD_compute = _cv_quality_QualityGMSD_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(QualityGMSD, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityGMSD_compute_static(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityGMSD_compute_static(
      ref,
      cmp,
      qualityMap,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityGMSD_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>,
              imp1.CvCallback_0)>>('cv_quality_QualityGMSD_compute_static');
  late final _cv_quality_QualityGMSD_compute_static = _cv_quality_QualityGMSD_compute_staticPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityGMSD_create(
    Mat ref,
    ffi.Pointer<QualityGMSD> rval,
  ) {
    return _cv_quality_QualityGMSD_create(
      ref,
      rval,
    );
  }

  late final _cv_quality_QualityGMSD_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualityGMSD>)>>(
          'cv_quality_QualityGMSD_create');
  late final _cv_quality_QualityGMSD_create = _cv_quality_QualityGMSD_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualityGMSD>)>();

  void cv_quality_QualityMSE_close(
    QualityMSEPtr self,
  ) {
    return _cv_quality_QualityMSE_close(
      self,
    );
  }

  late final _cv_quality_QualityMSE_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityMSEPtr)>>('cv_quality_QualityMSE_close');
  late final _cv_quality_QualityMSE_close =
      _cv_quality_QualityMSE_closePtr.asFunction<void Function(QualityMSEPtr)>();

  ffi.Pointer<CvStatus> cv_quality_QualityMSE_compute(
    QualityMSE self,
    Mat cmpImgs,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityMSE_compute(
      self,
      cmpImgs,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityMSE_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualityMSE, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_quality_QualityMSE_compute');
  late final _cv_quality_QualityMSE_compute = _cv_quality_QualityMSE_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(QualityMSE, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityMSE_compute_static(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityMSE_compute_static(
      ref,
      cmp,
      qualityMap,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityMSE_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>,
              imp1.CvCallback_0)>>('cv_quality_QualityMSE_compute_static');
  late final _cv_quality_QualityMSE_compute_static = _cv_quality_QualityMSE_compute_staticPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityMSE_create(
    Mat ref,
    ffi.Pointer<QualityMSE> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityMSE_create(
      ref,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityMSE_createPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualityMSE>, imp1.CvCallback_0)>>(
      'cv_quality_QualityMSE_create');
  late final _cv_quality_QualityMSE_create = _cv_quality_QualityMSE_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualityMSE>, imp1.CvCallback_0)>();

  void cv_quality_QualityPSNR_close(
    QualityPSNRPtr self,
  ) {
    return _cv_quality_QualityPSNR_close(
      self,
    );
  }

  late final _cv_quality_QualityPSNR_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityPSNRPtr)>>('cv_quality_QualityPSNR_close');
  late final _cv_quality_QualityPSNR_close =
      _cv_quality_QualityPSNR_closePtr.asFunction<void Function(QualityPSNRPtr)>();

  ffi.Pointer<CvStatus> cv_quality_QualityPSNR_compute(
    QualityPSNR self,
    Mat cmp,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityPSNR_compute(
      self,
      cmp,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityPSNR_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualityPSNR, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_quality_QualityPSNR_compute');
  late final _cv_quality_QualityPSNR_compute = _cv_quality_QualityPSNR_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(QualityPSNR, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityPSNR_compute_static(
    Mat ref,
    Mat cmp,
    double maxPixelValue,
    Mat qualityMap,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityPSNR_compute_static(
      ref,
      cmp,
      maxPixelValue,
      qualityMap,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityPSNR_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat, ffi.Pointer<Scalar>,
              imp1.CvCallback_0)>>('cv_quality_QualityPSNR_compute_static');
  late final _cv_quality_QualityPSNR_compute_static = _cv_quality_QualityPSNR_compute_staticPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualityPSNR_create(
    Mat ref,
    double maxPixelValue,
    ffi.Pointer<QualityPSNR> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualityPSNR_create(
      ref,
      maxPixelValue,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualityPSNR_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Pointer<QualityPSNR>,
              imp1.CvCallback_0)>>('cv_quality_QualityPSNR_create');
  late final _cv_quality_QualityPSNR_create = _cv_quality_QualityPSNR_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, double, ffi.Pointer<QualityPSNR>, imp1.CvCallback_0)>();

  double cv_quality_QualityPSNR_getMaxPixelValue(
    QualityPSNR self,
  ) {
    return _cv_quality_QualityPSNR_getMaxPixelValue(
      self,
    );
  }

  late final _cv_quality_QualityPSNR_getMaxPixelValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(QualityPSNR)>>(
          'cv_quality_QualityPSNR_getMaxPixelValue');
  late final _cv_quality_QualityPSNR_getMaxPixelValue =
      _cv_quality_QualityPSNR_getMaxPixelValuePtr.asFunction<double Function(QualityPSNR)>();

  void cv_quality_QualityPSNR_setMaxPixelValue(
    QualityPSNR self,
    double maxPixelValue,
  ) {
    return _cv_quality_QualityPSNR_setMaxPixelValue(
      self,
      maxPixelValue,
    );
  }

  late final _cv_quality_QualityPSNR_setMaxPixelValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualityPSNR, ffi.Double)>>(
          'cv_quality_QualityPSNR_setMaxPixelValue');
  late final _cv_quality_QualityPSNR_setMaxPixelValue =
      _cv_quality_QualityPSNR_setMaxPixelValuePtr.asFunction<void Function(QualityPSNR, double)>();

  void cv_quality_QualitySSIM_close(
    QualitySSIMPtr self,
  ) {
    return _cv_quality_QualitySSIM_close(
      self,
    );
  }

  late final _cv_quality_QualitySSIM_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QualitySSIMPtr)>>('cv_quality_QualitySSIM_close');
  late final _cv_quality_QualitySSIM_close =
      _cv_quality_QualitySSIM_closePtr.asFunction<void Function(QualitySSIMPtr)>();

  ffi.Pointer<CvStatus> cv_quality_QualitySSIM_compute(
    QualitySSIM self,
    Mat cmp,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualitySSIM_compute(
      self,
      cmp,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualitySSIM_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              QualitySSIM, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_quality_QualitySSIM_compute');
  late final _cv_quality_QualitySSIM_compute = _cv_quality_QualitySSIM_computePtr
      .asFunction<ffi.Pointer<CvStatus> Function(QualitySSIM, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualitySSIM_compute_static(
    Mat ref,
    Mat cmp,
    Mat qualityMap,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualitySSIM_compute_static(
      ref,
      cmp,
      qualityMap,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualitySSIM_compute_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>,
              imp1.CvCallback_0)>>('cv_quality_QualitySSIM_compute_static');
  late final _cv_quality_QualitySSIM_compute_static = _cv_quality_QualitySSIM_compute_staticPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_quality_QualitySSIM_create(
    Mat ref,
    ffi.Pointer<QualitySSIM> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_quality_QualitySSIM_create(
      ref,
      rval,
      callback,
    );
  }

  late final _cv_quality_QualitySSIM_createPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualitySSIM>, imp1.CvCallback_0)>>(
      'cv_quality_QualitySSIM_create');
  late final _cv_quality_QualitySSIM_create = _cv_quality_QualitySSIM_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<QualitySSIM>, imp1.CvCallback_0)>();

  void cv_wechat_qrcode_WeChatQRCode_close(
    WeChatQRCodePtr self,
  ) {
    return _cv_wechat_qrcode_WeChatQRCode_close(
      self,
    );
  }

  late final _cv_wechat_qrcode_WeChatQRCode_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WeChatQRCodePtr)>>('cv_wechat_qrcode_WeChatQRCode_close');
  late final _cv_wechat_qrcode_WeChatQRCode_close =
      _cv_wechat_qrcode_WeChatQRCode_closePtr.asFunction<void Function(WeChatQRCodePtr)>();

  ffi.Pointer<CvStatus> cv_wechat_qrcode_WeChatQRCode_create(
    ffi.Pointer<WeChatQRCode> qrcode,
  ) {
    return _cv_wechat_qrcode_WeChatQRCode_create(
      qrcode,
    );
  }

  late final _cv_wechat_qrcode_WeChatQRCode_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>)>>(
          'cv_wechat_qrcode_WeChatQRCode_create');
  late final _cv_wechat_qrcode_WeChatQRCode_create = _cv_wechat_qrcode_WeChatQRCode_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>)>();

  ffi.Pointer<CvStatus> cv_wechat_qrcode_WeChatQRCode_create_1(
    ffi.Pointer<ffi.Char> detector_prototxt_path,
    ffi.Pointer<ffi.Char> detector_caffe_model_path,
    ffi.Pointer<ffi.Char> super_resolution_prototxt_path,
    ffi.Pointer<ffi.Char> super_resolution_caffe_model_path,
    ffi.Pointer<WeChatQRCode> qrcode,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_wechat_qrcode_WeChatQRCode_create_1(
      detector_prototxt_path,
      detector_caffe_model_path,
      super_resolution_prototxt_path,
      super_resolution_caffe_model_path,
      qrcode,
      callback,
    );
  }

  late final _cv_wechat_qrcode_WeChatQRCode_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<WeChatQRCode>,
              imp1.CvCallback_0)>>('cv_wechat_qrcode_WeChatQRCode_create_1');
  late final _cv_wechat_qrcode_WeChatQRCode_create_1 = _cv_wechat_qrcode_WeChatQRCode_create_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<WeChatQRCode>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_wechat_qrcode_WeChatQRCode_detectAndDecode(
    WeChatQRCode self,
    Mat img,
    ffi.Pointer<VecMat> out_points,
    ffi.Pointer<VecVecChar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_wechat_qrcode_WeChatQRCode_detectAndDecode(
      self,
      img,
      out_points,
      rval,
      callback,
    );
  }

  late final _cv_wechat_qrcode_WeChatQRCode_detectAndDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(WeChatQRCode, Mat, ffi.Pointer<VecMat>, ffi.Pointer<VecVecChar>,
              imp1.CvCallback_0)>>('cv_wechat_qrcode_WeChatQRCode_detectAndDecode');
  late final _cv_wechat_qrcode_WeChatQRCode_detectAndDecode =
      _cv_wechat_qrcode_WeChatQRCode_detectAndDecodePtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              WeChatQRCode, Mat, ffi.Pointer<VecMat>, ffi.Pointer<VecVecChar>, imp1.CvCallback_0)>();

  double cv_wechat_qrcode_WeChatQRCode_getScaleFactor(
    WeChatQRCode self,
  ) {
    return _cv_wechat_qrcode_WeChatQRCode_getScaleFactor(
      self,
    );
  }

  late final _cv_wechat_qrcode_WeChatQRCode_getScaleFactorPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(WeChatQRCode)>>(
          'cv_wechat_qrcode_WeChatQRCode_getScaleFactor');
  late final _cv_wechat_qrcode_WeChatQRCode_getScaleFactor =
      _cv_wechat_qrcode_WeChatQRCode_getScaleFactorPtr.asFunction<double Function(WeChatQRCode)>();

  void cv_wechat_qrcode_WeChatQRCode_setScaleFactor(
    WeChatQRCode self,
    double scale_factor,
  ) {
    return _cv_wechat_qrcode_WeChatQRCode_setScaleFactor(
      self,
      scale_factor,
    );
  }

  late final _cv_wechat_qrcode_WeChatQRCode_setScaleFactorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WeChatQRCode, ffi.Float)>>(
          'cv_wechat_qrcode_WeChatQRCode_setScaleFactor');
  late final _cv_wechat_qrcode_WeChatQRCode_setScaleFactor =
      _cv_wechat_qrcode_WeChatQRCode_setScaleFactorPtr.asFunction<void Function(WeChatQRCode, double)>();

  void cv_ximgproc_EdgeBoxes_close(
    EdgeBoxesPtr self,
  ) {
    return _cv_ximgproc_EdgeBoxes_close(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxesPtr)>>('cv_ximgproc_EdgeBoxes_close');
  late final _cv_ximgproc_EdgeBoxes_close =
      _cv_ximgproc_EdgeBoxes_closePtr.asFunction<void Function(EdgeBoxesPtr)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeBoxes_create(
    double alpha,
    double beta,
    double eta,
    double minScore,
    int maxBoxes,
    double edgeMinMag,
    double edgeMergeThr,
    double clusterMinMag,
    double maxAspectRatio,
    double minBoxArea,
    double gamma,
    double kappa,
    ffi.Pointer<EdgeBoxes> rval,
  ) {
    return _cv_ximgproc_EdgeBoxes_create(
      alpha,
      beta,
      eta,
      minScore,
      maxBoxes,
      edgeMinMag,
      edgeMergeThr,
      clusterMinMag,
      maxAspectRatio,
      minBoxArea,
      gamma,
      kappa,
      rval,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<EdgeBoxes>)>>('cv_ximgproc_EdgeBoxes_create');
  late final _cv_ximgproc_EdgeBoxes_create = _cv_ximgproc_EdgeBoxes_createPtr.asFunction<
      ffi.Pointer<CvStatus> Function(double, double, double, double, int, double, double, double, double,
          double, double, double, ffi.Pointer<EdgeBoxes>)>();

  double cv_ximgproc_EdgeBoxes_getAlpha(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getAlpha(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getAlphaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getAlpha');
  late final _cv_ximgproc_EdgeBoxes_getAlpha =
      _cv_ximgproc_EdgeBoxes_getAlphaPtr.asFunction<double Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getBeta(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getBeta(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getBetaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getBeta');
  late final _cv_ximgproc_EdgeBoxes_getBeta =
      _cv_ximgproc_EdgeBoxes_getBetaPtr.asFunction<double Function(EdgeBoxes)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeBoxes_getBoundingBoxes(
    EdgeBoxes self,
    Mat edge_map,
    Mat orientation_map,
    ffi.Pointer<VecRect> out_boxes,
    ffi.Pointer<VecF32> scores,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeBoxes_getBoundingBoxes(
      self,
      edge_map,
      orientation_map,
      out_boxes,
      scores,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getBoundingBoxesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeBoxes, Mat, Mat, ffi.Pointer<VecRect>, ffi.Pointer<VecF32>,
              imp1.CvCallback_0)>>('cv_ximgproc_EdgeBoxes_getBoundingBoxes');
  late final _cv_ximgproc_EdgeBoxes_getBoundingBoxes = _cv_ximgproc_EdgeBoxes_getBoundingBoxesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          EdgeBoxes, Mat, Mat, ffi.Pointer<VecRect>, ffi.Pointer<VecF32>, imp1.CvCallback_0)>();

  double cv_ximgproc_EdgeBoxes_getClusterMinMag(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getClusterMinMag(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getClusterMinMagPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getClusterMinMag');
  late final _cv_ximgproc_EdgeBoxes_getClusterMinMag =
      _cv_ximgproc_EdgeBoxes_getClusterMinMagPtr.asFunction<double Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getEdgeMergeThr(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getEdgeMergeThr(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getEdgeMergeThrPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getEdgeMergeThr');
  late final _cv_ximgproc_EdgeBoxes_getEdgeMergeThr =
      _cv_ximgproc_EdgeBoxes_getEdgeMergeThrPtr.asFunction<double Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getEdgeMinMag(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getEdgeMinMag(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getEdgeMinMagPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getEdgeMinMag');
  late final _cv_ximgproc_EdgeBoxes_getEdgeMinMag =
      _cv_ximgproc_EdgeBoxes_getEdgeMinMagPtr.asFunction<double Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getEta(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getEta(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getEtaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getEta');
  late final _cv_ximgproc_EdgeBoxes_getEta =
      _cv_ximgproc_EdgeBoxes_getEtaPtr.asFunction<double Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getGamma(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getGamma(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getGammaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getGamma');
  late final _cv_ximgproc_EdgeBoxes_getGamma =
      _cv_ximgproc_EdgeBoxes_getGammaPtr.asFunction<double Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getKappa(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getKappa(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getKappaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getKappa');
  late final _cv_ximgproc_EdgeBoxes_getKappa =
      _cv_ximgproc_EdgeBoxes_getKappaPtr.asFunction<double Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getMaxAspectRatio(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getMaxAspectRatio(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getMaxAspectRatioPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getMaxAspectRatio');
  late final _cv_ximgproc_EdgeBoxes_getMaxAspectRatio =
      _cv_ximgproc_EdgeBoxes_getMaxAspectRatioPtr.asFunction<double Function(EdgeBoxes)>();

  int cv_ximgproc_EdgeBoxes_getMaxBoxes(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getMaxBoxes(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getMaxBoxesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getMaxBoxes');
  late final _cv_ximgproc_EdgeBoxes_getMaxBoxes =
      _cv_ximgproc_EdgeBoxes_getMaxBoxesPtr.asFunction<int Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getMinBoxArea(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getMinBoxArea(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getMinBoxAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getMinBoxArea');
  late final _cv_ximgproc_EdgeBoxes_getMinBoxArea =
      _cv_ximgproc_EdgeBoxes_getMinBoxAreaPtr.asFunction<double Function(EdgeBoxes)>();

  double cv_ximgproc_EdgeBoxes_getMinScore(
    EdgeBoxes self,
  ) {
    return _cv_ximgproc_EdgeBoxes_getMinScore(
      self,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_getMinScorePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(EdgeBoxes)>>('cv_ximgproc_EdgeBoxes_getMinScore');
  late final _cv_ximgproc_EdgeBoxes_getMinScore =
      _cv_ximgproc_EdgeBoxes_getMinScorePtr.asFunction<double Function(EdgeBoxes)>();

  void cv_ximgproc_EdgeBoxes_setAlpha(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setAlpha(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setAlphaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>('cv_ximgproc_EdgeBoxes_setAlpha');
  late final _cv_ximgproc_EdgeBoxes_setAlpha =
      _cv_ximgproc_EdgeBoxes_setAlphaPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setBeta(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setBeta(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setBetaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>('cv_ximgproc_EdgeBoxes_setBeta');
  late final _cv_ximgproc_EdgeBoxes_setBeta =
      _cv_ximgproc_EdgeBoxes_setBetaPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setClusterMinMag(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setClusterMinMag(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setClusterMinMagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>(
          'cv_ximgproc_EdgeBoxes_setClusterMinMag');
  late final _cv_ximgproc_EdgeBoxes_setClusterMinMag =
      _cv_ximgproc_EdgeBoxes_setClusterMinMagPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setEdgeMergeThr(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setEdgeMergeThr(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setEdgeMergeThrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>(
          'cv_ximgproc_EdgeBoxes_setEdgeMergeThr');
  late final _cv_ximgproc_EdgeBoxes_setEdgeMergeThr =
      _cv_ximgproc_EdgeBoxes_setEdgeMergeThrPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setEdgeMinMag(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setEdgeMinMag(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setEdgeMinMagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>(
          'cv_ximgproc_EdgeBoxes_setEdgeMinMag');
  late final _cv_ximgproc_EdgeBoxes_setEdgeMinMag =
      _cv_ximgproc_EdgeBoxes_setEdgeMinMagPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setEta(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setEta(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setEtaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>('cv_ximgproc_EdgeBoxes_setEta');
  late final _cv_ximgproc_EdgeBoxes_setEta =
      _cv_ximgproc_EdgeBoxes_setEtaPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setGamma(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setGamma(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setGammaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>('cv_ximgproc_EdgeBoxes_setGamma');
  late final _cv_ximgproc_EdgeBoxes_setGamma =
      _cv_ximgproc_EdgeBoxes_setGammaPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setKappa(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setKappa(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setKappaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>('cv_ximgproc_EdgeBoxes_setKappa');
  late final _cv_ximgproc_EdgeBoxes_setKappa =
      _cv_ximgproc_EdgeBoxes_setKappaPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setMaxAspectRatio(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setMaxAspectRatio(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setMaxAspectRatioPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>(
          'cv_ximgproc_EdgeBoxes_setMaxAspectRatio');
  late final _cv_ximgproc_EdgeBoxes_setMaxAspectRatio =
      _cv_ximgproc_EdgeBoxes_setMaxAspectRatioPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setMaxBoxes(
    EdgeBoxes self,
    int value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setMaxBoxes(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setMaxBoxesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Int)>>('cv_ximgproc_EdgeBoxes_setMaxBoxes');
  late final _cv_ximgproc_EdgeBoxes_setMaxBoxes =
      _cv_ximgproc_EdgeBoxes_setMaxBoxesPtr.asFunction<void Function(EdgeBoxes, int)>();

  void cv_ximgproc_EdgeBoxes_setMinBoxArea(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setMinBoxArea(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setMinBoxAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>(
          'cv_ximgproc_EdgeBoxes_setMinBoxArea');
  late final _cv_ximgproc_EdgeBoxes_setMinBoxArea =
      _cv_ximgproc_EdgeBoxes_setMinBoxAreaPtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeBoxes_setMinScore(
    EdgeBoxes self,
    double value,
  ) {
    return _cv_ximgproc_EdgeBoxes_setMinScore(
      self,
      value,
    );
  }

  late final _cv_ximgproc_EdgeBoxes_setMinScorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeBoxes, ffi.Float)>>(
          'cv_ximgproc_EdgeBoxes_setMinScore');
  late final _cv_ximgproc_EdgeBoxes_setMinScore =
      _cv_ximgproc_EdgeBoxes_setMinScorePtr.asFunction<void Function(EdgeBoxes, double)>();

  void cv_ximgproc_EdgeDrawing_close(
    EdgeDrawingPtr self,
  ) {
    return _cv_ximgproc_EdgeDrawing_close(
      self,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeDrawingPtr)>>('cv_ximgproc_EdgeDrawing_close');
  late final _cv_ximgproc_EdgeDrawing_close =
      _cv_ximgproc_EdgeDrawing_closePtr.asFunction<void Function(EdgeDrawingPtr)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_create(
    ffi.Pointer<EdgeDrawing> rval,
  ) {
    return _cv_ximgproc_EdgeDrawing_create(
      rval,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<EdgeDrawing>)>>(
          'cv_ximgproc_EdgeDrawing_create');
  late final _cv_ximgproc_EdgeDrawing_create = _cv_ximgproc_EdgeDrawing_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<EdgeDrawing>)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_detectEdges(
    EdgeDrawing self,
    Mat src,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_detectEdges(
      self,
      src,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_detectEdgesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>>(
          'cv_ximgproc_EdgeDrawing_detectEdges');
  late final _cv_ximgproc_EdgeDrawing_detectEdges = _cv_ximgproc_EdgeDrawing_detectEdgesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_detectEllipses(
    EdgeDrawing self,
    Mat ellipses,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_detectEllipses(
      self,
      ellipses,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_detectEllipsesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>>(
          'cv_ximgproc_EdgeDrawing_detectEllipses');
  late final _cv_ximgproc_EdgeDrawing_detectEllipses = _cv_ximgproc_EdgeDrawing_detectEllipsesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_detectLines(
    EdgeDrawing self,
    Mat lines,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_detectLines(
      self,
      lines,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_detectLinesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>>(
          'cv_ximgproc_EdgeDrawing_detectLines');
  late final _cv_ximgproc_EdgeDrawing_detectLines = _cv_ximgproc_EdgeDrawing_detectLinesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getEdgeImage(
    EdgeDrawing self,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_getEdgeImage(
      self,
      dst,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_getEdgeImagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>>(
          'cv_ximgproc_EdgeDrawing_getEdgeImage');
  late final _cv_ximgproc_EdgeDrawing_getEdgeImage = _cv_ximgproc_EdgeDrawing_getEdgeImagePtr
      .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getGradientImage(
    EdgeDrawing self,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_getGradientImage(
      self,
      dst,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_getGradientImagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>>(
          'cv_ximgproc_EdgeDrawing_getGradientImage');
  late final _cv_ximgproc_EdgeDrawing_getGradientImage = _cv_ximgproc_EdgeDrawing_getGradientImagePtr
      .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getParams(
    EdgeDrawing self,
    ffi.Pointer<EdgeDrawingParams> params,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_getParams(
      self,
      params,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_getParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<EdgeDrawingParams>,
              imp1.CvCallback_0)>>('cv_ximgproc_EdgeDrawing_getParams');
  late final _cv_ximgproc_EdgeDrawing_getParams = _cv_ximgproc_EdgeDrawing_getParamsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<EdgeDrawingParams>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getSegmentIndicesOfLines(
    EdgeDrawing self,
    ffi.Pointer<VecI32> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_getSegmentIndicesOfLines(
      self,
      rval,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_getSegmentIndicesOfLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<VecI32>,
              imp1.CvCallback_0)>>('cv_ximgproc_EdgeDrawing_getSegmentIndicesOfLines');
  late final _cv_ximgproc_EdgeDrawing_getSegmentIndicesOfLines =
      _cv_ximgproc_EdgeDrawing_getSegmentIndicesOfLinesPtr
          .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<VecI32>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_getSegments(
    EdgeDrawing self,
    ffi.Pointer<VecVecPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_getSegments(
      self,
      rval,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_getSegmentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<VecVecPoint>,
              imp1.CvCallback_0)>>('cv_ximgproc_EdgeDrawing_getSegments');
  late final _cv_ximgproc_EdgeDrawing_getSegments = _cv_ximgproc_EdgeDrawing_getSegmentsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, ffi.Pointer<VecVecPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_EdgeDrawing_setParams(
    EdgeDrawing self,
    EdgeDrawingParams params,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_EdgeDrawing_setParams(
      self,
      params,
      callback,
    );
  }

  late final _cv_ximgproc_EdgeDrawing_setParamsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, EdgeDrawingParams, imp1.CvCallback_0)>>(
      'cv_ximgproc_EdgeDrawing_setParams');
  late final _cv_ximgproc_EdgeDrawing_setParams = _cv_ximgproc_EdgeDrawing_setParamsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(EdgeDrawing, EdgeDrawingParams, imp1.CvCallback_0)>();

  void cv_ximgproc_GraphSegmentation_close(
    GraphSegmentationPtr self,
  ) {
    return _cv_ximgproc_GraphSegmentation_close(
      self,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GraphSegmentationPtr)>>(
          'cv_ximgproc_GraphSegmentation_close');
  late final _cv_ximgproc_GraphSegmentation_close =
      _cv_ximgproc_GraphSegmentation_closePtr.asFunction<void Function(GraphSegmentationPtr)>();

  ffi.Pointer<CvStatus> cv_ximgproc_GraphSegmentation_create(
    double sigma,
    double k,
    int min_size,
    ffi.Pointer<GraphSegmentation> rval,
  ) {
    return _cv_ximgproc_GraphSegmentation_create(
      sigma,
      k,
      min_size,
      rval,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Float, ffi.Float, ffi.Int,
              ffi.Pointer<GraphSegmentation>)>>('cv_ximgproc_GraphSegmentation_create');
  late final _cv_ximgproc_GraphSegmentation_create = _cv_ximgproc_GraphSegmentation_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(double, double, int, ffi.Pointer<GraphSegmentation>)>();

  double cv_ximgproc_GraphSegmentation_getK(
    GraphSegmentation self,
  ) {
    return _cv_ximgproc_GraphSegmentation_getK(
      self,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_getKPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(GraphSegmentation)>>(
          'cv_ximgproc_GraphSegmentation_getK');
  late final _cv_ximgproc_GraphSegmentation_getK =
      _cv_ximgproc_GraphSegmentation_getKPtr.asFunction<double Function(GraphSegmentation)>();

  int cv_ximgproc_GraphSegmentation_getMinSize(
    GraphSegmentation self,
  ) {
    return _cv_ximgproc_GraphSegmentation_getMinSize(
      self,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_getMinSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(GraphSegmentation)>>(
          'cv_ximgproc_GraphSegmentation_getMinSize');
  late final _cv_ximgproc_GraphSegmentation_getMinSize =
      _cv_ximgproc_GraphSegmentation_getMinSizePtr.asFunction<int Function(GraphSegmentation)>();

  double cv_ximgproc_GraphSegmentation_getSigma(
    GraphSegmentation self,
  ) {
    return _cv_ximgproc_GraphSegmentation_getSigma(
      self,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_getSigmaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(GraphSegmentation)>>(
          'cv_ximgproc_GraphSegmentation_getSigma');
  late final _cv_ximgproc_GraphSegmentation_getSigma =
      _cv_ximgproc_GraphSegmentation_getSigmaPtr.asFunction<double Function(GraphSegmentation)>();

  ffi.Pointer<CvStatus> cv_ximgproc_GraphSegmentation_processImage(
    GraphSegmentation self,
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_GraphSegmentation_processImage(
      self,
      src,
      dst,
      callback,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_processImagePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GraphSegmentation, Mat, Mat, imp1.CvCallback_0)>>(
      'cv_ximgproc_GraphSegmentation_processImage');
  late final _cv_ximgproc_GraphSegmentation_processImage = _cv_ximgproc_GraphSegmentation_processImagePtr
      .asFunction<ffi.Pointer<CvStatus> Function(GraphSegmentation, Mat, Mat, imp1.CvCallback_0)>();

  void cv_ximgproc_GraphSegmentation_setK(
    GraphSegmentation self,
    double val,
  ) {
    return _cv_ximgproc_GraphSegmentation_setK(
      self,
      val,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_setKPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GraphSegmentation, ffi.Float)>>(
          'cv_ximgproc_GraphSegmentation_setK');
  late final _cv_ximgproc_GraphSegmentation_setK =
      _cv_ximgproc_GraphSegmentation_setKPtr.asFunction<void Function(GraphSegmentation, double)>();

  void cv_ximgproc_GraphSegmentation_setMinSize(
    GraphSegmentation self,
    int val,
  ) {
    return _cv_ximgproc_GraphSegmentation_setMinSize(
      self,
      val,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_setMinSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GraphSegmentation, ffi.Int)>>(
          'cv_ximgproc_GraphSegmentation_setMinSize');
  late final _cv_ximgproc_GraphSegmentation_setMinSize =
      _cv_ximgproc_GraphSegmentation_setMinSizePtr.asFunction<void Function(GraphSegmentation, int)>();

  void cv_ximgproc_GraphSegmentation_setSigma(
    GraphSegmentation self,
    double val,
  ) {
    return _cv_ximgproc_GraphSegmentation_setSigma(
      self,
      val,
    );
  }

  late final _cv_ximgproc_GraphSegmentation_setSigmaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GraphSegmentation, ffi.Double)>>(
          'cv_ximgproc_GraphSegmentation_setSigma');
  late final _cv_ximgproc_GraphSegmentation_setSigma =
      _cv_ximgproc_GraphSegmentation_setSigmaPtr.asFunction<void Function(GraphSegmentation, double)>();

  ffi.Pointer<CvStatus> cv_ximgproc_PeiLinNormalization(
    Mat I,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_PeiLinNormalization(
      I,
      dst,
      callback,
    );
  }

  late final _cv_ximgproc_PeiLinNormalizationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_ximgproc_PeiLinNormalization');
  late final _cv_ximgproc_PeiLinNormalization = _cv_ximgproc_PeiLinNormalizationPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_RFFeatureGetter_clear(
    RFFeatureGetter self,
  ) {
    return _cv_ximgproc_RFFeatureGetter_clear(
      self,
    );
  }

  late final _cv_ximgproc_RFFeatureGetter_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(RFFeatureGetter)>>(
          'cv_ximgproc_RFFeatureGetter_clear');
  late final _cv_ximgproc_RFFeatureGetter_clear =
      _cv_ximgproc_RFFeatureGetter_clearPtr.asFunction<ffi.Pointer<CvStatus> Function(RFFeatureGetter)>();

  void cv_ximgproc_RFFeatureGetter_close(
    RFFeatureGetterPtr self,
  ) {
    return _cv_ximgproc_RFFeatureGetter_close(
      self,
    );
  }

  late final _cv_ximgproc_RFFeatureGetter_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RFFeatureGetterPtr)>>('cv_ximgproc_RFFeatureGetter_close');
  late final _cv_ximgproc_RFFeatureGetter_close =
      _cv_ximgproc_RFFeatureGetter_closePtr.asFunction<void Function(RFFeatureGetterPtr)>();

  ffi.Pointer<CvStatus> cv_ximgproc_RFFeatureGetter_create(
    ffi.Pointer<RFFeatureGetter> rval,
  ) {
    return _cv_ximgproc_RFFeatureGetter_create(
      rval,
    );
  }

  late final _cv_ximgproc_RFFeatureGetter_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RFFeatureGetter>)>>(
          'cv_ximgproc_RFFeatureGetter_create');
  late final _cv_ximgproc_RFFeatureGetter_create = _cv_ximgproc_RFFeatureGetter_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RFFeatureGetter>)>();

  bool cv_ximgproc_RFFeatureGetter_empty(
    RFFeatureGetter self,
  ) {
    return _cv_ximgproc_RFFeatureGetter_empty(
      self,
    );
  }

  late final _cv_ximgproc_RFFeatureGetter_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RFFeatureGetter)>>('cv_ximgproc_RFFeatureGetter_empty');
  late final _cv_ximgproc_RFFeatureGetter_empty =
      _cv_ximgproc_RFFeatureGetter_emptyPtr.asFunction<bool Function(RFFeatureGetter)>();

  ffi.Pointer<CvStatus> cv_ximgproc_RFFeatureGetter_getFeatures(
    RFFeatureGetter self,
    Mat src,
    Mat features,
    int gnrmRad,
    int gsmthRad,
    int shrink,
    int outNum,
    int gradNum,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_RFFeatureGetter_getFeatures(
      self,
      src,
      features,
      gnrmRad,
      gsmthRad,
      shrink,
      outNum,
      gradNum,
      callback,
    );
  }

  late final _cv_ximgproc_RFFeatureGetter_getFeaturesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(RFFeatureGetter, Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, imp1.CvCallback_0)>>('cv_ximgproc_RFFeatureGetter_getFeatures');
  late final _cv_ximgproc_RFFeatureGetter_getFeatures =
      _cv_ximgproc_RFFeatureGetter_getFeaturesPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              RFFeatureGetter, Mat, Mat, int, int, int, int, int, imp1.CvCallback_0)>();

  void cv_ximgproc_StructuredEdgeDetection_close(
    StructuredEdgeDetectionPtr self,
  ) {
    return _cv_ximgproc_StructuredEdgeDetection_close(
      self,
    );
  }

  late final _cv_ximgproc_StructuredEdgeDetection_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(StructuredEdgeDetectionPtr)>>(
          'cv_ximgproc_StructuredEdgeDetection_close');
  late final _cv_ximgproc_StructuredEdgeDetection_close =
      _cv_ximgproc_StructuredEdgeDetection_closePtr.asFunction<void Function(StructuredEdgeDetectionPtr)>();

  ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_computeOrientation(
    StructuredEdgeDetection self,
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_StructuredEdgeDetection_computeOrientation(
      self,
      src,
      dst,
      callback,
    );
  }

  late final _cv_ximgproc_StructuredEdgeDetection_computeOrientationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat,
              imp1.CvCallback_0)>>('cv_ximgproc_StructuredEdgeDetection_computeOrientation');
  late final _cv_ximgproc_StructuredEdgeDetection_computeOrientation =
      _cv_ximgproc_StructuredEdgeDetection_computeOrientationPtr
          .asFunction<ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_create(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<StructuredEdgeDetection> rval,
  ) {
    return _cv_ximgproc_StructuredEdgeDetection_create(
      model,
      rval,
    );
  }

  late final _cv_ximgproc_StructuredEdgeDetection_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<StructuredEdgeDetection>)>>('cv_ximgproc_StructuredEdgeDetection_create');
  late final _cv_ximgproc_StructuredEdgeDetection_create =
      _cv_ximgproc_StructuredEdgeDetection_createPtr.asFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<StructuredEdgeDetection>)>();

  ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_create_1(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<RFFeatureGetter> howToGetFeatures,
    ffi.Pointer<StructuredEdgeDetection> rval,
  ) {
    return _cv_ximgproc_StructuredEdgeDetection_create_1(
      model,
      howToGetFeatures,
      rval,
    );
  }

  late final _cv_ximgproc_StructuredEdgeDetection_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<RFFeatureGetter>,
              ffi.Pointer<StructuredEdgeDetection>)>>('cv_ximgproc_StructuredEdgeDetection_create_1');
  late final _cv_ximgproc_StructuredEdgeDetection_create_1 =
      _cv_ximgproc_StructuredEdgeDetection_create_1Ptr.asFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<RFFeatureGetter>, ffi.Pointer<StructuredEdgeDetection>)>();

  ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_detectEdges(
    StructuredEdgeDetection self,
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_StructuredEdgeDetection_detectEdges(
      self,
      src,
      dst,
      callback,
    );
  }

  late final _cv_ximgproc_StructuredEdgeDetection_detectEdgesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat,
              imp1.CvCallback_0)>>('cv_ximgproc_StructuredEdgeDetection_detectEdges');
  late final _cv_ximgproc_StructuredEdgeDetection_detectEdges =
      _cv_ximgproc_StructuredEdgeDetection_detectEdgesPtr
          .asFunction<ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_StructuredEdgeDetection_edgesNms(
    StructuredEdgeDetection self,
    Mat edge_image,
    Mat orientation_image,
    Mat dst,
    int r,
    int s_,
    double m,
    bool isParallel,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_StructuredEdgeDetection_edgesNms(
      self,
      edge_image,
      orientation_image,
      dst,
      r,
      s_,
      m,
      isParallel,
      callback,
    );
  }

  late final _cv_ximgproc_StructuredEdgeDetection_edgesNmsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(StructuredEdgeDetection, Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Float,
              ffi.Bool, imp1.CvCallback_0)>>('cv_ximgproc_StructuredEdgeDetection_edgesNms');
  late final _cv_ximgproc_StructuredEdgeDetection_edgesNms =
      _cv_ximgproc_StructuredEdgeDetection_edgesNmsPtr.asFunction<
          ffi.Pointer<CvStatus> Function(
              StructuredEdgeDetection, Mat, Mat, Mat, int, int, double, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_anisotropicDiffusion(
    Mat src,
    Mat dst,
    double alpha,
    double K,
    int niters,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_anisotropicDiffusion(
      src,
      dst,
      alpha,
      K,
      niters,
      callback,
    );
  }

  late final _cv_ximgproc_anisotropicDiffusionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float, ffi.Int,
              imp1.CvCallback_0)>>('cv_ximgproc_anisotropicDiffusion');
  late final _cv_ximgproc_anisotropicDiffusion = _cv_ximgproc_anisotropicDiffusionPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_edgePreservingFilter(
    Mat src,
    Mat dst,
    int d,
    double threshold,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_edgePreservingFilter(
      src,
      dst,
      d,
      threshold,
      callback,
    );
  }

  late final _cv_ximgproc_edgePreservingFilterPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, imp1.CvCallback_0)>>(
      'cv_ximgproc_edgePreservingFilter');
  late final _cv_ximgproc_edgePreservingFilter = _cv_ximgproc_edgePreservingFilterPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_findEllipses(
    Mat image,
    Mat ellipses,
    double scoreThreshold,
    double reliabilityThreshold,
    double centerDistanceThreshold,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_findEllipses(
      image,
      ellipses,
      scoreThreshold,
      reliabilityThreshold,
      centerDistanceThreshold,
      callback,
    );
  }

  late final _cv_ximgproc_findEllipsesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Float, ffi.Float, ffi.Float, imp1.CvCallback_0)>>('cv_ximgproc_findEllipses');
  late final _cv_ximgproc_findEllipses = _cv_ximgproc_findEllipsesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_niBlackThreshold(
    Mat src,
    Mat dst,
    double maxValue,
    int type,
    int blockSize,
    double k,
    int binarizationMethod,
    double r,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_niBlackThreshold(
      src,
      dst,
      maxValue,
      type,
      blockSize,
      k,
      binarizationMethod,
      r,
      callback,
    );
  }

  late final _cv_ximgproc_niBlackThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Double, ffi.Int,
              ffi.Double, imp1.CvCallback_0)>>('cv_ximgproc_niBlackThreshold');
  late final _cv_ximgproc_niBlackThreshold = _cv_ximgproc_niBlackThresholdPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, int, int, double, int, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_rl_createRLEImage(
    VecPoint3i runs,
    Mat res,
    CvSize size,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_rl_createRLEImage(
      runs,
      res,
      size,
      callback,
    );
  }

  late final _cv_ximgproc_rl_createRLEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint3i, Mat, CvSize, imp1.CvCallback_0)>>(
          'cv_ximgproc_rl_createRLEImage');
  late final _cv_ximgproc_rl_createRLEImage = _cv_ximgproc_rl_createRLEImagePtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint3i, Mat, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_rl_dilate(
    Mat rlSrc,
    Mat rlDest,
    Mat rlKernel,
    CvPoint anchor,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_rl_dilate(
      rlSrc,
      rlDest,
      rlKernel,
      anchor,
      callback,
    );
  }

  late final _cv_ximgproc_rl_dilatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvPoint, imp1.CvCallback_0)>>(
          'cv_ximgproc_rl_dilate');
  late final _cv_ximgproc_rl_dilate = _cv_ximgproc_rl_dilatePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvPoint, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_rl_erode(
    Mat rlSrc,
    Mat rlDest,
    Mat rlKernel,
    bool bBoundaryOn,
    CvPoint anchor,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_rl_erode(
      rlSrc,
      rlDest,
      rlKernel,
      bBoundaryOn,
      anchor,
      callback,
    );
  }

  late final _cv_ximgproc_rl_erodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Bool, CvPoint, imp1.CvCallback_0)>>('cv_ximgproc_rl_erode');
  late final _cv_ximgproc_rl_erode = _cv_ximgproc_rl_erodePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, bool, CvPoint, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_rl_getStructuringElement(
    int shape,
    CvSize ksize,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_rl_getStructuringElement(
      shape,
      ksize,
      rval,
      callback,
    );
  }

  late final _cv_ximgproc_rl_getStructuringElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, CvSize, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_ximgproc_rl_getStructuringElement');
  late final _cv_ximgproc_rl_getStructuringElement = _cv_ximgproc_rl_getStructuringElementPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, CvSize, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  bool cv_ximgproc_rl_isRLMorphologyPossible(
    Mat rlStructuringElement,
  ) {
    return _cv_ximgproc_rl_isRLMorphologyPossible(
      rlStructuringElement,
    );
  }

  late final _cv_ximgproc_rl_isRLMorphologyPossiblePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('cv_ximgproc_rl_isRLMorphologyPossible');
  late final _cv_ximgproc_rl_isRLMorphologyPossible =
      _cv_ximgproc_rl_isRLMorphologyPossiblePtr.asFunction<bool Function(Mat)>();

  ffi.Pointer<CvStatus> cv_ximgproc_rl_morphologyEx(
    Mat rlSrc,
    Mat rlDest,
    int op,
    Mat rlKernel,
    bool bBoundaryOnForErosion,
    CvPoint anchor,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_rl_morphologyEx(
      rlSrc,
      rlDest,
      op,
      rlKernel,
      bBoundaryOnForErosion,
      anchor,
      callback,
    );
  }

  late final _cv_ximgproc_rl_morphologyExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, Mat, ffi.Bool, CvPoint, imp1.CvCallback_0)>>('cv_ximgproc_rl_morphologyEx');
  late final _cv_ximgproc_rl_morphologyEx = _cv_ximgproc_rl_morphologyExPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, Mat, bool, CvPoint, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_rl_paint(
    Mat image,
    Mat rlSrc,
    Scalar value,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_rl_paint(
      image,
      rlSrc,
      value,
      callback,
    );
  }

  late final _cv_ximgproc_rl_paintPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Scalar, imp1.CvCallback_0)>>(
          'cv_ximgproc_rl_paint');
  late final _cv_ximgproc_rl_paint = _cv_ximgproc_rl_paintPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_rl_threshold(
    Mat src,
    Mat rlDest,
    double thresh,
    int type,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_rl_threshold(
      src,
      rlDest,
      thresh,
      type,
      callback,
    );
  }

  late final _cv_ximgproc_rl_thresholdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int, imp1.CvCallback_0)>>(
      'cv_ximgproc_rl_threshold');
  late final _cv_ximgproc_rl_threshold = _cv_ximgproc_rl_thresholdPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ximgproc_thinning(
    Mat src,
    Mat dst,
    int thinningType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ximgproc_thinning(
      src,
      dst,
      thinningType,
      callback,
    );
  }

  late final _cv_ximgproc_thinningPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_ximgproc_thinning');
  late final _cv_ximgproc_thinning =
      _cv_ximgproc_thinningPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  void cv_xobjdetect_WBDetector_close(
    PtrWBDetectorPtr self,
  ) {
    return _cv_xobjdetect_WBDetector_close(
      self,
    );
  }

  late final _cv_xobjdetect_WBDetector_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PtrWBDetectorPtr)>>('cv_xobjdetect_WBDetector_close');
  late final _cv_xobjdetect_WBDetector_close =
      _cv_xobjdetect_WBDetector_closePtr.asFunction<void Function(PtrWBDetectorPtr)>();

  ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_create(
    ffi.Pointer<PtrWBDetector> rval,
  ) {
    return _cv_xobjdetect_WBDetector_create(
      rval,
    );
  }

  late final _cv_xobjdetect_WBDetector_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>)>>(
          'cv_xobjdetect_WBDetector_create');
  late final _cv_xobjdetect_WBDetector_create = _cv_xobjdetect_WBDetector_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<PtrWBDetector>)>();

  ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_detect(
    PtrWBDetector self,
    Mat img,
    ffi.Pointer<VecRect> out_bbox,
    ffi.Pointer<VecF64> confidences,
  ) {
    return _cv_xobjdetect_WBDetector_detect(
      self,
      img,
      out_bbox,
      confidences,
    );
  }

  late final _cv_xobjdetect_WBDetector_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(PtrWBDetector, Mat, ffi.Pointer<VecRect>,
              ffi.Pointer<VecF64>)>>('cv_xobjdetect_WBDetector_detect');
  late final _cv_xobjdetect_WBDetector_detect = _cv_xobjdetect_WBDetector_detectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(PtrWBDetector, Mat, ffi.Pointer<VecRect>, ffi.Pointer<VecF64>)>();

  ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_read(
    PtrWBDetector self,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _cv_xobjdetect_WBDetector_read(
      self,
      filename,
    );
  }

  late final _cv_xobjdetect_WBDetector_readPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(PtrWBDetector, ffi.Pointer<ffi.Char>)>>(
          'cv_xobjdetect_WBDetector_read');
  late final _cv_xobjdetect_WBDetector_read = _cv_xobjdetect_WBDetector_readPtr
      .asFunction<ffi.Pointer<CvStatus> Function(PtrWBDetector, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_train(
    PtrWBDetector self,
    ffi.Pointer<ffi.Char> pos_samples,
    ffi.Pointer<ffi.Char> neg_imgs,
  ) {
    return _cv_xobjdetect_WBDetector_train(
      self,
      pos_samples,
      neg_imgs,
    );
  }

  late final _cv_xobjdetect_WBDetector_trainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(PtrWBDetector, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('cv_xobjdetect_WBDetector_train');
  late final _cv_xobjdetect_WBDetector_train = _cv_xobjdetect_WBDetector_trainPtr.asFunction<
      ffi.Pointer<CvStatus> Function(PtrWBDetector, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CvStatus> cv_xobjdetect_WBDetector_write(
    PtrWBDetector self,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _cv_xobjdetect_WBDetector_write(
      self,
      filename,
    );
  }

  late final _cv_xobjdetect_WBDetector_writePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(PtrWBDetector, ffi.Pointer<ffi.Char>)>>(
          'cv_xobjdetect_WBDetector_write');
  late final _cv_xobjdetect_WBDetector_write = _cv_xobjdetect_WBDetector_writePtr
      .asFunction<ffi.Pointer<CvStatus> Function(PtrWBDetector, ffi.Pointer<ffi.Char>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeContrib _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDictionaryPtr)>> get cv_aruco_Dictionary_close =>
      _library._cv_aruco_Dictionary_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDetectorPtr)>> get cv_aruco_arucoDetector_close =>
      _library._cv_aruco_arucoDetector_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParamsPtr)>>
      get cv_aruco_detectorParameters_close => _library._cv_aruco_detectorParameters_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BlockMeanHashPtr)>> get cv_img_hash_BlockMeanHash_close =>
      _library._cv_img_hash_BlockMeanHash_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityBRISQUEPtr)>> get cv_quality_QualityBRISQUE_close =>
      _library._cv_quality_QualityBRISQUE_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityGMSDPtr)>> get cv_quality_QualityGMSD_close =>
      _library._cv_quality_QualityGMSD_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityMSEPtr)>> get cv_quality_QualityMSE_close =>
      _library._cv_quality_QualityMSE_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualityPSNRPtr)>> get cv_quality_QualityPSNR_close =>
      _library._cv_quality_QualityPSNR_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QualitySSIMPtr)>> get cv_quality_QualitySSIM_close =>
      _library._cv_quality_QualitySSIM_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(WeChatQRCodePtr)>>
      get cv_wechat_qrcode_WeChatQRCode_close => _library._cv_wechat_qrcode_WeChatQRCode_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EdgeBoxesPtr)>> get cv_ximgproc_EdgeBoxes_close =>
      _library._cv_ximgproc_EdgeBoxes_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EdgeDrawingPtr)>> get cv_ximgproc_EdgeDrawing_close =>
      _library._cv_ximgproc_EdgeDrawing_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GraphSegmentationPtr)>>
      get cv_ximgproc_GraphSegmentation_close => _library._cv_ximgproc_GraphSegmentation_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(RFFeatureGetterPtr)>>
      get cv_ximgproc_RFFeatureGetter_close => _library._cv_ximgproc_RFFeatureGetter_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(StructuredEdgeDetectionPtr)>>
      get cv_ximgproc_StructuredEdgeDetection_close => _library._cv_ximgproc_StructuredEdgeDetection_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PtrWBDetectorPtr)>> get cv_xobjdetect_WBDetector_close =>
      _library._cv_xobjdetect_WBDetector_closePtr;
}

final class ArucoDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class ArucoDetectorParams extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDetectorParamsPtr = ffi.Pointer<ArucoDetectorParams>;
typedef ArucoDetectorPtr = ffi.Pointer<ArucoDetector>;

final class ArucoDictionary extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDictionaryPtr = ffi.Pointer<ArucoDictionary>;

const int BLOCK_MEAN_HASH_MODE_0 = 0;

const int BLOCK_MEAN_HASH_MODE_1 = 1;

final class BlockMeanHash extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BlockMeanHashPtr = ffi.Pointer<BlockMeanHash>;

final class Box extends ffi.Struct {
  @ffi.Int()
  external int h;

  @ffi.Float()
  external double score;

  @ffi.Int()
  external int w;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

typedef CvPoint = imp1.CvPoint;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;

final class EdgeBoxes extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef EdgeBoxesPtr = ffi.Pointer<EdgeBoxes>;

final class EdgeDrawing extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

final class EdgeDrawingParams extends ffi.Struct {
  @ffi.Int()
  external int AnchorThresholdValue;

  @ffi.Int()
  external int EdgeDetectionOperator;

  @ffi.Int()
  external int GradientThresholdValue;

  @ffi.Double()
  external double LineFitErrorThreshold;

  @ffi.Double()
  external double MaxDistanceBetweenTwoLines;

  @ffi.Double()
  external double MaxErrorThreshold;

  @ffi.Int()
  external int MinLineLength;

  @ffi.Int()
  external int MinPathLength;

  @ffi.Bool()
  external bool NFAValidation;

  @ffi.Bool()
  external bool PFmode;

  @ffi.Int()
  external int ScanInterval;

  @ffi.Float()
  external double Sigma;

  @ffi.Bool()
  external bool SumFlag;
}

typedef EdgeDrawingPtr = ffi.Pointer<EdgeDrawing>;

final class GraphSegmentation extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef GraphSegmentationPtr = ffi.Pointer<GraphSegmentation>;
typedef Mat = imp1.Mat;

final class PtrWBDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef PtrWBDetectorPtr = ffi.Pointer<PtrWBDetector>;

final class QualityBRISQUE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityBRISQUEPtr = ffi.Pointer<QualityBRISQUE>;

final class QualityGMSD extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityGMSDPtr = ffi.Pointer<QualityGMSD>;

final class QualityMSE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityMSEPtr = ffi.Pointer<QualityMSE>;

final class QualityPSNR extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualityPSNRPtr = ffi.Pointer<QualityPSNR>;

final class QualitySSIM extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QualitySSIMPtr = ffi.Pointer<QualitySSIM>;

final class RFFeatureGetter extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef RFFeatureGetterPtr = ffi.Pointer<RFFeatureGetter>;
typedef Scalar = imp1.Scalar;

final class StructuredEdgeDetection extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef StructuredEdgeDetectionPtr = ffi.Pointer<StructuredEdgeDetection>;
typedef VecF32 = imp1.VecF32;
typedef VecF64 = imp1.VecF64;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint3i = imp1.VecPoint3i;
typedef VecRect = imp1.VecRect;
typedef VecVecChar = imp1.VecVecChar;
typedef VecVecPoint = imp1.VecVecPoint;
typedef VecVecPoint2f = imp1.VecVecPoint2f;

final class WeChatQRCode extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef WeChatQRCodePtr = ffi.Pointer<WeChatQRCode>;
