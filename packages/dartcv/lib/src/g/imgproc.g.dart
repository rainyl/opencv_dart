// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Imgproc
///
class CvNativeImgproc {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeImgproc(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeImgproc.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  ffi.Pointer<CvStatus> cv_CLAHE_apply(
    CLAHE self,
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_CLAHE_apply(
      self,
      src,
      dst,
      callback,
    );
  }

  late final _cv_CLAHE_applyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(CLAHE, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_CLAHE_apply');
  late final _cv_CLAHE_apply =
      _cv_CLAHE_applyPtr.asFunction<ffi.Pointer<CvStatus> Function(CLAHE, Mat, Mat, imp1.CvCallback_0)>();

  void cv_CLAHE_close(
    CLAHEPtr self,
  ) {
    return _cv_CLAHE_close(
      self,
    );
  }

  late final _cv_CLAHE_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(CLAHEPtr)>>('cv_CLAHE_close');
  late final _cv_CLAHE_close = _cv_CLAHE_closePtr.asFunction<void Function(CLAHEPtr)>();

  ffi.Pointer<CvStatus> cv_CLAHE_collectGarbage(
    CLAHE self,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_CLAHE_collectGarbage(
      self,
      callback,
    );
  }

  late final _cv_CLAHE_collectGarbagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(CLAHE, imp1.CvCallback_0)>>(
          'cv_CLAHE_collectGarbage');
  late final _cv_CLAHE_collectGarbage =
      _cv_CLAHE_collectGarbagePtr.asFunction<ffi.Pointer<CvStatus> Function(CLAHE, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_CLAHE_create(
    ffi.Pointer<CLAHE> rval,
  ) {
    return _cv_CLAHE_create(
      rval,
    );
  }

  late final _cv_CLAHE_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<CLAHE>)>>('cv_CLAHE_create');
  late final _cv_CLAHE_create =
      _cv_CLAHE_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<CLAHE>)>();

  ffi.Pointer<CvStatus> cv_CLAHE_create_1(
    double clipLimit,
    CvSize tileGridSize,
    ffi.Pointer<CLAHE> rval,
  ) {
    return _cv_CLAHE_create_1(
      clipLimit,
      tileGridSize,
      rval,
    );
  }

  late final _cv_CLAHE_create_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Double, CvSize, ffi.Pointer<CLAHE>)>>(
          'cv_CLAHE_create_1');
  late final _cv_CLAHE_create_1 =
      _cv_CLAHE_create_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(double, CvSize, ffi.Pointer<CLAHE>)>();

  double cv_CLAHE_getClipLimit(
    CLAHE self,
  ) {
    return _cv_CLAHE_getClipLimit(
      self,
    );
  }

  late final _cv_CLAHE_getClipLimitPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CLAHE)>>('cv_CLAHE_getClipLimit');
  late final _cv_CLAHE_getClipLimit = _cv_CLAHE_getClipLimitPtr.asFunction<double Function(CLAHE)>();

  ffi.Pointer<CvSize> cv_CLAHE_getTilesGridSize(
    CLAHE self,
  ) {
    return _cv_CLAHE_getTilesGridSize(
      self,
    );
  }

  late final _cv_CLAHE_getTilesGridSizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvSize> Function(CLAHE)>>('cv_CLAHE_getTilesGridSize');
  late final _cv_CLAHE_getTilesGridSize =
      _cv_CLAHE_getTilesGridSizePtr.asFunction<ffi.Pointer<CvSize> Function(CLAHE)>();

  void cv_CLAHE_setClipLimit(
    CLAHE self,
    double clipLimit,
  ) {
    return _cv_CLAHE_setClipLimit(
      self,
      clipLimit,
    );
  }

  late final _cv_CLAHE_setClipLimitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CLAHE, ffi.Double)>>('cv_CLAHE_setClipLimit');
  late final _cv_CLAHE_setClipLimit = _cv_CLAHE_setClipLimitPtr.asFunction<void Function(CLAHE, double)>();

  void cv_CLAHE_setTilesGridSize(
    CLAHE self,
    CvSize size,
  ) {
    return _cv_CLAHE_setTilesGridSize(
      self,
      size,
    );
  }

  late final _cv_CLAHE_setTilesGridSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CLAHE, CvSize)>>('cv_CLAHE_setTilesGridSize');
  late final _cv_CLAHE_setTilesGridSize =
      _cv_CLAHE_setTilesGridSizePtr.asFunction<void Function(CLAHE, CvSize)>();

  ffi.Pointer<CvStatus> cv_GaussianBlur(
    Mat src,
    Mat dst,
    CvSize ps,
    double sX,
    double sY,
    int bt,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_GaussianBlur(
      src,
      dst,
      ps,
      sX,
      sY,
      bt,
      callback,
    );
  }

  late final _cv_GaussianBlurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvSize, ffi.Double, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_GaussianBlur');
  late final _cv_GaussianBlur = _cv_GaussianBlurPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, double, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HoughCircles(
    Mat src,
    Mat circles,
    int method,
    double dp,
    double minDist,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HoughCircles(
      src,
      circles,
      method,
      dp,
      minDist,
      callback,
    );
  }

  late final _cv_HoughCirclesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Double, ffi.Double, imp1.CvCallback_0)>>('cv_HoughCircles');
  late final _cv_HoughCircles = _cv_HoughCirclesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HoughCircles_1(
    Mat src,
    Mat circles,
    int method,
    double dp,
    double minDist,
    double param1,
    double param2,
    int minRadius,
    int maxRadius,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HoughCircles_1(
      src,
      circles,
      method,
      dp,
      minDist,
      param1,
      param2,
      minRadius,
      maxRadius,
      callback,
    );
  }

  late final _cv_HoughCircles_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_HoughCircles_1');
  late final _cv_HoughCircles_1 = _cv_HoughCircles_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, double, double, double, double, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HoughLines(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
    double srn,
    double stn,
    double min_theta,
    double max_theta,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HoughLines(
      src,
      lines,
      rho,
      theta,
      threshold,
      srn,
      stn,
      min_theta,
      max_theta,
      callback,
    );
  }

  late final _cv_HoughLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, imp1.CvCallback_0)>>('cv_HoughLines');
  late final _cv_HoughLines = _cv_HoughLinesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, int, double, double, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HoughLinesP(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HoughLinesP(
      src,
      lines,
      rho,
      theta,
      threshold,
      callback,
    );
  }

  late final _cv_HoughLinesPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_HoughLinesP');
  late final _cv_HoughLinesP = _cv_HoughLinesPPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HoughLinesP_1(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
    double minLineLength,
    double maxLineGap,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HoughLinesP_1(
      src,
      lines,
      rho,
      theta,
      threshold,
      minLineLength,
      maxLineGap,
      callback,
    );
  }

  late final _cv_HoughLinesP_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Double, ffi.Double,
              imp1.CvCallback_0)>>('cv_HoughLinesP_1');
  late final _cv_HoughLinesP_1 = _cv_HoughLinesP_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, int, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_HoughLinesPointSet(
    Mat points,
    Mat lines,
    int lines_max,
    int threshold,
    double min_rho,
    double max_rho,
    double rho_step,
    double min_theta,
    double max_theta,
    double theta_step,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_HoughLinesPointSet(
      points,
      lines,
      lines_max,
      threshold,
      min_rho,
      max_rho,
      rho_step,
      min_theta,
      max_theta,
      theta_step,
      callback,
    );
  }

  late final _cv_HoughLinesPointSetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double, imp1.CvCallback_0)>>('cv_HoughLinesPointSet');
  late final _cv_HoughLinesPointSet = _cv_HoughLinesPointSetPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, int, int, double, double, double, double, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Laplacian(
    Mat src,
    Mat dst,
    int dDepth,
    int kSize,
    double scale,
    double delta,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Laplacian(
      src,
      dst,
      dDepth,
      kSize,
      scale,
      delta,
      borderType,
      callback,
    );
  }

  late final _cv_LaplacianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int,
              imp1.CvCallback_0)>>('cv_Laplacian');
  late final _cv_Laplacian = _cv_LaplacianPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, double, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Scharr(
    Mat src,
    Mat dst,
    int dDepth,
    int dx,
    int dy,
    double scale,
    double delta,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Scharr(
      src,
      dst,
      dDepth,
      dx,
      dy,
      scale,
      delta,
      borderType,
      callback,
    );
  }

  late final _cv_ScharrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int,
              imp1.CvCallback_0)>>('cv_Scharr');
  late final _cv_Scharr = _cv_ScharrPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, int, double, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Sobel(
    Mat src,
    Mat dst,
    int ddepth,
    int dx,
    int dy,
    int ksize,
    double scale,
    double delta,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Sobel(
      src,
      dst,
      ddepth,
      dx,
      dy,
      ksize,
      scale,
      delta,
      borderType,
      callback,
    );
  }

  late final _cv_SobelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Double, ffi.Double,
              ffi.Int, imp1.CvCallback_0)>>('cv_Sobel');
  late final _cv_Sobel = _cv_SobelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, int, int, double, double, int, imp1.CvCallback_0)>();

  void cv_Subdiv2D_close(
    Subdiv2DPtr self,
  ) {
    return _cv_Subdiv2D_close(
      self,
    );
  }

  late final _cv_Subdiv2D_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Subdiv2DPtr)>>('cv_Subdiv2D_close');
  late final _cv_Subdiv2D_close = _cv_Subdiv2D_closePtr.asFunction<void Function(Subdiv2DPtr)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_create(
    ffi.Pointer<Subdiv2D> rval,
  ) {
    return _cv_Subdiv2D_create(
      rval,
    );
  }

  late final _cv_Subdiv2D_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Subdiv2D>)>>(
          'cv_Subdiv2D_create');
  late final _cv_Subdiv2D_create =
      _cv_Subdiv2D_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Subdiv2D>)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_create_1(
    CvRect rect,
    ffi.Pointer<Subdiv2D> rval,
  ) {
    return _cv_Subdiv2D_create_1(
      rect,
      rval,
    );
  }

  late final _cv_Subdiv2D_create_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(CvRect, ffi.Pointer<Subdiv2D>)>>(
          'cv_Subdiv2D_create_1');
  late final _cv_Subdiv2D_create_1 =
      _cv_Subdiv2D_create_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(CvRect, ffi.Pointer<Subdiv2D>)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_edgeDst(
    Subdiv2D self,
    int edge,
    ffi.Pointer<CvPoint2f> dstpt,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_edgeDst(
      self,
      edge,
      dstpt,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_edgeDstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_Subdiv2D_edgeDst');
  late final _cv_Subdiv2D_edgeDst = _cv_Subdiv2D_edgeDstPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, int, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_edgeOrg(
    Subdiv2D self,
    int edge,
    ffi.Pointer<CvPoint2f> orgpt,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_edgeOrg(
      self,
      edge,
      orgpt,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_edgeOrgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_Subdiv2D_edgeOrg');
  late final _cv_Subdiv2D_edgeOrg = _cv_Subdiv2D_edgeOrgPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, int, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_findNearest(
    Subdiv2D self,
    CvPoint2f pt,
    ffi.Pointer<CvPoint2f> nearestPt,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_findNearest(
      self,
      pt,
      nearestPt,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_findNearestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_Subdiv2D_findNearest');
  late final _cv_Subdiv2D_findNearest = _cv_Subdiv2D_findNearestPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, CvPoint2f, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_getEdge(
    Subdiv2D self,
    int edge,
    int nextEdgeType,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_getEdge(
      self,
      edge,
      nextEdgeType,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_getEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>('cv_Subdiv2D_getEdge');
  late final _cv_Subdiv2D_getEdge = _cv_Subdiv2D_getEdgePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_getEdgeList(
    Subdiv2D self,
    ffi.Pointer<ffi.Pointer<Vec4f>> rval,
    ffi.Pointer<ffi.Size> size,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_getEdgeList(
      self,
      rval,
      size,
      callback,
    );
  }

  late final _cv_Subdiv2D_getEdgeListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<ffi.Pointer<Vec4f>>, ffi.Pointer<ffi.Size>,
              imp1.CvCallback_0)>>('cv_Subdiv2D_getEdgeList');
  late final _cv_Subdiv2D_getEdgeList = _cv_Subdiv2D_getEdgeListPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, ffi.Pointer<ffi.Pointer<Vec4f>>, ffi.Pointer<ffi.Size>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_getLeadingEdgeList(
    Subdiv2D self,
    ffi.Pointer<VecI32> leadingEdgeList,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_getLeadingEdgeList(
      self,
      leadingEdgeList,
      callback,
    );
  }

  late final _cv_Subdiv2D_getLeadingEdgeListPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<VecI32>, imp1.CvCallback_0)>>(
      'cv_Subdiv2D_getLeadingEdgeList');
  late final _cv_Subdiv2D_getLeadingEdgeList = _cv_Subdiv2D_getLeadingEdgeListPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<VecI32>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_getTriangleList(
    Subdiv2D self,
    ffi.Pointer<ffi.Pointer<Vec6f>> rval,
    ffi.Pointer<ffi.Size> size,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_getTriangleList(
      self,
      rval,
      size,
      callback,
    );
  }

  late final _cv_Subdiv2D_getTriangleListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<ffi.Pointer<Vec6f>>, ffi.Pointer<ffi.Size>,
              imp1.CvCallback_0)>>('cv_Subdiv2D_getTriangleList');
  late final _cv_Subdiv2D_getTriangleList = _cv_Subdiv2D_getTriangleListPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, ffi.Pointer<ffi.Pointer<Vec6f>>, ffi.Pointer<ffi.Size>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_getVertex(
    Subdiv2D self,
    int vertex,
    ffi.Pointer<ffi.Int> firstEdge,
    ffi.Pointer<CvPoint2f> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_getVertex(
      self,
      vertex,
      firstEdge,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_getVertexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<CvPoint2f>,
              imp1.CvCallback_0)>>('cv_Subdiv2D_getVertex');
  late final _cv_Subdiv2D_getVertex = _cv_Subdiv2D_getVertexPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, int, ffi.Pointer<ffi.Int>, ffi.Pointer<CvPoint2f>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_getVoronoiFacetList(
    Subdiv2D self,
    VecI32 idx,
    ffi.Pointer<VecVecPoint2f> facetList,
    ffi.Pointer<VecPoint2f> facetCenters,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_getVoronoiFacetList(
      self,
      idx,
      facetList,
      facetCenters,
      callback,
    );
  }

  late final _cv_Subdiv2D_getVoronoiFacetListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, VecI32, ffi.Pointer<VecVecPoint2f>,
              ffi.Pointer<VecPoint2f>, imp1.CvCallback_0)>>('cv_Subdiv2D_getVoronoiFacetList');
  late final _cv_Subdiv2D_getVoronoiFacetList = _cv_Subdiv2D_getVoronoiFacetListPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Subdiv2D, VecI32, ffi.Pointer<VecVecPoint2f>, ffi.Pointer<VecPoint2f>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_initDelaunay(
    Subdiv2D self,
    CvRect rect,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_initDelaunay(
      self,
      rect,
      callback,
    );
  }

  late final _cv_Subdiv2D_initDelaunayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, CvRect, imp1.CvCallback_0)>>(
          'cv_Subdiv2D_initDelaunay');
  late final _cv_Subdiv2D_initDelaunay = _cv_Subdiv2D_initDelaunayPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, CvRect, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_insert(
    Subdiv2D self,
    CvPoint2f pt,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_insert(
      self,
      pt,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>('cv_Subdiv2D_insert');
  late final _cv_Subdiv2D_insert = _cv_Subdiv2D_insertPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_insertVec(
    Subdiv2D self,
    VecPoint2f ptvec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_insertVec(
      self,
      ptvec,
      callback,
    );
  }

  late final _cv_Subdiv2D_insertVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, VecPoint2f, imp1.CvCallback_0)>>(
          'cv_Subdiv2D_insertVec');
  late final _cv_Subdiv2D_insertVec = _cv_Subdiv2D_insertVecPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, VecPoint2f, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_locate(
    Subdiv2D self,
    CvPoint2f pt,
    ffi.Pointer<ffi.Int> edge,
    ffi.Pointer<ffi.Int> vertex,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_locate(
      self,
      pt,
      edge,
      vertex,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_locatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>('cv_Subdiv2D_locate');
  late final _cv_Subdiv2D_locate = _cv_Subdiv2D_locatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, CvPoint2f, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_nextEdge(
    Subdiv2D self,
    int edge,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_nextEdge(
      self,
      edge,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_nextEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>('cv_Subdiv2D_nextEdge');
  late final _cv_Subdiv2D_nextEdge = _cv_Subdiv2D_nextEdgePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_rotateEdge(
    Subdiv2D self,
    int edge,
    int rotate,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_rotateEdge(
      self,
      edge,
      rotate,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_rotateEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_Subdiv2D_rotateEdge');
  late final _cv_Subdiv2D_rotateEdge = _cv_Subdiv2D_rotateEdgePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Subdiv2D, int, int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Subdiv2D_symEdge(
    Subdiv2D self,
    int edge,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Subdiv2D_symEdge(
      self,
      edge,
      rval,
      callback,
    );
  }

  late final _cv_Subdiv2D_symEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>('cv_Subdiv2D_symEdge');
  late final _cv_Subdiv2D_symEdge = _cv_Subdiv2D_symEdgePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Subdiv2D, int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_accumulate(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_accumulate(
      src,
      dst,
      callback,
    );
  }

  late final _cv_accumulatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_accumulate');
  late final _cv_accumulate =
      _cv_accumulatePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_accumulateProduct(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_accumulateProduct(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_accumulateProductPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_accumulateProduct');
  late final _cv_accumulateProduct =
      _cv_accumulateProductPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_accumulateProduct_1(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_accumulateProduct_1(
      src1,
      src2,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_accumulateProduct_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_accumulateProduct_1');
  late final _cv_accumulateProduct_1 = _cv_accumulateProduct_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_accumulateSquare(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_accumulateSquare(
      src,
      dst,
      callback,
    );
  }

  late final _cv_accumulateSquarePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_accumulateSquare');
  late final _cv_accumulateSquare =
      _cv_accumulateSquarePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_accumulateSquare_1(
    Mat src,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_accumulateSquare_1(
      src,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_accumulateSquare_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_accumulateSquare_1');
  late final _cv_accumulateSquare_1 = _cv_accumulateSquare_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_accumulate_1(
    Mat src,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_accumulate_1(
      src,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_accumulate_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_accumulate_1');
  late final _cv_accumulate_1 =
      _cv_accumulate_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_accumulatedWeighted(
    Mat src,
    Mat dst,
    double alpha,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_accumulatedWeighted(
      src,
      dst,
      alpha,
      callback,
    );
  }

  late final _cv_accumulatedWeightedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, imp1.CvCallback_0)>>(
          'cv_accumulatedWeighted');
  late final _cv_accumulatedWeighted = _cv_accumulatedWeightedPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_accumulatedWeighted_1(
    Mat src,
    Mat dst,
    double alpha,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_accumulatedWeighted_1(
      src,
      dst,
      alpha,
      mask,
      callback,
    );
  }

  late final _cv_accumulatedWeighted_1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat, imp1.CvCallback_0)>>(
      'cv_accumulatedWeighted_1');
  late final _cv_accumulatedWeighted_1 = _cv_accumulatedWeighted_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_adaptiveThreshold(
    Mat src,
    Mat dst,
    double maxValue,
    int adaptiveTyp,
    int typ,
    int blockSize,
    double c,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_adaptiveThreshold(
      src,
      dst,
      maxValue,
      adaptiveTyp,
      typ,
      blockSize,
      c,
      callback,
    );
  }

  late final _cv_adaptiveThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int, ffi.Double,
              imp1.CvCallback_0)>>('cv_adaptiveThreshold');
  late final _cv_adaptiveThreshold = _cv_adaptiveThresholdPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, int, int, int, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_applyColorMap(
    Mat src,
    Mat dst,
    int colormap,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_applyColorMap(
      src,
      dst,
      colormap,
      callback,
    );
  }

  late final _cv_applyColorMapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_applyColorMap');
  late final _cv_applyColorMap =
      _cv_applyColorMapPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_applyColorMap_1(
    Mat src,
    Mat dst,
    Mat colormap,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_applyColorMap_1(
      src,
      dst,
      colormap,
      callback,
    );
  }

  late final _cv_applyColorMap_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_applyColorMap_1');
  late final _cv_applyColorMap_1 =
      _cv_applyColorMap_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_approxPolyDP(
    VecPoint curve,
    double epsilon,
    bool closed,
    ffi.Pointer<VecPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_approxPolyDP(
      curve,
      epsilon,
      closed,
      rval,
      callback,
    );
  }

  late final _cv_approxPolyDPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Double, ffi.Bool, ffi.Pointer<VecPoint>, imp1.CvCallback_0)>>('cv_approxPolyDP');
  late final _cv_approxPolyDP = _cv_approxPolyDPPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, double, bool, ffi.Pointer<VecPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_arcLength(
    VecPoint curve,
    bool is_closed,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_arcLength(
      curve,
      is_closed,
      rval,
      callback,
    );
  }

  late final _cv_arcLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Bool, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_arcLength');
  late final _cv_arcLength = _cv_arcLengthPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, bool, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_arrowedLine(
    Mat img,
    CvPoint pt1,
    CvPoint pt2,
    Scalar color,
    int thickness,
    int line_type,
    int shift,
    double tipLength,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_arrowedLine(
      img,
      pt1,
      pt2,
      color,
      thickness,
      line_type,
      shift,
      tipLength,
      callback,
    );
  }

  late final _cv_arrowedLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Double,
              imp1.CvCallback_0)>>('cv_arrowedLine');
  late final _cv_arrowedLine = _cv_arrowedLinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, CvPoint, Scalar, int, int, int, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bilateralFilter(
    Mat src,
    Mat dst,
    int d,
    double sc,
    double ss,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bilateralFilter(
      src,
      dst,
      d,
      sc,
      ss,
      callback,
    );
  }

  late final _cv_bilateralFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Double, ffi.Double, imp1.CvCallback_0)>>('cv_bilateralFilter');
  late final _cv_bilateralFilter = _cv_bilateralFilterPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_blur(
    Mat src,
    Mat dst,
    CvSize ps,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_blur(
      src,
      dst,
      ps,
      callback,
    );
  }

  late final _cv_blurPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, imp1.CvCallback_0)>>(
          'cv_blur');
  late final _cv_blur =
      _cv_blurPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_boundingRect(
    VecPoint pts,
    ffi.Pointer<CvRect> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_boundingRect(
      pts,
      rval,
      callback,
    );
  }

  late final _cv_boundingRectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<CvRect>, imp1.CvCallback_0)>>(
      'cv_boundingRect');
  late final _cv_boundingRect = _cv_boundingRectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<CvRect>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_boxFilter(
    Mat src,
    Mat dst,
    int ddepth,
    CvSize ps,
    CvPoint anchor,
    bool normalize,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_boxFilter(
      src,
      dst,
      ddepth,
      ps,
      anchor,
      normalize,
      borderType,
      callback,
    );
  }

  late final _cv_boxFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, CvSize, CvPoint, ffi.Bool, ffi.Int, imp1.CvCallback_0)>>('cv_boxFilter');
  late final _cv_boxFilter = _cv_boxFilterPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, CvSize, CvPoint, bool, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_boxPoints(
    RotatedRect rect,
    ffi.Pointer<VecPoint2f> boxPts,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_boxPoints(
      rect,
      boxPts,
      callback,
    );
  }

  late final _cv_boxPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RotatedRect, ffi.Pointer<VecPoint2f>, imp1.CvCallback_0)>>('cv_boxPoints');
  late final _cv_boxPoints = _cv_boxPointsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_calcBackProject(
    VecMat mats,
    VecI32 chans,
    Mat hist,
    Mat backProject,
    VecF32 rng,
    double scale,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_calcBackProject(
      mats,
      chans,
      hist,
      backProject,
      rng,
      scale,
      callback,
    );
  }

  late final _cv_calcBackProjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat, VecI32, Mat, Mat, VecF32, ffi.Double, imp1.CvCallback_0)>>('cv_calcBackProject');
  late final _cv_calcBackProject = _cv_calcBackProjectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecMat, VecI32, Mat, Mat, VecF32, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_calcHist(
    VecMat mats,
    VecI32 chans,
    Mat mask,
    Mat hist,
    VecI32 sz,
    VecF32 rng,
    bool acc,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_calcHist(
      mats,
      chans,
      mask,
      hist,
      sz,
      rng,
      acc,
      callback,
    );
  }

  late final _cv_calcHistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecMat, VecI32, Mat, Mat, VecI32, VecF32, ffi.Bool, imp1.CvCallback_0)>>('cv_calcHist');
  late final _cv_calcHist = _cv_calcHistPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecMat, VecI32, Mat, Mat, VecI32, VecF32, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_canny(
    Mat src,
    Mat edges,
    double t1,
    double t2,
    int apertureSize,
    bool l2gradient,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_canny(
      src,
      edges,
      t1,
      t2,
      apertureSize,
      l2gradient,
      callback,
    );
  }

  late final _cv_cannyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Bool, imp1.CvCallback_0)>>('cv_canny');
  late final _cv_canny = _cv_cannyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_circle(
    Mat img,
    CvPoint center,
    int radius,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_circle(
      img,
      center,
      radius,
      color,
      thickness,
      callback,
    );
  }

  late final _cv_circlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvPoint, ffi.Int, Scalar, ffi.Int, imp1.CvCallback_0)>>('cv_circle');
  late final _cv_circle = _cv_circlePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, CvPoint, int, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_circle_1(
    Mat img,
    CvPoint center,
    int radius,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_circle_1(
      img,
      center,
      radius,
      color,
      thickness,
      lineType,
      shift,
      callback,
    );
  }

  late final _cv_circle_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvPoint, ffi.Int, Scalar, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_circle_1');
  late final _cv_circle_1 = _cv_circle_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvPoint, int, Scalar, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_clipLine(
    CvRect imgRect,
    CvPoint pt1,
    CvPoint pt2,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_clipLine(
      imgRect,
      pt1,
      pt2,
      rval,
      callback,
    );
  }

  late final _cv_clipLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CvRect, CvPoint, CvPoint, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>>('cv_clipLine');
  late final _cv_clipLine = _cv_clipLinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(CvRect, CvPoint, CvPoint, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_compareHist(
    Mat hist1,
    Mat hist2,
    int method,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_compareHist(
      hist1,
      hist2,
      method,
      rval,
      callback,
    );
  }

  late final _cv_compareHistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_compareHist');
  late final _cv_compareHist = _cv_compareHistPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_connectedComponents(
    Mat src,
    Mat dst,
    int connectivity,
    int ltype,
    int ccltype,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_connectedComponents(
      src,
      dst,
      connectivity,
      ltype,
      ccltype,
      rval,
      callback,
    );
  }

  late final _cv_connectedComponentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_connectedComponents');
  late final _cv_connectedComponents = _cv_connectedComponentsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_connectedComponents_1(
    Mat src,
    Mat labels,
    Mat stats,
    Mat centroids,
    int connectivity,
    int ltype,
    int ccltype,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_connectedComponents_1(
      src,
      labels,
      stats,
      centroids,
      connectivity,
      ltype,
      ccltype,
      rval,
      callback,
    );
  }

  late final _cv_connectedComponents_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>,
              imp1.CvCallback_0)>>('cv_connectedComponents_1');
  late final _cv_connectedComponents_1 = _cv_connectedComponents_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, Mat, int, int, int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_contourArea(
    VecPoint pts,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_contourArea(
      pts,
      rval,
      callback,
    );
  }

  late final _cv_contourAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_contourArea');
  late final _cv_contourArea = _cv_contourAreaPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_convexHull(
    VecPoint points,
    Mat hull,
    bool clockwise,
    bool returnPoints,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_convexHull(
      points,
      hull,
      clockwise,
      returnPoints,
      callback,
    );
  }

  late final _cv_convexHullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, Mat, ffi.Bool, ffi.Bool, imp1.CvCallback_0)>>('cv_convexHull');
  late final _cv_convexHull = _cv_convexHullPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint, Mat, bool, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_convexityDefects(
    VecPoint points,
    Mat hull,
    Mat result,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_convexityDefects(
      points,
      hull,
      result,
      callback,
    );
  }

  late final _cv_convexityDefectsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_convexityDefects');
  late final _cv_convexityDefects = _cv_convexityDefectsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_cornerSubPix(
    Mat img,
    VecPoint2f corners,
    CvSize winSize,
    CvSize zeroZone,
    TermCriteria criteria,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_cornerSubPix(
      img,
      corners,
      winSize,
      zeroZone,
      criteria,
      callback,
    );
  }

  late final _cv_cornerSubPixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecPoint2f, CvSize, CvSize, TermCriteria, imp1.CvCallback_0)>>('cv_cornerSubPix');
  late final _cv_cornerSubPix = _cv_cornerSubPixPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecPoint2f, CvSize, CvSize, TermCriteria, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_cvtColor(
    Mat src,
    Mat dst,
    int code,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_cvtColor(
      src,
      dst,
      code,
      callback,
    );
  }

  late final _cv_cvtColorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_cvtColor');
  late final _cv_cvtColor =
      _cv_cvtColorPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_dilate(
    Mat src,
    Mat dst,
    Mat kernel,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_dilate(
      src,
      dst,
      kernel,
      callback,
    );
  }

  late final _cv_dilatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_dilate');
  late final _cv_dilate =
      _cv_dilatePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_dilate_1(
    Mat src,
    Mat dst,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_dilate_1(
      src,
      dst,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
      callback,
    );
  }

  late final _cv_dilate_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, CvPoint, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_0)>>('cv_dilate_1');
  late final _cv_dilate_1 = _cv_dilate_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvPoint, int, int, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_distanceTransform(
    Mat src,
    Mat dst,
    Mat labels,
    int distanceType,
    int maskSize,
    int labelType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_distanceTransform(
      src,
      dst,
      labels,
      distanceType,
      maskSize,
      labelType,
      callback,
    );
  }

  late final _cv_distanceTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_distanceTransform');
  late final _cv_distanceTransform = _cv_distanceTransformPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_drawContours(
    Mat src,
    VecVecPoint contours,
    int contourIdx,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_drawContours(
      src,
      contours,
      contourIdx,
      color,
      thickness,
      callback,
    );
  }

  late final _cv_drawContoursPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int, imp1.CvCallback_0)>>('cv_drawContours');
  late final _cv_drawContours = _cv_drawContoursPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, int, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_drawContours_1(
    Mat src,
    VecVecPoint contours,
    int contourIdx,
    Scalar color,
    int thickness,
    int lineType,
    Mat hierarchy,
    int maxLevel,
    CvPoint offset,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_drawContours_1(
      src,
      contours,
      contourIdx,
      color,
      thickness,
      lineType,
      hierarchy,
      maxLevel,
      offset,
      callback,
    );
  }

  late final _cv_drawContours_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int, ffi.Int, Mat, ffi.Int,
              CvPoint, imp1.CvCallback_0)>>('cv_drawContours_1');
  late final _cv_drawContours_1 = _cv_drawContours_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, VecVecPoint, int, Scalar, int, int, Mat, int, CvPoint, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ellipse(
    Mat img,
    CvPoint center,
    CvPoint axes,
    double angle,
    double startAngle,
    double endAngle,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ellipse(
      img,
      center,
      axes,
      angle,
      startAngle,
      endAngle,
      color,
      thickness,
      callback,
    );
  }

  late final _cv_ellipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, ffi.Double, ffi.Double, ffi.Double, Scalar,
              ffi.Int, imp1.CvCallback_0)>>('cv_ellipse');
  late final _cv_ellipse = _cv_ellipsePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, CvPoint, double, double, double, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ellipse_1(
    Mat img,
    CvPoint center,
    CvPoint axes,
    double angle,
    double startAngle,
    double endAngle,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ellipse_1(
      img,
      center,
      axes,
      angle,
      startAngle,
      endAngle,
      color,
      thickness,
      lineType,
      shift,
      callback,
    );
  }

  late final _cv_ellipse_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, ffi.Double, ffi.Double, ffi.Double, Scalar,
              ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_ellipse_1');
  late final _cv_ellipse_1 = _cv_ellipse_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, CvPoint, CvPoint, double, double, double, Scalar, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_equalizeHist(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_equalizeHist(
      src,
      dst,
      callback,
    );
  }

  late final _cv_equalizeHistPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_equalizeHist');
  late final _cv_equalizeHist =
      _cv_equalizeHistPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_erode(
    Mat src,
    Mat dst,
    Mat kernel,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_erode(
      src,
      dst,
      kernel,
      callback,
    );
  }

  late final _cv_erodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_erode');
  late final _cv_erode =
      _cv_erodePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_erode_1(
    Mat src,
    Mat dst,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_erode_1(
      src,
      dst,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
      callback,
    );
  }

  late final _cv_erode_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, CvPoint, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_0)>>('cv_erode_1');
  late final _cv_erode_1 = _cv_erode_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvPoint, int, int, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fillPoly(
    Mat img,
    VecVecPoint points,
    Scalar color,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fillPoly(
      img,
      points,
      color,
      callback,
    );
  }

  late final _cv_fillPolyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar, imp1.CvCallback_0)>>(
      'cv_fillPoly');
  late final _cv_fillPoly = _cv_fillPolyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fillPoly_1(
    Mat img,
    VecVecPoint points,
    Scalar color,
    int lineType,
    int shift,
    CvPoint offset,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fillPoly_1(
      img,
      points,
      color,
      lineType,
      shift,
      offset,
      callback,
    );
  }

  late final _cv_fillPoly_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint, Scalar, ffi.Int, ffi.Int, CvPoint, imp1.CvCallback_0)>>('cv_fillPoly_1');
  late final _cv_fillPoly_1 = _cv_fillPoly_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar, int, int, CvPoint, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_filter2D(
    Mat src,
    Mat dst,
    int ddepth,
    Mat kernel,
    CvPoint anchor,
    double delta,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_filter2D(
      src,
      dst,
      ddepth,
      kernel,
      anchor,
      delta,
      borderType,
      callback,
    );
  }

  late final _cv_filter2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, Mat, CvPoint, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_filter2D');
  late final _cv_filter2D = _cv_filter2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, Mat, CvPoint, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_findContours(
    Mat src,
    ffi.Pointer<VecVecPoint> out_contours,
    ffi.Pointer<VecVec4i> out_hierarchy,
    int mode,
    int method,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_findContours(
      src,
      out_contours,
      out_hierarchy,
      mode,
      method,
      callback,
    );
  }

  late final _cv_findContoursPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecVecPoint>, ffi.Pointer<VecVec4i>, ffi.Int,
              ffi.Int, imp1.CvCallback_0)>>('cv_findContours');
  late final _cv_findContours = _cv_findContoursPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecVecPoint>, ffi.Pointer<VecVec4i>, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fitEllipse(
    VecPoint pts,
    ffi.Pointer<RotatedRect> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fitEllipse(
      pts,
      rval,
      callback,
    );
  }

  late final _cv_fitEllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Pointer<RotatedRect>, imp1.CvCallback_0)>>('cv_fitEllipse');
  late final _cv_fitEllipse = _cv_fitEllipsePtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<RotatedRect>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fitLine(
    VecPoint pts,
    Mat line,
    int distType,
    double param,
    double reps,
    double aeps,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fitLine(
      pts,
      line,
      distType,
      param,
      reps,
      aeps,
      callback,
    );
  }

  late final _cv_fitLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Double, imp1.CvCallback_0)>>('cv_fitLine');
  late final _cv_fitLine = _cv_fitLinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, Mat, int, double, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_floodFill(
    Mat src,
    Mat mask,
    CvPoint seedPoint,
    Scalar newVal,
    ffi.Pointer<CvRect> rect,
    Scalar loDiff,
    Scalar upDiff,
    int flags,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_floodFill(
      src,
      mask,
      seedPoint,
      newVal,
      rect,
      loDiff,
      upDiff,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_floodFillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint, Scalar, ffi.Pointer<CvRect>, Scalar, Scalar,
              ffi.Int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>('cv_floodFill');
  late final _cv_floodFill = _cv_floodFillPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint, Scalar, ffi.Pointer<CvRect>, Scalar, Scalar, int,
          ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getAffineTransform(
    VecPoint src,
    VecPoint dst,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getAffineTransform(
      src,
      dst,
      rval,
      callback,
    );
  }

  late final _cv_getAffineTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, VecPoint, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_getAffineTransform');
  late final _cv_getAffineTransform = _cv_getAffineTransformPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getAffineTransform2f(
    VecPoint2f src,
    VecPoint2f dst,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getAffineTransform2f(
      src,
      dst,
      rval,
      callback,
    );
  }

  late final _cv_getAffineTransform2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_getAffineTransform2f');
  late final _cv_getAffineTransform2f = _cv_getAffineTransform2fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getGaussianKernel(
    int ksize,
    double sigma,
    int ktype,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getGaussianKernel(
      ksize,
      sigma,
      ktype,
      rval,
      callback,
    );
  }

  late final _cv_getGaussianKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Double, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_getGaussianKernel');
  late final _cv_getGaussianKernel = _cv_getGaussianKernelPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, double, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getPerspectiveTransform(
    VecPoint src,
    VecPoint dst,
    ffi.Pointer<Mat> rval,
    int solveMethod,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getPerspectiveTransform(
      src,
      dst,
      rval,
      solveMethod,
      callback,
    );
  }

  late final _cv_getPerspectiveTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<Mat>, ffi.Int,
              imp1.CvCallback_0)>>('cv_getPerspectiveTransform');
  late final _cv_getPerspectiveTransform = _cv_getPerspectiveTransformPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<Mat>, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getPerspectiveTransform2f(
    VecPoint2f src,
    VecPoint2f dst,
    ffi.Pointer<Mat> rval,
    int solveMethod,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getPerspectiveTransform2f(
      src,
      dst,
      rval,
      solveMethod,
      callback,
    );
  }

  late final _cv_getPerspectiveTransform2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, ffi.Int,
              imp1.CvCallback_0)>>('cv_getPerspectiveTransform2f');
  late final _cv_getPerspectiveTransform2f = _cv_getPerspectiveTransform2fPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getRectSubPix(
    Mat src,
    CvSize patchSize,
    CvPoint2f center,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getRectSubPix(
      src,
      patchSize,
      center,
      dst,
      callback,
    );
  }

  late final _cv_getRectSubPixPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, CvSize, CvPoint2f, Mat, imp1.CvCallback_0)>>(
      'cv_getRectSubPix');
  late final _cv_getRectSubPix = _cv_getRectSubPixPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, CvSize, CvPoint2f, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getRotationMatrix2D(
    CvPoint2f center,
    double angle,
    double scale,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getRotationMatrix2D(
      center,
      angle,
      scale,
      rval,
      callback,
    );
  }

  late final _cv_getRotationMatrix2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(CvPoint2f, ffi.Double, ffi.Double, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_getRotationMatrix2D');
  late final _cv_getRotationMatrix2D = _cv_getRotationMatrix2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(CvPoint2f, double, double, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getStructuringElement(
    int shape,
    CvSize ksize,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getStructuringElement(
      shape,
      ksize,
      rval,
      callback,
    );
  }

  late final _cv_getStructuringElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, CvSize, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_getStructuringElement');
  late final _cv_getStructuringElement = _cv_getStructuringElementPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, CvSize, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_getTextSize(
    ffi.Pointer<ffi.Char> text,
    int fontFace,
    double fontScale,
    int thickness,
    ffi.Pointer<ffi.Int> baseline,
    ffi.Pointer<CvSize> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getTextSize(
      text,
      fontFace,
      fontScale,
      thickness,
      baseline,
      rval,
      callback,
    );
  }

  late final _cv_getTextSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<CvSize>, imp1.CvCallback_0)>>('cv_getTextSize');
  late final _cv_getTextSize = _cv_getTextSizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, double, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<CvSize>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_goodFeaturesToTrack(
    Mat img,
    ffi.Pointer<VecPoint2f> corners,
    int maxCorners,
    double quality,
    double minDist,
    Mat mask,
    int blockSize,
    bool useHarrisDetector,
    double k,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_goodFeaturesToTrack(
      img,
      corners,
      maxCorners,
      quality,
      minDist,
      mask,
      blockSize,
      useHarrisDetector,
      k,
      callback,
    );
  }

  late final _cv_goodFeaturesToTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, ffi.Int, ffi.Double, ffi.Double, Mat,
              ffi.Int, ffi.Bool, ffi.Double, imp1.CvCallback_0)>>('cv_goodFeaturesToTrack');
  late final _cv_goodFeaturesToTrack = _cv_goodFeaturesToTrackPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<VecPoint2f>, int, double, double, Mat, int, bool, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_goodFeaturesToTrack_1(
    Mat img,
    ffi.Pointer<VecPoint2f> corners,
    int maxCorners,
    double quality,
    double minDist,
    Mat mask,
    int blockSize,
    int gradientSize,
    bool useHarrisDetector,
    double k,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_goodFeaturesToTrack_1(
      img,
      corners,
      maxCorners,
      quality,
      minDist,
      mask,
      blockSize,
      gradientSize,
      useHarrisDetector,
      k,
      callback,
    );
  }

  late final _cv_goodFeaturesToTrack_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, ffi.Int, ffi.Double, ffi.Double, Mat,
              ffi.Int, ffi.Int, ffi.Bool, ffi.Double, imp1.CvCallback_0)>>('cv_goodFeaturesToTrack_1');
  late final _cv_goodFeaturesToTrack_1 = _cv_goodFeaturesToTrack_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, int, double, double, Mat, int, int, bool,
          double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_grabCut(
    Mat img,
    Mat mask,
    CvRect rect,
    Mat bgdModel,
    Mat fgdModel,
    int iterCount,
    int mode,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_grabCut(
      img,
      mask,
      rect,
      bgdModel,
      fgdModel,
      iterCount,
      mode,
      callback,
    );
  }

  late final _cv_grabCutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvRect, Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_grabCut');
  late final _cv_grabCut = _cv_grabCutPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvRect, Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_integral(
    Mat src,
    Mat sum,
    Mat sqsum,
    Mat tilted,
    int sdepth,
    int sqdepth,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_integral(
      src,
      sum,
      sqsum,
      tilted,
      sdepth,
      sqdepth,
      callback,
    );
  }

  late final _cv_integralPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_integral');
  late final _cv_integral = _cv_integralPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_intersectConvexConvex(
    VecPoint p1,
    VecPoint p2,
    ffi.Pointer<VecPoint> p12,
    bool handleNested,
    ffi.Pointer<ffi.Float> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_intersectConvexConvex(
      p1,
      p2,
      p12,
      handleNested,
      rval,
      callback,
    );
  }

  late final _cv_intersectConvexConvexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<VecPoint>, ffi.Bool,
              ffi.Pointer<ffi.Float>, imp1.CvCallback_0)>>('cv_intersectConvexConvex');
  late final _cv_intersectConvexConvex = _cv_intersectConvexConvexPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, VecPoint, ffi.Pointer<VecPoint>, bool, ffi.Pointer<ffi.Float>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_invertAffineTransform(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_invertAffineTransform(
      src,
      dst,
      callback,
    );
  }

  late final _cv_invertAffineTransformPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_invertAffineTransform');
  late final _cv_invertAffineTransform =
      _cv_invertAffineTransformPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  bool cv_isContourConvex(
    VecPoint contour,
  ) {
    return _cv_isContourConvex(
      contour,
    );
  }

  late final _cv_isContourConvexPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(VecPoint)>>('cv_isContourConvex');
  late final _cv_isContourConvex = _cv_isContourConvexPtr.asFunction<bool Function(VecPoint)>();

  ffi.Pointer<CvStatus> cv_line(
    Mat img,
    CvPoint pt1,
    CvPoint pt2,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_line(
      img,
      pt1,
      pt2,
      color,
      thickness,
      lineType,
      shift,
      callback,
    );
  }

  late final _cv_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvPoint, CvPoint, Scalar, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_line');
  late final _cv_line = _cv_linePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, CvPoint, CvPoint, Scalar, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_linearPolar(
    Mat src,
    Mat dst,
    CvPoint2f center,
    double maxRadius,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_linearPolar(
      src,
      dst,
      center,
      maxRadius,
      flags,
      callback,
    );
  }

  late final _cv_linearPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvPoint2f, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_linearPolar');
  late final _cv_linearPolar = _cv_linearPolarPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint2f, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_logPolar(
    Mat src,
    Mat dst,
    CvPoint2f center,
    double m,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_logPolar(
      src,
      dst,
      center,
      m,
      flags,
      callback,
    );
  }

  late final _cv_logPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvPoint2f, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_logPolar');
  late final _cv_logPolar = _cv_logPolarPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvPoint2f, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_matchShapes(
    VecPoint contour1,
    VecPoint contour2,
    int method,
    double parameter,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_matchShapes(
      contour1,
      contour2,
      method,
      parameter,
      rval,
      callback,
    );
  }

  late final _cv_matchShapesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Int, ffi.Double, ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_matchShapes');
  late final _cv_matchShapes = _cv_matchShapesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, VecPoint, int, double, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_matchTemplate(
    Mat image,
    Mat templ,
    Mat result,
    int method,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_matchTemplate(
      image,
      templ,
      result,
      method,
      mask,
      callback,
    );
  }

  late final _cv_matchTemplatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, Mat, imp1.CvCallback_0)>>(
      'cv_matchTemplate');
  late final _cv_matchTemplate = _cv_matchTemplatePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_medianBlur(
    Mat src,
    Mat dst,
    int ksize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_medianBlur(
      src,
      dst,
      ksize,
      callback,
    );
  }

  late final _cv_medianBlurPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_medianBlur');
  late final _cv_medianBlur =
      _cv_medianBlurPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_minAreaRect(
    VecPoint pts,
    ffi.Pointer<RotatedRect> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_minAreaRect(
      pts,
      rval,
      callback,
    );
  }

  late final _cv_minAreaRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, ffi.Pointer<RotatedRect>, imp1.CvCallback_0)>>('cv_minAreaRect');
  late final _cv_minAreaRect = _cv_minAreaRectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<RotatedRect>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_minEnclosingCircle(
    VecPoint pts,
    ffi.Pointer<CvPoint2f> center,
    ffi.Pointer<ffi.Float> radius,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_minEnclosingCircle(
      pts,
      center,
      radius,
      callback,
    );
  }

  late final _cv_minEnclosingCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Float>,
              imp1.CvCallback_0)>>('cv_minEnclosingCircle');
  late final _cv_minEnclosingCircle = _cv_minEnclosingCirclePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, ffi.Pointer<CvPoint2f>, ffi.Pointer<ffi.Float>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_moments(
    Mat src,
    bool binaryImage,
    ffi.Pointer<Moment> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_moments(
      src,
      binaryImage,
      rval,
      callback,
    );
  }

  late final _cv_momentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Bool, ffi.Pointer<Moment>, imp1.CvCallback_0)>>('cv_moments');
  late final _cv_moments = _cv_momentsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, bool, ffi.Pointer<Moment>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_morphologyDefaultBorderValue(
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_morphologyDefaultBorderValue(
      rval,
      callback,
    );
  }

  late final _cv_morphologyDefaultBorderValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Scalar>, imp1.CvCallback_0)>>(
          'cv_morphologyDefaultBorderValue');
  late final _cv_morphologyDefaultBorderValue = _cv_morphologyDefaultBorderValuePtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_morphologyEx(
    Mat src,
    Mat dst,
    int op,
    Mat kernel,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_morphologyEx(
      src,
      dst,
      op,
      kernel,
      callback,
    );
  }

  late final _cv_morphologyExPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, imp1.CvCallback_0)>>(
          'cv_morphologyEx');
  late final _cv_morphologyEx =
      _cv_morphologyExPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_morphologyEx_1(
    Mat src,
    Mat dst,
    int op,
    Mat kernel,
    CvPoint pt,
    int iterations,
    int borderType,
    Scalar borderValue,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_morphologyEx_1(
      src,
      dst,
      op,
      kernel,
      pt,
      iterations,
      borderType,
      borderValue,
      callback,
    );
  }

  late final _cv_morphologyEx_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, CvPoint, ffi.Int, ffi.Int, Scalar,
              imp1.CvCallback_0)>>('cv_morphologyEx_1');
  late final _cv_morphologyEx_1 = _cv_morphologyEx_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, Mat, CvPoint, int, int, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_phaseCorrelate(
    Mat src1,
    Mat src2,
    Mat window,
    ffi.Pointer<ffi.Double> response,
    ffi.Pointer<CvPoint2f> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_phaseCorrelate(
      src1,
      src2,
      window,
      response,
      rval,
      callback,
    );
  }

  late final _cv_phaseCorrelatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<CvPoint2f>,
              imp1.CvCallback_0)>>('cv_phaseCorrelate');
  late final _cv_phaseCorrelate = _cv_phaseCorrelatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<CvPoint2f>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_pointPolygonTest(
    VecPoint pts,
    CvPoint2f pt,
    bool measureDist,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_pointPolygonTest(
      pts,
      pt,
      measureDist,
      rval,
      callback,
    );
  }

  late final _cv_pointPolygonTestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint, CvPoint2f, ffi.Bool, ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_pointPolygonTest');
  late final _cv_pointPolygonTest = _cv_pointPolygonTestPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint, CvPoint2f, bool, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_polylines(
    Mat img,
    VecVecPoint points,
    bool isClosed,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_polylines(
      img,
      points,
      isClosed,
      color,
      thickness,
      callback,
    );
  }

  late final _cv_polylinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecVecPoint, ffi.Bool, Scalar, ffi.Int, imp1.CvCallback_0)>>('cv_polylines');
  late final _cv_polylines = _cv_polylinesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, bool, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_putText(
    Mat img,
    ffi.Pointer<ffi.Char> text,
    CvPoint org,
    int fontFace,
    double fontScale,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_putText(
      img,
      text,
      org,
      fontFace,
      fontScale,
      color,
      thickness,
      callback,
    );
  }

  late final _cv_putTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, CvPoint, ffi.Int, ffi.Double, Scalar,
              ffi.Int, imp1.CvCallback_0)>>('cv_putText');
  late final _cv_putText = _cv_putTextPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<ffi.Char>, CvPoint, int, double, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_putText_1(
    Mat img,
    ffi.Pointer<ffi.Char> text,
    CvPoint org,
    int fontFace,
    double fontScale,
    Scalar color,
    int thickness,
    int lineType,
    bool bottomLeftOrigin,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_putText_1(
      img,
      text,
      org,
      fontFace,
      fontScale,
      color,
      thickness,
      lineType,
      bottomLeftOrigin,
      callback,
    );
  }

  late final _cv_putText_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, CvPoint, ffi.Int, ffi.Double, Scalar,
              ffi.Int, ffi.Int, ffi.Bool, imp1.CvCallback_0)>>('cv_putText_1');
  late final _cv_putText_1 = _cv_putText_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<ffi.Char>, CvPoint, int, double, Scalar, int, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_pyrDown(
    Mat src,
    Mat dst,
    CvSize dstsize,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_pyrDown(
      src,
      dst,
      dstsize,
      borderType,
      callback,
    );
  }

  late final _cv_pyrDownPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Int, imp1.CvCallback_0)>>(
      'cv_pyrDown');
  late final _cv_pyrDown =
      _cv_pyrDownPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_pyrUp(
    Mat src,
    Mat dst,
    CvSize dstsize,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_pyrUp(
      src,
      dst,
      dstsize,
      borderType,
      callback,
    );
  }

  late final _cv_pyrUpPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, ffi.Int, imp1.CvCallback_0)>>(
      'cv_pyrUp');
  late final _cv_pyrUp =
      _cv_pyrUpPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_rectangle(
    Mat img,
    CvRect rect,
    Scalar color,
    int thickness,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_rectangle(
      img,
      rect,
      color,
      thickness,
      callback,
    );
  }

  late final _cv_rectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvRect, Scalar, ffi.Int, imp1.CvCallback_0)>>('cv_rectangle');
  late final _cv_rectangle = _cv_rectanglePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, CvRect, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_rectangle_1(
    Mat img,
    CvRect rect,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_rectangle_1(
      img,
      rect,
      color,
      thickness,
      lineType,
      shift,
      callback,
    );
  }

  late final _cv_rectangle_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, CvRect, Scalar, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_rectangle_1');
  late final _cv_rectangle_1 = _cv_rectangle_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, CvRect, Scalar, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_remap(
    Mat src,
    Mat dst,
    Mat map1,
    Mat map2,
    int interpolation,
    int borderMode,
    Scalar borderValue,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_remap(
      src,
      dst,
      map1,
      map2,
      interpolation,
      borderMode,
      borderValue,
      callback,
    );
  }

  late final _cv_remapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_0)>>('cv_remap');
  late final _cv_remap = _cv_remapPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, int, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_resize(
    Mat src,
    Mat dst,
    CvSize sz,
    double fx,
    double fy,
    int interp,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_resize(
      src,
      dst,
      sz,
      fx,
      fy,
      interp,
      callback,
    );
  }

  late final _cv_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, CvSize, ffi.Double, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_resize');
  late final _cv_resize = _cv_resizePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, CvSize, double, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sepFilter2D(
    Mat src,
    Mat dst,
    int ddepth,
    Mat kernelX,
    Mat kernelY,
    CvPoint anchor,
    double delta,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sepFilter2D(
      src,
      dst,
      ddepth,
      kernelX,
      kernelY,
      anchor,
      delta,
      borderType,
      callback,
    );
  }

  late final _cv_sepFilter2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, Mat, CvPoint, ffi.Double, ffi.Int,
              imp1.CvCallback_0)>>('cv_sepFilter2D');
  late final _cv_sepFilter2D = _cv_sepFilter2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, Mat, Mat, CvPoint, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_spatialGradient(
    Mat src,
    Mat dx,
    Mat dy,
    int ksize,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_spatialGradient(
      src,
      dx,
      dy,
      ksize,
      borderType,
      callback,
    );
  }

  late final _cv_spatialGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_spatialGradient');
  late final _cv_spatialGradient = _cv_spatialGradientPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sqrBoxFilter(
    Mat src,
    Mat dst,
    int ddepth,
    CvSize ps,
    CvPoint anchor,
    bool normalize,
    int borderType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sqrBoxFilter(
      src,
      dst,
      ddepth,
      ps,
      anchor,
      normalize,
      borderType,
      callback,
    );
  }

  late final _cv_sqrBoxFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, CvSize, CvPoint, ffi.Bool, ffi.Int, imp1.CvCallback_0)>>('cv_sqrBoxFilter');
  late final _cv_sqrBoxFilter = _cv_sqrBoxFilterPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, CvSize, CvPoint, bool, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_threshold(
    Mat src,
    Mat dst,
    double thresh,
    double maxvalue,
    int typ,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_threshold(
      src,
      dst,
      thresh,
      maxvalue,
      typ,
      rval,
      callback,
    );
  }

  late final _cv_thresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Pointer<ffi.Double>,
              imp1.CvCallback_0)>>('cv_threshold');
  late final _cv_threshold = _cv_thresholdPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, double, double, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_warpAffine(
    Mat src,
    Mat dst,
    Mat rot_mat,
    CvSize dsize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_warpAffine(
      src,
      dst,
      rot_mat,
      dsize,
      callback,
    );
  }

  late final _cv_warpAffinePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, imp1.CvCallback_0)>>(
          'cv_warpAffine');
  late final _cv_warpAffine = _cv_warpAffinePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_warpAffine_1(
    Mat src,
    Mat dst,
    Mat rot_mat,
    CvSize dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_warpAffine_1(
      src,
      dst,
      rot_mat,
      dsize,
      flags,
      borderMode,
      borderValue,
      callback,
    );
  }

  late final _cv_warpAffine_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, CvSize, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_0)>>('cv_warpAffine_1');
  late final _cv_warpAffine_1 = _cv_warpAffine_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, int, int, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_warpPerspective(
    Mat src,
    Mat dst,
    Mat m,
    CvSize dsize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_warpPerspective(
      src,
      dst,
      m,
      dsize,
      callback,
    );
  }

  late final _cv_warpPerspectivePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, imp1.CvCallback_0)>>(
          'cv_warpPerspective');
  late final _cv_warpPerspective = _cv_warpPerspectivePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_warpPerspective_1(
    Mat src,
    Mat dst,
    Mat rot_mat,
    CvSize dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_warpPerspective_1(
      src,
      dst,
      rot_mat,
      dsize,
      flags,
      borderMode,
      borderValue,
      callback,
    );
  }

  late final _cv_warpPerspective_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, CvSize, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_0)>>('cv_warpPerspective_1');
  late final _cv_warpPerspective_1 = _cv_warpPerspective_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvSize, int, int, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_watershed(
    Mat image,
    Mat markers,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_watershed(
      image,
      markers,
      callback,
    );
  }

  late final _cv_watershedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_watershed');
  late final _cv_watershed =
      _cv_watershedPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeImgproc _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CLAHEPtr)>> get cv_CLAHE_close =>
      _library._cv_CLAHE_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Subdiv2DPtr)>> get cv_Subdiv2D_close =>
      _library._cv_Subdiv2D_closePtr;
}

final class CLAHE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CLAHEPtr = ffi.Pointer<CLAHE>;
typedef CvPoint = imp1.CvPoint;
typedef CvPoint2f = imp1.CvPoint2f;
typedef CvRect = imp1.CvRect;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef Moment = imp1.Moment;
typedef RotatedRect = imp1.RotatedRect;
typedef Scalar = imp1.Scalar;

final class Subdiv2D extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef Subdiv2DPtr = ffi.Pointer<Subdiv2D>;
typedef TermCriteria = imp1.TermCriteria;
typedef Vec4f = imp1.Vec4f;
typedef Vec6f = imp1.Vec6f;
typedef VecF32 = imp1.VecF32;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecVec4i = imp1.VecVec4i;
typedef VecVecPoint = imp1.VecVecPoint;
typedef VecVecPoint2f = imp1.VecVecPoint2f;
