// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - features2d
///
class CvNativeFeatures2d {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeFeatures2d(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeFeatures2d.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void cv_AKAZE_close(
    AKAZEPtr self,
  ) {
    return _cv_AKAZE_close(
      self,
    );
  }

  late final _cv_AKAZE_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(AKAZEPtr)>>('cv_AKAZE_close');
  late final _cv_AKAZE_close = _cv_AKAZE_closePtr.asFunction<void Function(AKAZEPtr)>();

  ffi.Pointer<CvStatus> cv_AKAZE_create(
    ffi.Pointer<AKAZE> rval,
  ) {
    return _cv_AKAZE_create(
      rval,
    );
  }

  late final _cv_AKAZE_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<AKAZE>)>>('cv_AKAZE_create');
  late final _cv_AKAZE_create =
      _cv_AKAZE_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<AKAZE>)>();

  ffi.Pointer<CvStatus> cv_AKAZE_detect(
    AKAZE self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_AKAZE_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_AKAZE_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              AKAZE, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_AKAZE_detect');
  late final _cv_AKAZE_detect = _cv_AKAZE_detectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(AKAZE, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_AKAZE_detectAndCompute(
    AKAZE self,
    Mat src,
    Mat mask,
    Mat desc,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_AKAZE_detectAndCompute(
      self,
      src,
      mask,
      desc,
      rval,
      callback,
    );
  }

  late final _cv_AKAZE_detectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(AKAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>,
              imp1.CvCallback_0)>>('cv_AKAZE_detectAndCompute');
  late final _cv_AKAZE_detectAndCompute = _cv_AKAZE_detectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(AKAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  void cv_AgastFeatureDetector_close(
    AgastFeatureDetectorPtr self,
  ) {
    return _cv_AgastFeatureDetector_close(
      self,
    );
  }

  late final _cv_AgastFeatureDetector_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AgastFeatureDetectorPtr)>>(
          'cv_AgastFeatureDetector_close');
  late final _cv_AgastFeatureDetector_close =
      _cv_AgastFeatureDetector_closePtr.asFunction<void Function(AgastFeatureDetectorPtr)>();

  ffi.Pointer<CvStatus> cv_AgastFeatureDetector_create(
    ffi.Pointer<AgastFeatureDetector> rval,
  ) {
    return _cv_AgastFeatureDetector_create(
      rval,
    );
  }

  late final _cv_AgastFeatureDetector_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<AgastFeatureDetector>)>>(
          'cv_AgastFeatureDetector_create');
  late final _cv_AgastFeatureDetector_create = _cv_AgastFeatureDetector_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<AgastFeatureDetector>)>();

  ffi.Pointer<CvStatus> cv_AgastFeatureDetector_detect(
    AgastFeatureDetector self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_AgastFeatureDetector_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_AgastFeatureDetector_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(AgastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>,
              imp1.CvCallback_0)>>('cv_AgastFeatureDetector_detect');
  late final _cv_AgastFeatureDetector_detect = _cv_AgastFeatureDetector_detectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          AgastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  void cv_BFMatcher_close(
    BFMatcherPtr self,
  ) {
    return _cv_BFMatcher_close(
      self,
    );
  }

  late final _cv_BFMatcher_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BFMatcherPtr)>>('cv_BFMatcher_close');
  late final _cv_BFMatcher_close = _cv_BFMatcher_closePtr.asFunction<void Function(BFMatcherPtr)>();

  ffi.Pointer<CvStatus> cv_BFMatcher_create(
    ffi.Pointer<BFMatcher> rval,
  ) {
    return _cv_BFMatcher_create(
      rval,
    );
  }

  late final _cv_BFMatcher_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<BFMatcher>)>>(
          'cv_BFMatcher_create');
  late final _cv_BFMatcher_create =
      _cv_BFMatcher_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<BFMatcher>)>();

  ffi.Pointer<CvStatus> cv_BFMatcher_create_1(
    int normType,
    bool crossCheck,
    ffi.Pointer<BFMatcher> rval,
  ) {
    return _cv_BFMatcher_create_1(
      normType,
      crossCheck,
      rval,
    );
  }

  late final _cv_BFMatcher_create_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool, ffi.Pointer<BFMatcher>)>>(
          'cv_BFMatcher_create_1');
  late final _cv_BFMatcher_create_1 = _cv_BFMatcher_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(int, bool, ffi.Pointer<BFMatcher>)>();

  ffi.Pointer<CvStatus> cv_BFMatcher_knnMatch(
    BFMatcher self,
    Mat query,
    Mat train,
    int k,
    ffi.Pointer<VecVecDMatch> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_BFMatcher_knnMatch(
      self,
      query,
      train,
      k,
      rval,
      callback,
    );
  }

  late final _cv_BFMatcher_knnMatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BFMatcher, Mat, Mat, ffi.Int, ffi.Pointer<VecVecDMatch>,
              imp1.CvCallback_0)>>('cv_BFMatcher_knnMatch');
  late final _cv_BFMatcher_knnMatch = _cv_BFMatcher_knnMatchPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          BFMatcher, Mat, Mat, int, ffi.Pointer<VecVecDMatch>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_BFMatcher_match(
    BFMatcher self,
    Mat query,
    Mat train,
    ffi.Pointer<VecDMatch> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_BFMatcher_match(
      self,
      query,
      train,
      rval,
      callback,
    );
  }

  late final _cv_BFMatcher_matchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BFMatcher, Mat, Mat, ffi.Pointer<VecDMatch>, imp1.CvCallback_0)>>('cv_BFMatcher_match');
  late final _cv_BFMatcher_match = _cv_BFMatcher_matchPtr.asFunction<
      ffi.Pointer<CvStatus> Function(BFMatcher, Mat, Mat, ffi.Pointer<VecDMatch>, imp1.CvCallback_0)>();

  void cv_BRISK_close(
    BRISKPtr self,
  ) {
    return _cv_BRISK_close(
      self,
    );
  }

  late final _cv_BRISK_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(BRISKPtr)>>('cv_BRISK_close');
  late final _cv_BRISK_close = _cv_BRISK_closePtr.asFunction<void Function(BRISKPtr)>();

  ffi.Pointer<CvStatus> cv_BRISK_create(
    ffi.Pointer<BRISK> rval,
  ) {
    return _cv_BRISK_create(
      rval,
    );
  }

  late final _cv_BRISK_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<BRISK>)>>('cv_BRISK_create');
  late final _cv_BRISK_create =
      _cv_BRISK_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<BRISK>)>();

  ffi.Pointer<CvStatus> cv_BRISK_detect(
    BRISK self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_BRISK_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_BRISK_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BRISK, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_BRISK_detect');
  late final _cv_BRISK_detect = _cv_BRISK_detectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(BRISK, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_BRISK_detectAndCompute(
    BRISK self,
    Mat src,
    Mat mask,
    Mat desc,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_BRISK_detectAndCompute(
      self,
      src,
      mask,
      desc,
      rval,
      callback,
    );
  }

  late final _cv_BRISK_detectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(BRISK, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>,
              imp1.CvCallback_0)>>('cv_BRISK_detectAndCompute');
  late final _cv_BRISK_detectAndCompute = _cv_BRISK_detectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(BRISK, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  void cv_FastFeatureDetector_close(
    FastFeatureDetectorPtr self,
  ) {
    return _cv_FastFeatureDetector_close(
      self,
    );
  }

  late final _cv_FastFeatureDetector_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FastFeatureDetectorPtr)>>('cv_FastFeatureDetector_close');
  late final _cv_FastFeatureDetector_close =
      _cv_FastFeatureDetector_closePtr.asFunction<void Function(FastFeatureDetectorPtr)>();

  ffi.Pointer<CvStatus> cv_FastFeatureDetector_create(
    ffi.Pointer<FastFeatureDetector> rval,
  ) {
    return _cv_FastFeatureDetector_create(
      rval,
    );
  }

  late final _cv_FastFeatureDetector_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<FastFeatureDetector>)>>(
          'cv_FastFeatureDetector_create');
  late final _cv_FastFeatureDetector_create = _cv_FastFeatureDetector_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<FastFeatureDetector>)>();

  ffi.Pointer<CvStatus> cv_FastFeatureDetector_create_1(
    int threshold,
    bool nonmaxSuppression,
    int type,
    ffi.Pointer<FastFeatureDetector> rval,
  ) {
    return _cv_FastFeatureDetector_create_1(
      threshold,
      nonmaxSuppression,
      type,
      rval,
    );
  }

  late final _cv_FastFeatureDetector_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool, ffi.Int,
              ffi.Pointer<FastFeatureDetector>)>>('cv_FastFeatureDetector_create_1');
  late final _cv_FastFeatureDetector_create_1 = _cv_FastFeatureDetector_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(int, bool, int, ffi.Pointer<FastFeatureDetector>)>();

  ffi.Pointer<CvStatus> cv_FastFeatureDetector_detect(
    FastFeatureDetector self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_FastFeatureDetector_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_FastFeatureDetector_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>,
              imp1.CvCallback_0)>>('cv_FastFeatureDetector_detect');
  late final _cv_FastFeatureDetector_detect = _cv_FastFeatureDetector_detectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          FastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  void cv_FlannBasedMatcher_close(
    FlannBasedMatcherPtr self,
  ) {
    return _cv_FlannBasedMatcher_close(
      self,
    );
  }

  late final _cv_FlannBasedMatcher_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FlannBasedMatcherPtr)>>('cv_FlannBasedMatcher_close');
  late final _cv_FlannBasedMatcher_close =
      _cv_FlannBasedMatcher_closePtr.asFunction<void Function(FlannBasedMatcherPtr)>();

  ffi.Pointer<CvStatus> cv_FlannBasedMatcher_create(
    ffi.Pointer<FlannBasedMatcher> rval,
  ) {
    return _cv_FlannBasedMatcher_create(
      rval,
    );
  }

  late final _cv_FlannBasedMatcher_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<FlannBasedMatcher>)>>(
          'cv_FlannBasedMatcher_create');
  late final _cv_FlannBasedMatcher_create = _cv_FlannBasedMatcher_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<FlannBasedMatcher>)>();

  ffi.Pointer<CvStatus> cv_FlannBasedMatcher_knnMatch(
    FlannBasedMatcher self,
    Mat query,
    Mat train,
    int k,
    ffi.Pointer<VecVecDMatch> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_FlannBasedMatcher_knnMatch(
      self,
      query,
      train,
      k,
      rval,
      callback,
    );
  }

  late final _cv_FlannBasedMatcher_knnMatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(FlannBasedMatcher, Mat, Mat, ffi.Int, ffi.Pointer<VecVecDMatch>,
              imp1.CvCallback_0)>>('cv_FlannBasedMatcher_knnMatch');
  late final _cv_FlannBasedMatcher_knnMatch = _cv_FlannBasedMatcher_knnMatchPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          FlannBasedMatcher, Mat, Mat, int, ffi.Pointer<VecVecDMatch>, imp1.CvCallback_0)>();

  void cv_GFTTDetector_close(
    GFTTDetectorPtr self,
  ) {
    return _cv_GFTTDetector_close(
      self,
    );
  }

  late final _cv_GFTTDetector_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GFTTDetectorPtr)>>('cv_GFTTDetector_close');
  late final _cv_GFTTDetector_close = _cv_GFTTDetector_closePtr.asFunction<void Function(GFTTDetectorPtr)>();

  ffi.Pointer<CvStatus> cv_GFTTDetector_create(
    ffi.Pointer<GFTTDetector> rval,
  ) {
    return _cv_GFTTDetector_create(
      rval,
    );
  }

  late final _cv_GFTTDetector_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<GFTTDetector>)>>(
          'cv_GFTTDetector_create');
  late final _cv_GFTTDetector_create =
      _cv_GFTTDetector_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<GFTTDetector>)>();

  ffi.Pointer<CvStatus> cv_GFTTDetector_detect(
    GFTTDetector self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_GFTTDetector_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_GFTTDetector_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GFTTDetector, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_GFTTDetector_detect');
  late final _cv_GFTTDetector_detect = _cv_GFTTDetector_detectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(GFTTDetector, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  void cv_KAZE_close(
    KAZEPtr self,
  ) {
    return _cv_KAZE_close(
      self,
    );
  }

  late final _cv_KAZE_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(KAZEPtr)>>('cv_KAZE_close');
  late final _cv_KAZE_close = _cv_KAZE_closePtr.asFunction<void Function(KAZEPtr)>();

  ffi.Pointer<CvStatus> cv_KAZE_create(
    ffi.Pointer<KAZE> rval,
  ) {
    return _cv_KAZE_create(
      rval,
    );
  }

  late final _cv_KAZE_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<KAZE>)>>('cv_KAZE_create');
  late final _cv_KAZE_create =
      _cv_KAZE_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<KAZE>)>();

  ffi.Pointer<CvStatus> cv_KAZE_detect(
    KAZE self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_KAZE_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_KAZE_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KAZE, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_KAZE_detect');
  late final _cv_KAZE_detect = _cv_KAZE_detectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KAZE, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_KAZE_detectAndCompute(
    KAZE self,
    Mat src,
    Mat mask,
    Mat desc,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_KAZE_detectAndCompute(
      self,
      src,
      mask,
      desc,
      rval,
      callback,
    );
  }

  late final _cv_KAZE_detectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_KAZE_detectAndCompute');
  late final _cv_KAZE_detectAndCompute = _cv_KAZE_detectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(KAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  void cv_MSER_close(
    MSERPtr self,
  ) {
    return _cv_MSER_close(
      self,
    );
  }

  late final _cv_MSER_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(MSERPtr)>>('cv_MSER_close');
  late final _cv_MSER_close = _cv_MSER_closePtr.asFunction<void Function(MSERPtr)>();

  ffi.Pointer<CvStatus> cv_MSER_create(
    ffi.Pointer<MSER> rval,
  ) {
    return _cv_MSER_create(
      rval,
    );
  }

  late final _cv_MSER_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<MSER>)>>('cv_MSER_create');
  late final _cv_MSER_create =
      _cv_MSER_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<MSER>)>();

  ffi.Pointer<CvStatus> cv_MSER_detect(
    MSER self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_MSER_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_MSER_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              MSER, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_MSER_detect');
  late final _cv_MSER_detect = _cv_MSER_detectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(MSER, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  void cv_ORB_close(
    ORBPtr self,
  ) {
    return _cv_ORB_close(
      self,
    );
  }

  late final _cv_ORB_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ORBPtr)>>('cv_ORB_close');
  late final _cv_ORB_close = _cv_ORB_closePtr.asFunction<void Function(ORBPtr)>();

  ffi.Pointer<CvStatus> cv_ORB_create(
    ffi.Pointer<ORB> rval,
  ) {
    return _cv_ORB_create(
      rval,
    );
  }

  late final _cv_ORB_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ORB>)>>('cv_ORB_create');
  late final _cv_ORB_create =
      _cv_ORB_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ORB>)>();

  ffi.Pointer<CvStatus> cv_ORB_create_1(
    int nfeatures,
    double scaleFactor,
    int nlevels,
    int edgeThreshold,
    int firstLevel,
    int WTA_K,
    int scoreType,
    int patchSize,
    int fastThreshold,
    ffi.Pointer<ORB> rval,
  ) {
    return _cv_ORB_create_1(
      nfeatures,
      scaleFactor,
      nlevels,
      edgeThreshold,
      firstLevel,
      WTA_K,
      scoreType,
      patchSize,
      fastThreshold,
      rval,
    );
  }

  late final _cv_ORB_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Float, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Pointer<ORB>)>>('cv_ORB_create_1');
  late final _cv_ORB_create_1 = _cv_ORB_create_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(int, double, int, int, int, int, int, int, int, ffi.Pointer<ORB>)>();

  ffi.Pointer<CvStatus> cv_ORB_detect(
    ORB self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ORB_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_ORB_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ORB, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_ORB_detect');
  late final _cv_ORB_detect = _cv_ORB_detectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ORB, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_ORB_detectAndCompute(
    ORB self,
    Mat src,
    Mat mask,
    ffi.Pointer<VecKeyPoint> out_keypoints,
    Mat desc,
    bool useProvidedKeypoints,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_ORB_detectAndCompute(
      self,
      src,
      mask,
      out_keypoints,
      desc,
      useProvidedKeypoints,
      callback,
    );
  }

  late final _cv_ORB_detectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ORB, Mat, Mat, ffi.Pointer<VecKeyPoint>, Mat, ffi.Bool,
              imp1.CvCallback_0)>>('cv_ORB_detectAndCompute');
  late final _cv_ORB_detectAndCompute = _cv_ORB_detectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ORB, Mat, Mat, ffi.Pointer<VecKeyPoint>, Mat, bool, imp1.CvCallback_0)>();

  void cv_SIFT_close(
    SIFTPtr self,
  ) {
    return _cv_SIFT_close(
      self,
    );
  }

  late final _cv_SIFT_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(SIFTPtr)>>('cv_SIFT_close');
  late final _cv_SIFT_close = _cv_SIFT_closePtr.asFunction<void Function(SIFTPtr)>();

  ffi.Pointer<CvStatus> cv_SIFT_create(
    ffi.Pointer<SIFT> rval,
  ) {
    return _cv_SIFT_create(
      rval,
    );
  }

  late final _cv_SIFT_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<SIFT>)>>('cv_SIFT_create');
  late final _cv_SIFT_create =
      _cv_SIFT_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<SIFT>)>();

  ffi.Pointer<CvStatus> cv_SIFT_detect(
    SIFT self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SIFT_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_SIFT_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              SIFT, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_SIFT_detect');
  late final _cv_SIFT_detect = _cv_SIFT_detectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(SIFT, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_SIFT_detectAndCompute(
    SIFT self,
    Mat src,
    Mat mask,
    Mat desc,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SIFT_detectAndCompute(
      self,
      src,
      mask,
      desc,
      rval,
      callback,
    );
  }

  late final _cv_SIFT_detectAndComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              SIFT, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>>('cv_SIFT_detectAndCompute');
  late final _cv_SIFT_detectAndCompute = _cv_SIFT_detectAndComputePtr.asFunction<
      ffi.Pointer<CvStatus> Function(SIFT, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_SimpleBlobDetectorParams_create(
    ffi.Pointer<SimpleBlobDetectorParams> rval,
  ) {
    return _cv_SimpleBlobDetectorParams_create(
      rval,
    );
  }

  late final _cv_SimpleBlobDetectorParams_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetectorParams>)>>(
          'cv_SimpleBlobDetectorParams_create');
  late final _cv_SimpleBlobDetectorParams_create = _cv_SimpleBlobDetectorParams_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetectorParams>)>();

  void cv_SimpleBlobDetector_close(
    SimpleBlobDetectorPtr self,
  ) {
    return _cv_SimpleBlobDetector_close(
      self,
    );
  }

  late final _cv_SimpleBlobDetector_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SimpleBlobDetectorPtr)>>('cv_SimpleBlobDetector_close');
  late final _cv_SimpleBlobDetector_close =
      _cv_SimpleBlobDetector_closePtr.asFunction<void Function(SimpleBlobDetectorPtr)>();

  ffi.Pointer<CvStatus> cv_SimpleBlobDetector_create(
    ffi.Pointer<SimpleBlobDetector> rval,
  ) {
    return _cv_SimpleBlobDetector_create(
      rval,
    );
  }

  late final _cv_SimpleBlobDetector_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetector>)>>(
          'cv_SimpleBlobDetector_create');
  late final _cv_SimpleBlobDetector_create = _cv_SimpleBlobDetector_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetector>)>();

  ffi.Pointer<CvStatus> cv_SimpleBlobDetector_create_1(
    SimpleBlobDetectorParams params,
    ffi.Pointer<SimpleBlobDetector> rval,
  ) {
    return _cv_SimpleBlobDetector_create_1(
      params,
      rval,
    );
  }

  late final _cv_SimpleBlobDetector_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              SimpleBlobDetectorParams, ffi.Pointer<SimpleBlobDetector>)>>('cv_SimpleBlobDetector_create_1');
  late final _cv_SimpleBlobDetector_create_1 = _cv_SimpleBlobDetector_create_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(SimpleBlobDetectorParams, ffi.Pointer<SimpleBlobDetector>)>();

  ffi.Pointer<CvStatus> cv_SimpleBlobDetector_detect(
    SimpleBlobDetector self,
    Mat src,
    ffi.Pointer<VecKeyPoint> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SimpleBlobDetector_detect(
      self,
      src,
      rval,
      callback,
    );
  }

  late final _cv_SimpleBlobDetector_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(SimpleBlobDetector, Mat, ffi.Pointer<VecKeyPoint>,
              imp1.CvCallback_0)>>('cv_SimpleBlobDetector_detect');
  late final _cv_SimpleBlobDetector_detect = _cv_SimpleBlobDetector_detectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(SimpleBlobDetector, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_drawKeyPoints(
    Mat src,
    VecKeyPoint kp,
    Mat dst,
    Scalar color,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_drawKeyPoints(
      src,
      kp,
      dst,
      color,
      flags,
      callback,
    );
  }

  late final _cv_drawKeyPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, VecKeyPoint, Mat, Scalar, ffi.Int, imp1.CvCallback_0)>>('cv_drawKeyPoints');
  late final _cv_drawKeyPoints = _cv_drawKeyPointsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, Scalar, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_drawMatches(
    Mat img1,
    VecKeyPoint kp1,
    Mat img2,
    VecKeyPoint kp2,
    VecDMatch matches1to2,
    Mat outImg,
    Scalar matchesColor,
    Scalar pointColor,
    VecChar matchesMask,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_drawMatches(
      img1,
      kp1,
      img2,
      kp2,
      matches1to2,
      outImg,
      matchesColor,
      pointColor,
      matchesMask,
      flags,
      callback,
    );
  }

  late final _cv_drawMatchesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, VecKeyPoint, VecDMatch, Mat, Scalar, Scalar,
              VecChar, ffi.Int, imp1.CvCallback_0)>>('cv_drawMatches');
  late final _cv_drawMatches = _cv_drawMatchesPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, VecKeyPoint, VecDMatch, Mat, Scalar, Scalar,
          VecChar, int, imp1.CvCallback_0)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeFeatures2d _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AKAZEPtr)>> get cv_AKAZE_close =>
      _library._cv_AKAZE_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AgastFeatureDetectorPtr)>>
      get cv_AgastFeatureDetector_close => _library._cv_AgastFeatureDetector_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BFMatcherPtr)>> get cv_BFMatcher_close =>
      _library._cv_BFMatcher_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BRISKPtr)>> get cv_BRISK_close =>
      _library._cv_BRISK_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FastFeatureDetectorPtr)>>
      get cv_FastFeatureDetector_close => _library._cv_FastFeatureDetector_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FlannBasedMatcherPtr)>> get cv_FlannBasedMatcher_close =>
      _library._cv_FlannBasedMatcher_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GFTTDetectorPtr)>> get cv_GFTTDetector_close =>
      _library._cv_GFTTDetector_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KAZEPtr)>> get cv_KAZE_close => _library._cv_KAZE_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MSERPtr)>> get cv_MSER_close => _library._cv_MSER_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ORBPtr)>> get cv_ORB_close => _library._cv_ORB_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SIFTPtr)>> get cv_SIFT_close => _library._cv_SIFT_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SimpleBlobDetectorPtr)>> get cv_SimpleBlobDetector_close =>
      _library._cv_SimpleBlobDetector_closePtr;
}

final class AKAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AKAZEPtr = ffi.Pointer<AKAZE>;

final class AgastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AgastFeatureDetectorPtr = ffi.Pointer<AgastFeatureDetector>;

final class BFMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BFMatcherPtr = ffi.Pointer<BFMatcher>;

final class BRISK extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BRISKPtr = ffi.Pointer<BRISK>;
typedef CvStatus = imp1.CvStatus;

final class FastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FastFeatureDetectorPtr = ffi.Pointer<FastFeatureDetector>;

final class FlannBasedMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FlannBasedMatcherPtr = ffi.Pointer<FlannBasedMatcher>;

final class GFTTDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GFTTDetectorPtr = ffi.Pointer<GFTTDetector>;

final class KAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KAZEPtr = ffi.Pointer<KAZE>;

final class MSER extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MSERPtr = ffi.Pointer<MSER>;
typedef Mat = imp1.Mat;

final class ORB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ORBPtr = ffi.Pointer<ORB>;

final class SIFT extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef SIFTPtr = ffi.Pointer<SIFT>;
typedef Scalar = imp1.Scalar;

final class SimpleBlobDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class SimpleBlobDetectorParams extends ffi.Struct {
  @ffi.UnsignedChar()
  external int blobColor;

  @ffi.Bool()
  external bool filterByArea;

  @ffi.Bool()
  external bool filterByCircularity;

  @ffi.Bool()
  external bool filterByColor;

  @ffi.Bool()
  external bool filterByConvexity;

  @ffi.Bool()
  external bool filterByInertia;

  @ffi.Float()
  external double maxArea;

  @ffi.Float()
  external double maxCircularity;

  @ffi.Float()
  external double maxConvexity;

  @ffi.Float()
  external double maxInertiaRatio;

  @ffi.Float()
  external double maxThreshold;

  @ffi.Float()
  external double minArea;

  @ffi.Float()
  external double minCircularity;

  @ffi.Float()
  external double minConvexity;

  @ffi.Float()
  external double minDistBetweenBlobs;

  @ffi.Float()
  external double minInertiaRatio;

  @ffi.Size()
  external int minRepeatability;

  @ffi.Float()
  external double minThreshold;

  @ffi.Float()
  external double thresholdStep;
}

typedef SimpleBlobDetectorPtr = ffi.Pointer<SimpleBlobDetector>;
typedef VecChar = imp1.VecChar;
typedef VecDMatch = imp1.VecDMatch;
typedef VecKeyPoint = imp1.VecKeyPoint;
typedef VecVecDMatch = imp1.VecVecDMatch;
