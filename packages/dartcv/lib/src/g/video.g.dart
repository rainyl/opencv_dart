// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Video
///
class CvNativeVideo {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeVideo(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeVideo.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  ffi.Pointer<CvStatus> cv_BackgroundSubtractorKNN_apply(
    BackgroundSubtractorKNN self,
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_BackgroundSubtractorKNN_apply(
      self,
      src,
      dst,
      callback,
    );
  }

  late final _cv_BackgroundSubtractorKNN_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BackgroundSubtractorKNN, Mat, Mat, imp1.CvCallback_0)>>('cv_BackgroundSubtractorKNN_apply');
  late final _cv_BackgroundSubtractorKNN_apply = _cv_BackgroundSubtractorKNN_applyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(BackgroundSubtractorKNN, Mat, Mat, imp1.CvCallback_0)>();

  void cv_BackgroundSubtractorKNN_close(
    BackgroundSubtractorKNNPtr self,
  ) {
    return _cv_BackgroundSubtractorKNN_close(
      self,
    );
  }

  late final _cv_BackgroundSubtractorKNN_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorKNNPtr)>>(
          'cv_BackgroundSubtractorKNN_close');
  late final _cv_BackgroundSubtractorKNN_close =
      _cv_BackgroundSubtractorKNN_closePtr.asFunction<void Function(BackgroundSubtractorKNNPtr)>();

  ffi.Pointer<CvStatus> cv_BackgroundSubtractorKNN_create(
    ffi.Pointer<BackgroundSubtractorKNN> rval,
  ) {
    return _cv_BackgroundSubtractorKNN_create(
      rval,
    );
  }

  late final _cv_BackgroundSubtractorKNN_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorKNN>)>>(
          'cv_BackgroundSubtractorKNN_create');
  late final _cv_BackgroundSubtractorKNN_create = _cv_BackgroundSubtractorKNN_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorKNN>)>();

  ffi.Pointer<CvStatus> cv_BackgroundSubtractorKNN_create_1(
    int history,
    double dist2Threshold,
    bool detectShadows,
    ffi.Pointer<BackgroundSubtractorKNN> rval,
  ) {
    return _cv_BackgroundSubtractorKNN_create_1(
      history,
      dist2Threshold,
      detectShadows,
      rval,
    );
  }

  late final _cv_BackgroundSubtractorKNN_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Double, ffi.Bool,
              ffi.Pointer<BackgroundSubtractorKNN>)>>('cv_BackgroundSubtractorKNN_create_1');
  late final _cv_BackgroundSubtractorKNN_create_1 = _cv_BackgroundSubtractorKNN_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(int, double, bool, ffi.Pointer<BackgroundSubtractorKNN>)>();

  ffi.Pointer<CvStatus> cv_BackgroundSubtractorMOG2_apply(
    BackgroundSubtractorMOG2 self,
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_BackgroundSubtractorMOG2_apply(
      self,
      src,
      dst,
      callback,
    );
  }

  late final _cv_BackgroundSubtractorMOG2_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              BackgroundSubtractorMOG2, Mat, Mat, imp1.CvCallback_0)>>('cv_BackgroundSubtractorMOG2_apply');
  late final _cv_BackgroundSubtractorMOG2_apply = _cv_BackgroundSubtractorMOG2_applyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(BackgroundSubtractorMOG2, Mat, Mat, imp1.CvCallback_0)>();

  void cv_BackgroundSubtractorMOG2_close(
    BackgroundSubtractorMOG2Ptr self,
  ) {
    return _cv_BackgroundSubtractorMOG2_close(
      self,
    );
  }

  late final _cv_BackgroundSubtractorMOG2_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>>(
          'cv_BackgroundSubtractorMOG2_close');
  late final _cv_BackgroundSubtractorMOG2_close =
      _cv_BackgroundSubtractorMOG2_closePtr.asFunction<void Function(BackgroundSubtractorMOG2Ptr)>();

  ffi.Pointer<CvStatus> cv_BackgroundSubtractorMOG2_create(
    ffi.Pointer<BackgroundSubtractorMOG2> rval,
  ) {
    return _cv_BackgroundSubtractorMOG2_create(
      rval,
    );
  }

  late final _cv_BackgroundSubtractorMOG2_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorMOG2>)>>(
          'cv_BackgroundSubtractorMOG2_create');
  late final _cv_BackgroundSubtractorMOG2_create = _cv_BackgroundSubtractorMOG2_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorMOG2>)>();

  ffi.Pointer<CvStatus> cv_BackgroundSubtractorMOG2_create_1(
    int history,
    double varThreshold,
    bool detectShadows,
    ffi.Pointer<BackgroundSubtractorMOG2> rval,
  ) {
    return _cv_BackgroundSubtractorMOG2_create_1(
      history,
      varThreshold,
      detectShadows,
      rval,
    );
  }

  late final _cv_BackgroundSubtractorMOG2_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Double, ffi.Bool,
              ffi.Pointer<BackgroundSubtractorMOG2>)>>('cv_BackgroundSubtractorMOG2_create_1');
  late final _cv_BackgroundSubtractorMOG2_create_1 = _cv_BackgroundSubtractorMOG2_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(int, double, bool, ffi.Pointer<BackgroundSubtractorMOG2>)>();

  void cv_KalmanFilter_close(
    KalmanFilterPtr self,
  ) {
    return _cv_KalmanFilter_close(
      self,
    );
  }

  late final _cv_KalmanFilter_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilterPtr)>>('cv_KalmanFilter_close');
  late final _cv_KalmanFilter_close = _cv_KalmanFilter_closePtr.asFunction<void Function(KalmanFilterPtr)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_correct(
    KalmanFilter self,
    Mat measurement,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_KalmanFilter_correct(
      self,
      measurement,
      rval,
      callback,
    );
  }

  late final _cv_KalmanFilter_correctPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_KalmanFilter_correct');
  late final _cv_KalmanFilter_correct = _cv_KalmanFilter_correctPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_create(
    int dynamParams,
    int measureParams,
    int controlParams,
    int type,
    ffi.Pointer<KalmanFilter> rval,
  ) {
    return _cv_KalmanFilter_create(
      dynamParams,
      measureParams,
      controlParams,
      type,
      rval,
    );
  }

  late final _cv_KalmanFilter_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<KalmanFilter>)>>('cv_KalmanFilter_create');
  late final _cv_KalmanFilter_create = _cv_KalmanFilter_createPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, int, int, int, ffi.Pointer<KalmanFilter>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_controlMatrix(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_controlMatrix(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_controlMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_controlMatrix');
  late final _cv_KalmanFilter_get_controlMatrix = _cv_KalmanFilter_get_controlMatrixPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_errorCovPost(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_errorCovPost(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_errorCovPostPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_errorCovPost');
  late final _cv_KalmanFilter_get_errorCovPost = _cv_KalmanFilter_get_errorCovPostPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_errorCovPre(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_errorCovPre(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_errorCovPrePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_errorCovPre');
  late final _cv_KalmanFilter_get_errorCovPre = _cv_KalmanFilter_get_errorCovPrePtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_gain(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_gain(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_gainPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_gain');
  late final _cv_KalmanFilter_get_gain = _cv_KalmanFilter_get_gainPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_measurementMatrix(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_measurementMatrix(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_measurementMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_measurementMatrix');
  late final _cv_KalmanFilter_get_measurementMatrix = _cv_KalmanFilter_get_measurementMatrixPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_measurementNoiseCov(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_measurementNoiseCov(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_measurementNoiseCovPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_measurementNoiseCov');
  late final _cv_KalmanFilter_get_measurementNoiseCov = _cv_KalmanFilter_get_measurementNoiseCovPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_processNoiseCov(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_processNoiseCov(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_processNoiseCovPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_processNoiseCov');
  late final _cv_KalmanFilter_get_processNoiseCov = _cv_KalmanFilter_get_processNoiseCovPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_statePost(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_statePost(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_statePostPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_statePost');
  late final _cv_KalmanFilter_get_statePost = _cv_KalmanFilter_get_statePostPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_statePre(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_statePre(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_statePrePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_statePre');
  late final _cv_KalmanFilter_get_statePre = _cv_KalmanFilter_get_statePrePtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp1(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_temp1(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_temp1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_temp1');
  late final _cv_KalmanFilter_get_temp1 = _cv_KalmanFilter_get_temp1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp2(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_temp2(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_temp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_temp2');
  late final _cv_KalmanFilter_get_temp2 = _cv_KalmanFilter_get_temp2Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp3(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_temp3(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_temp3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_temp3');
  late final _cv_KalmanFilter_get_temp3 = _cv_KalmanFilter_get_temp3Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp4(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_temp4(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_temp4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_temp4');
  late final _cv_KalmanFilter_get_temp4 = _cv_KalmanFilter_get_temp4Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_temp5(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_temp5(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_temp5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_temp5');
  late final _cv_KalmanFilter_get_temp5 = _cv_KalmanFilter_get_temp5Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_get_transitionMatrix(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_KalmanFilter_get_transitionMatrix(
      self,
      rval,
    );
  }

  late final _cv_KalmanFilter_get_transitionMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>>(
          'cv_KalmanFilter_get_transitionMatrix');
  late final _cv_KalmanFilter_get_transitionMatrix = _cv_KalmanFilter_get_transitionMatrixPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_init(
    KalmanFilter self,
    int dynamParams,
    int measureParams,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_KalmanFilter_init(
      self,
      dynamParams,
      measureParams,
      callback,
    );
  }

  late final _cv_KalmanFilter_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Int, ffi.Int, imp1.CvCallback_0)>>(
      'cv_KalmanFilter_init');
  late final _cv_KalmanFilter_init = _cv_KalmanFilter_initPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_init_1(
    KalmanFilter self,
    int dynamParams,
    int measureParams,
    int controlParams,
    int type,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_KalmanFilter_init_1(
      self,
      dynamParams,
      measureParams,
      controlParams,
      type,
      callback,
    );
  }

  late final _cv_KalmanFilter_init_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              imp1.CvCallback_0)>>('cv_KalmanFilter_init_1');
  late final _cv_KalmanFilter_init_1 = _cv_KalmanFilter_init_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, int, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_predict(
    KalmanFilter self,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_KalmanFilter_predict(
      self,
      rval,
      callback,
    );
  }

  late final _cv_KalmanFilter_predictPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>, imp1.CvCallback_0)>>(
      'cv_KalmanFilter_predict');
  late final _cv_KalmanFilter_predict = _cv_KalmanFilter_predictPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_predict_1(
    KalmanFilter self,
    Mat control,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_KalmanFilter_predict_1(
      self,
      control,
      rval,
      callback,
    );
  }

  late final _cv_KalmanFilter_predict_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              KalmanFilter, Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_KalmanFilter_predict_1');
  late final _cv_KalmanFilter_predict_1 = _cv_KalmanFilter_predict_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_controlMatrix(
    KalmanFilter self,
    Mat controlMatrix,
  ) {
    return _cv_KalmanFilter_set_controlMatrix(
      self,
      controlMatrix,
    );
  }

  late final _cv_KalmanFilter_set_controlMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_controlMatrix');
  late final _cv_KalmanFilter_set_controlMatrix =
      _cv_KalmanFilter_set_controlMatrixPtr.asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_errorCovPost(
    KalmanFilter self,
    Mat errorCovPost,
  ) {
    return _cv_KalmanFilter_set_errorCovPost(
      self,
      errorCovPost,
    );
  }

  late final _cv_KalmanFilter_set_errorCovPostPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_errorCovPost');
  late final _cv_KalmanFilter_set_errorCovPost =
      _cv_KalmanFilter_set_errorCovPostPtr.asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_errorCovPre(
    KalmanFilter self,
    Mat errorCovPre,
  ) {
    return _cv_KalmanFilter_set_errorCovPre(
      self,
      errorCovPre,
    );
  }

  late final _cv_KalmanFilter_set_errorCovPrePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_errorCovPre');
  late final _cv_KalmanFilter_set_errorCovPre =
      _cv_KalmanFilter_set_errorCovPrePtr.asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_gain(
    KalmanFilter self,
    Mat gain,
  ) {
    return _cv_KalmanFilter_set_gain(
      self,
      gain,
    );
  }

  late final _cv_KalmanFilter_set_gainPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_gain');
  late final _cv_KalmanFilter_set_gain =
      _cv_KalmanFilter_set_gainPtr.asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_measurementMatrix(
    KalmanFilter self,
    Mat measurementMatrix,
  ) {
    return _cv_KalmanFilter_set_measurementMatrix(
      self,
      measurementMatrix,
    );
  }

  late final _cv_KalmanFilter_set_measurementMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_measurementMatrix');
  late final _cv_KalmanFilter_set_measurementMatrix = _cv_KalmanFilter_set_measurementMatrixPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_measurementNoiseCov(
    KalmanFilter self,
    Mat measurementNoiseCov,
  ) {
    return _cv_KalmanFilter_set_measurementNoiseCov(
      self,
      measurementNoiseCov,
    );
  }

  late final _cv_KalmanFilter_set_measurementNoiseCovPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_measurementNoiseCov');
  late final _cv_KalmanFilter_set_measurementNoiseCov = _cv_KalmanFilter_set_measurementNoiseCovPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_processNoiseCov(
    KalmanFilter self,
    Mat processNoiseCov,
  ) {
    return _cv_KalmanFilter_set_processNoiseCov(
      self,
      processNoiseCov,
    );
  }

  late final _cv_KalmanFilter_set_processNoiseCovPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_processNoiseCov');
  late final _cv_KalmanFilter_set_processNoiseCov =
      _cv_KalmanFilter_set_processNoiseCovPtr.asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_statePost(
    KalmanFilter self,
    Mat statePost,
  ) {
    return _cv_KalmanFilter_set_statePost(
      self,
      statePost,
    );
  }

  late final _cv_KalmanFilter_set_statePostPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_statePost');
  late final _cv_KalmanFilter_set_statePost =
      _cv_KalmanFilter_set_statePostPtr.asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_statePre(
    KalmanFilter self,
    Mat statePre,
  ) {
    return _cv_KalmanFilter_set_statePre(
      self,
      statePre,
    );
  }

  late final _cv_KalmanFilter_set_statePrePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_statePre');
  late final _cv_KalmanFilter_set_statePre =
      _cv_KalmanFilter_set_statePrePtr.asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  ffi.Pointer<CvStatus> cv_KalmanFilter_set_transitionMatrix(
    KalmanFilter self,
    Mat transitionMatrix,
  ) {
    return _cv_KalmanFilter_set_transitionMatrix(
      self,
      transitionMatrix,
    );
  }

  late final _cv_KalmanFilter_set_transitionMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>>(
          'cv_KalmanFilter_set_transitionMatrix');
  late final _cv_KalmanFilter_set_transitionMatrix = _cv_KalmanFilter_set_transitionMatrixPtr
      .asFunction<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>();

  void cv_TrackerMIL_close(
    TrackerMILPtr self,
  ) {
    return _cv_TrackerMIL_close(
      self,
    );
  }

  late final _cv_TrackerMIL_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TrackerMILPtr)>>('cv_TrackerMIL_close');
  late final _cv_TrackerMIL_close = _cv_TrackerMIL_closePtr.asFunction<void Function(TrackerMILPtr)>();

  ffi.Pointer<CvStatus> cv_TrackerMIL_create(
    ffi.Pointer<TrackerMIL> rval,
  ) {
    return _cv_TrackerMIL_create(
      rval,
    );
  }

  late final _cv_TrackerMIL_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<TrackerMIL>)>>(
          'cv_TrackerMIL_create');
  late final _cv_TrackerMIL_create =
      _cv_TrackerMIL_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<TrackerMIL>)>();

  ffi.Pointer<CvStatus> cv_TrackerMIL_init(
    TrackerMIL self,
    Mat image,
    CvRect bbox,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_TrackerMIL_init(
      self,
      image,
      bbox,
      callback,
    );
  }

  late final _cv_TrackerMIL_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, CvRect, imp1.CvCallback_0)>>(
          'cv_TrackerMIL_init');
  late final _cv_TrackerMIL_init = _cv_TrackerMIL_initPtr
      .asFunction<ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, CvRect, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_TrackerMIL_update(
    TrackerMIL self,
    Mat image,
    ffi.Pointer<CvRect> boundingBox,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_TrackerMIL_update(
      self,
      image,
      boundingBox,
      rval,
      callback,
    );
  }

  late final _cv_TrackerMIL_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, ffi.Pointer<CvRect>, ffi.Pointer<ffi.Bool>,
              imp1.CvCallback_0)>>('cv_TrackerMIL_update');
  late final _cv_TrackerMIL_update = _cv_TrackerMIL_updatePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          TrackerMIL, Mat, ffi.Pointer<CvRect>, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_calcOpticalFlowFarneback(
    Mat prevImg,
    Mat nextImg,
    Mat flow,
    double pyrScale,
    int levels,
    int winsize,
    int iterations,
    int polyN,
    double polySigma,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_calcOpticalFlowFarneback(
      prevImg,
      nextImg,
      flow,
      pyrScale,
      levels,
      winsize,
      iterations,
      polyN,
      polySigma,
      flags,
      callback,
    );
  }

  late final _cv_calcOpticalFlowFarnebackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_calcOpticalFlowFarneback');
  late final _cv_calcOpticalFlowFarneback = _cv_calcOpticalFlowFarnebackPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, double, int, int, int, int, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_calcOpticalFlowPyrLK(
    Mat prevImg,
    Mat nextImg,
    VecPoint2f prevPts,
    ffi.Pointer<VecPoint2f> nextPts,
    ffi.Pointer<VecUChar> status,
    ffi.Pointer<VecF32> err,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_calcOpticalFlowPyrLK(
      prevImg,
      nextImg,
      prevPts,
      nextPts,
      status,
      err,
      callback,
    );
  }

  late final _cv_calcOpticalFlowPyrLKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, VecPoint2f, ffi.Pointer<VecPoint2f>, ffi.Pointer<VecUChar>,
              ffi.Pointer<VecF32>, imp1.CvCallback_0)>>('cv_calcOpticalFlowPyrLK');
  late final _cv_calcOpticalFlowPyrLK = _cv_calcOpticalFlowPyrLKPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, VecPoint2f, ffi.Pointer<VecPoint2f>, ffi.Pointer<VecUChar>,
          ffi.Pointer<VecF32>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_calcOpticalFlowPyrLK_1(
    Mat prevImg,
    Mat nextImg,
    VecPoint2f prevPts,
    ffi.Pointer<VecPoint2f> nextPts,
    ffi.Pointer<VecUChar> status,
    ffi.Pointer<VecF32> err,
    CvSize winSize,
    int maxLevel,
    TermCriteria criteria,
    int flags,
    double minEigThreshold,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_calcOpticalFlowPyrLK_1(
      prevImg,
      nextImg,
      prevPts,
      nextPts,
      status,
      err,
      winSize,
      maxLevel,
      criteria,
      flags,
      minEigThreshold,
      callback,
    );
  }

  late final _cv_calcOpticalFlowPyrLK_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat,
              Mat,
              VecPoint2f,
              ffi.Pointer<VecPoint2f>,
              ffi.Pointer<VecUChar>,
              ffi.Pointer<VecF32>,
              CvSize,
              ffi.Int,
              TermCriteria,
              ffi.Int,
              ffi.Double,
              imp1.CvCallback_0)>>('cv_calcOpticalFlowPyrLK_1');
  late final _cv_calcOpticalFlowPyrLK_1 = _cv_calcOpticalFlowPyrLK_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, VecPoint2f, ffi.Pointer<VecPoint2f>, ffi.Pointer<VecUChar>,
          ffi.Pointer<VecF32>, CvSize, int, TermCriteria, int, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_findTransformECC(
    Mat templateImage,
    Mat inputImage,
    Mat warpMatrix,
    int motionType,
    TermCriteria criteria,
    Mat inputMask,
    int gaussFiltSize,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_findTransformECC(
      templateImage,
      inputImage,
      warpMatrix,
      motionType,
      criteria,
      inputMask,
      gaussFiltSize,
      rval,
      callback,
    );
  }

  late final _cv_findTransformECCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, TermCriteria, Mat, ffi.Int,
              ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_findTransformECC');
  late final _cv_findTransformECC = _cv_findTransformECCPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, Mat, Mat, int, TermCriteria, Mat, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeVideo _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorKNNPtr)>>
      get cv_BackgroundSubtractorKNN_close => _library._cv_BackgroundSubtractorKNN_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>>
      get cv_BackgroundSubtractorMOG2_close => _library._cv_BackgroundSubtractorMOG2_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilterPtr)>> get cv_KalmanFilter_close =>
      _library._cv_KalmanFilter_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(TrackerMILPtr)>> get cv_TrackerMIL_close =>
      _library._cv_TrackerMIL_closePtr;
}

final class BackgroundSubtractorKNN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorKNNPtr = ffi.Pointer<BackgroundSubtractorKNN>;

final class BackgroundSubtractorMOG2 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorMOG2Ptr = ffi.Pointer<BackgroundSubtractorMOG2>;
typedef CvRect = imp1.CvRect;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;

final class KalmanFilter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KalmanFilterPtr = ffi.Pointer<KalmanFilter>;
typedef Mat = imp1.Mat;
typedef TermCriteria = imp1.TermCriteria;

final class Tracker extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class TrackerGOTURN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerGOTURNPtr = ffi.Pointer<TrackerGOTURN>;

final class TrackerMIL extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerMILPtr = ffi.Pointer<TrackerMIL>;
typedef TrackerPtr = ffi.Pointer<Tracker>;
typedef VecF32 = imp1.VecF32;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecUChar = imp1.VecUChar;
