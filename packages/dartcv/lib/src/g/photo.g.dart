// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Photo
///
class CvNativePhoto {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativePhoto(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativePhoto.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void cv_AlignMTB_close(
    AlignMTBPtr b,
  ) {
    return _cv_AlignMTB_close(
      b,
    );
  }

  late final _cv_AlignMTB_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AlignMTBPtr)>>('cv_AlignMTB_close');
  late final _cv_AlignMTB_close = _cv_AlignMTB_closePtr.asFunction<void Function(AlignMTBPtr)>();

  ffi.Pointer<CvStatus> cv_AlignMTB_process(
    AlignMTB b,
    VecMat src,
    ffi.Pointer<VecMat> dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_AlignMTB_process(
      b,
      src,
      dst,
      callback,
    );
  }

  late final _cv_AlignMTB_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              AlignMTB, VecMat, ffi.Pointer<VecMat>, imp1.CvCallback_0)>>('cv_AlignMTB_process');
  late final _cv_AlignMTB_process = _cv_AlignMTB_processPtr
      .asFunction<ffi.Pointer<CvStatus> Function(AlignMTB, VecMat, ffi.Pointer<VecMat>, imp1.CvCallback_0)>();

  void cv_MergeMertens_close(
    MergeMertensPtr b,
  ) {
    return _cv_MergeMertens_close(
      b,
    );
  }

  late final _cv_MergeMertens_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MergeMertensPtr)>>('cv_MergeMertens_close');
  late final _cv_MergeMertens_close = _cv_MergeMertens_closePtr.asFunction<void Function(MergeMertensPtr)>();

  ffi.Pointer<CvStatus> cv_MergeMertens_process(
    MergeMertens b,
    VecMat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_MergeMertens_process(
      b,
      src,
      dst,
      callback,
    );
  }

  late final _cv_MergeMertens_processPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(MergeMertens, VecMat, Mat, imp1.CvCallback_0)>>(
      'cv_MergeMertens_process');
  late final _cv_MergeMertens_process = _cv_MergeMertens_processPtr
      .asFunction<ffi.Pointer<CvStatus> Function(MergeMertens, VecMat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_colorChange(
    Mat src,
    Mat mask,
    Mat dst,
    double red_mul,
    double green_mul,
    double blue_mul,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_colorChange(
      src,
      mask,
      dst,
      red_mul,
      green_mul,
      blue_mul,
      callback,
    );
  }

  late final _cv_colorChangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float, imp1.CvCallback_0)>>('cv_colorChange');
  late final _cv_colorChange = _cv_colorChangePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_createAlignMTB(
    ffi.Pointer<AlignMTB> rval,
  ) {
    return _cv_createAlignMTB(
      rval,
    );
  }

  late final _cv_createAlignMTBPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<AlignMTB>)>>('cv_createAlignMTB');
  late final _cv_createAlignMTB =
      _cv_createAlignMTBPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<AlignMTB>)>();

  ffi.Pointer<CvStatus> cv_createAlignMTB_1(
    int max_bits,
    int exclude_range,
    bool cut,
    ffi.Pointer<AlignMTB> rval,
  ) {
    return _cv_createAlignMTB_1(
      max_bits,
      exclude_range,
      cut,
      rval,
    );
  }

  late final _cv_createAlignMTB_1Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Bool, ffi.Pointer<AlignMTB>)>>(
      'cv_createAlignMTB_1');
  late final _cv_createAlignMTB_1 = _cv_createAlignMTB_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(int, int, bool, ffi.Pointer<AlignMTB>)>();

  ffi.Pointer<CvStatus> cv_createMergeMertens(
    ffi.Pointer<MergeMertens> rval,
  ) {
    return _cv_createMergeMertens(
      rval,
    );
  }

  late final _cv_createMergeMertensPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<MergeMertens>)>>(
          'cv_createMergeMertens');
  late final _cv_createMergeMertens =
      _cv_createMergeMertensPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<MergeMertens>)>();

  ffi.Pointer<CvStatus> cv_createMergeMertens_1(
    double contrast_weight,
    double saturation_weight,
    double exposure_weight,
    ffi.Pointer<MergeMertens> rval,
  ) {
    return _cv_createMergeMertens_1(
      contrast_weight,
      saturation_weight,
      exposure_weight,
      rval,
    );
  }

  late final _cv_createMergeMertens_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Float, ffi.Float, ffi.Float, ffi.Pointer<MergeMertens>)>>('cv_createMergeMertens_1');
  late final _cv_createMergeMertens_1 = _cv_createMergeMertens_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(double, double, double, ffi.Pointer<MergeMertens>)>();

  ffi.Pointer<CvStatus> cv_detailEnhance(
    Mat src,
    Mat dst,
    double sigma_s,
    double sigma_r,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_detailEnhance(
      src,
      dst,
      sigma_s,
      sigma_r,
      callback,
    );
  }

  late final _cv_detailEnhancePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float, imp1.CvCallback_0)>>(
      'cv_detailEnhance');
  late final _cv_detailEnhance = _cv_detailEnhancePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_edgePreservingFilter(
    Mat src,
    Mat dst,
    int filter,
    double sigma_s,
    double sigma_r,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_edgePreservingFilter(
      src,
      dst,
      filter,
      sigma_s,
      sigma_r,
      callback,
    );
  }

  late final _cv_edgePreservingFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Float, ffi.Float, imp1.CvCallback_0)>>('cv_edgePreservingFilter');
  late final _cv_edgePreservingFilter = _cv_edgePreservingFilterPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fastNlMeansDenoising(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fastNlMeansDenoising(
      src,
      dst,
      callback,
    );
  }

  late final _cv_fastNlMeansDenoisingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_fastNlMeansDenoising');
  late final _cv_fastNlMeansDenoising =
      _cv_fastNlMeansDenoisingPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fastNlMeansDenoisingColored(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fastNlMeansDenoisingColored(
      src,
      dst,
      callback,
    );
  }

  late final _cv_fastNlMeansDenoisingColoredPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_fastNlMeansDenoisingColored');
  late final _cv_fastNlMeansDenoisingColored = _cv_fastNlMeansDenoisingColoredPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fastNlMeansDenoisingColoredMulti(
    VecMat src,
    Mat dst,
    int imgToDenoiseIndex,
    int temporalWindowSize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fastNlMeansDenoisingColoredMulti(
      src,
      dst,
      imgToDenoiseIndex,
      temporalWindowSize,
      callback,
    );
  }

  late final _cv_fastNlMeansDenoisingColoredMultiPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(VecMat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>(
      'cv_fastNlMeansDenoisingColoredMulti');
  late final _cv_fastNlMeansDenoisingColoredMulti = _cv_fastNlMeansDenoisingColoredMultiPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecMat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fastNlMeansDenoisingColoredMulti_1(
    VecMat src,
    Mat dst,
    int imgToDenoiseIndex,
    int temporalWindowSize,
    double h,
    double hColor,
    int templateWindowSize,
    int searchWindowSize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fastNlMeansDenoisingColoredMulti_1(
      src,
      dst,
      imgToDenoiseIndex,
      temporalWindowSize,
      h,
      hColor,
      templateWindowSize,
      searchWindowSize,
      callback,
    );
  }

  late final _cv_fastNlMeansDenoisingColoredMulti_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecMat, Mat, ffi.Int, ffi.Int, ffi.Float, ffi.Float, ffi.Int,
              ffi.Int, imp1.CvCallback_0)>>('cv_fastNlMeansDenoisingColoredMulti_1');
  late final _cv_fastNlMeansDenoisingColoredMulti_1 = _cv_fastNlMeansDenoisingColoredMulti_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(VecMat, Mat, int, int, double, double, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fastNlMeansDenoisingColored_1(
    Mat src,
    Mat dst,
    double h,
    double hColor,
    int templateWindowSize,
    int searchWindowSize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fastNlMeansDenoisingColored_1(
      src,
      dst,
      h,
      hColor,
      templateWindowSize,
      searchWindowSize,
      callback,
    );
  }

  late final _cv_fastNlMeansDenoisingColored_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float, ffi.Int, ffi.Int,
              imp1.CvCallback_0)>>('cv_fastNlMeansDenoisingColored_1');
  late final _cv_fastNlMeansDenoisingColored_1 = _cv_fastNlMeansDenoisingColored_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_fastNlMeansDenoising_1(
    Mat src,
    Mat dst,
    double h,
    int templateWindowSize,
    int searchWindowSize,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_fastNlMeansDenoising_1(
      src,
      dst,
      h,
      templateWindowSize,
      searchWindowSize,
      callback,
    );
  }

  late final _cv_fastNlMeansDenoising_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Float, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_fastNlMeansDenoising_1');
  late final _cv_fastNlMeansDenoising_1 = _cv_fastNlMeansDenoising_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_illuminationChange(
    Mat src,
    Mat mask,
    Mat dst,
    double alpha,
    double beta,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_illuminationChange(
      src,
      mask,
      dst,
      alpha,
      beta,
      callback,
    );
  }

  late final _cv_illuminationChangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Float, ffi.Float, imp1.CvCallback_0)>>('cv_illuminationChange');
  late final _cv_illuminationChange = _cv_illuminationChangePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_inpaint(
    Mat src,
    Mat mask,
    Mat dst,
    double inpaint_radius,
    int algorithm_type,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_inpaint(
      src,
      mask,
      dst,
      inpaint_radius,
      algorithm_type,
      callback,
    );
  }

  late final _cv_inpaintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Float, ffi.Int, imp1.CvCallback_0)>>('cv_inpaint');
  late final _cv_inpaint = _cv_inpaintPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_pencilSketch(
    Mat src,
    Mat dst1,
    Mat dst2,
    double sigma_s,
    double sigma_r,
    double shade_factor,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_pencilSketch(
      src,
      dst1,
      dst2,
      sigma_s,
      sigma_r,
      shade_factor,
      callback,
    );
  }

  late final _cv_pencilSketchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float, imp1.CvCallback_0)>>('cv_pencilSketch');
  late final _cv_pencilSketch = _cv_pencilSketchPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_seamlessClone(
    Mat src,
    Mat dst,
    Mat mask,
    CvPoint p,
    Mat blend,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_seamlessClone(
      src,
      dst,
      mask,
      p,
      blend,
      flags,
      callback,
    );
  }

  late final _cv_seamlessClonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, CvPoint, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_seamlessClone');
  late final _cv_seamlessClone = _cv_seamlessClonePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, CvPoint, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_stylization(
    Mat src,
    Mat dst,
    double sigma_s,
    double sigma_r,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_stylization(
      src,
      dst,
      sigma_s,
      sigma_r,
      callback,
    );
  }

  late final _cv_stylizationPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float, imp1.CvCallback_0)>>(
      'cv_stylization');
  late final _cv_stylization = _cv_stylizationPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_textureFlattening(
    Mat src,
    Mat mask,
    Mat dst,
    double low_threshold,
    double high_threshold,
    int kernel_size,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_textureFlattening(
      src,
      mask,
      dst,
      low_threshold,
      high_threshold,
      kernel_size,
      callback,
    );
  }

  late final _cv_textureFlatteningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Int, imp1.CvCallback_0)>>('cv_textureFlattening');
  late final _cv_textureFlattening = _cv_textureFlatteningPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, double, int, imp1.CvCallback_0)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativePhoto _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AlignMTBPtr)>> get cv_AlignMTB_close =>
      _library._cv_AlignMTB_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MergeMertensPtr)>> get cv_MergeMertens_close =>
      _library._cv_MergeMertens_closePtr;
}

final class AlignMTB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AlignMTBPtr = ffi.Pointer<AlignMTB>;
typedef CvPoint = imp1.CvPoint;
typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;

final class MergeMertens extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MergeMertensPtr = ffi.Pointer<MergeMertens>;
typedef VecMat = imp1.VecMat;
