// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Core
///
class CvNativeCore {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeCore(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeCore.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void CvStatus_close(
    ffi.Pointer<CvStatus> self,
  ) {
    return _CvStatus_close(
      self,
    );
  }

  late final _CvStatus_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CvStatus>)>>('CvStatus_close');
  late final _CvStatus_close = _CvStatus_closePtr.asFunction<void Function(ffi.Pointer<CvStatus>)>();

  ffi.Pointer<CvStatus> cv_LUT(
    Mat src,
    Mat lut,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_LUT(
      src,
      lut,
      dst,
      callback,
    );
  }

  late final _cv_LUTPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_LUT');
  late final _cv_LUT =
      _cv_LUTPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_adjustROI(
    Mat self,
    int dtop,
    int dbottom,
    int dleft,
    int dright,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_adjustROI(
      self,
      dtop,
      dbottom,
      dleft,
      dright,
      rval,
      callback,
    );
  }

  late final _cv_Mat_adjustROIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_adjustROI');
  late final _cv_Mat_adjustROI = _cv_Mat_adjustROIPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  int cv_Mat_channels(
    Mat self,
  ) {
    return _cv_Mat_channels(
      self,
    );
  }

  late final _cv_Mat_channelsPtr = _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_channels');
  late final _cv_Mat_channels = _cv_Mat_channelsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_clone(
    Mat self,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_clone(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>>(
          'cv_Mat_clone');
  late final _cv_Mat_clone =
      _cv_Mat_clonePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  void cv_Mat_close(
    imp1.MatPtr self,
  ) {
    return _cv_Mat_close(
      self,
    );
  }

  late final _cv_Mat_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(imp1.MatPtr)>>('cv_Mat_close');
  late final _cv_Mat_close = _cv_Mat_closePtr.asFunction<void Function(imp1.MatPtr)>();

  void cv_Mat_closeVoid(
    ffi.Pointer<ffi.Void> self,
  ) {
    return _cv_Mat_closeVoid(
      self,
    );
  }

  late final _cv_Mat_closeVoidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('cv_Mat_closeVoid');
  late final _cv_Mat_closeVoid = _cv_Mat_closeVoidPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<CvStatus> cv_Mat_col(
    Mat self,
    int x,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_col(
      self,
      x,
      rval,
      callback,
    );
  }

  late final _cv_Mat_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_col');
  late final _cv_Mat_col = _cv_Mat_colPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  int cv_Mat_cols(
    Mat self,
  ) {
    return _cv_Mat_cols(
      self,
    );
  }

  late final _cv_Mat_colsPtr = _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_cols');
  late final _cv_Mat_cols = _cv_Mat_colsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_convertFp16(
    Mat self,
    Mat rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_convertFp16(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_convertFp16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_Mat_convertFp16');
  late final _cv_Mat_convertFp16 =
      _cv_Mat_convertFp16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_convertTo(
    Mat self,
    Mat dst,
    int type,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_convertTo(
      self,
      dst,
      type,
      callback,
    );
  }

  late final _cv_Mat_convertToPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_Mat_convertTo');
  late final _cv_Mat_convertTo =
      _cv_Mat_convertToPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_convertTo_1(
    Mat self,
    Mat dst,
    int type,
    double alpha,
    double beta,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_convertTo_1(
      self,
      dst,
      type,
      alpha,
      beta,
      callback,
    );
  }

  late final _cv_Mat_convertTo_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Float, ffi.Float, imp1.CvCallback_0)>>('cv_Mat_convertTo_1');
  late final _cv_Mat_convertTo_1 = _cv_Mat_convertTo_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_copyTo(
    Mat self,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_copyTo(
      self,
      dst,
      callback,
    );
  }

  late final _cv_Mat_copyToPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_Mat_copyTo');
  late final _cv_Mat_copyTo =
      _cv_Mat_copyToPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_copyTo_1(
    Mat self,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_copyTo_1(
      self,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_Mat_copyTo_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_Mat_copyTo_1');
  late final _cv_Mat_copyTo_1 =
      _cv_Mat_copyTo_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  /// @brief Create empty Mat
  ///
  /// ALL return values with a type of `Pointer of Struct`,
  /// e.g.,
  /// Mat, the internal pointer (Mat.ptr) MUST be NULL
  /// otherwise the memory of mat.ptr pointed to will NOT be freed correctly.
  /// Mat* mat = (Mat*)malloc(sizeof(Mat));
  /// CvStatus *status = cv_Mat_create(mat);
  /// Mat_close(mat);
  ///
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create(
    ffi.Pointer<Mat> rval,
  ) {
    return _cv_Mat_create(
      rval,
    );
  }

  late final _cv_Mat_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>>('cv_Mat_create');
  late final _cv_Mat_create =
      _cv_Mat_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>();

  /// @brief Create Mat with specified size and type
  ///
  /// @param rows number of rows
  /// @param cols number of columns
  /// @param type type of the created matrix
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_1(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_1(
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_create_1');
  late final _cv_Mat_create_1 = _cv_Mat_create_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_10(
    VecPoint3i vec,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_10(
      vec,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_10Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint3i, ffi.Pointer<Mat>, imp1.CvCallback_0)>>(
      'cv_Mat_create_10');
  late final _cv_Mat_create_10 = _cv_Mat_create_10Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint3i, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with Mat::ptr
  ffi.Pointer<CvStatus> cv_Mat_create_11(
    Mat self,
    int rows,
    int cols,
    int type,
    int prows,
    int pcols,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_11(
      self,
      rows,
      cols,
      type,
      prows,
      pcols,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_11');
  late final _cv_Mat_create_11 = _cv_Mat_create_11Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_12(
    Mat self,
    int rowStart,
    int rowEnd,
    int colStart,
    int colEnd,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_12(
      self,
      rowStart,
      rowEnd,
      colStart,
      colEnd,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_12');
  late final _cv_Mat_create_12 = _cv_Mat_create_12Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_13(
    Mat self,
    CvRect roi,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_13(
      self,
      roi,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_13Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, CvRect, ffi.Pointer<Mat>, imp1.CvCallback_0)>>(
      'cv_Mat_create_13');
  late final _cv_Mat_create_13 = _cv_Mat_create_13Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, CvRect, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with specified sizes and type
  ///
  /// @param sizes array of integers, each describing a dimension
  /// @param type type of the created matrix
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_2(
    VecI32 sizes,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_2(
      sizes,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecI32, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_create_2');
  late final _cv_Mat_create_2 = _cv_Mat_create_2Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(VecI32, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with specified sizes and type
  ///
  /// @param sizes array of integers, each describing a dimension
  /// @param type type of the created matrix
  /// @param ar array of values to initialize the matrix with
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_3(
    VecI32 sizes,
    int type,
    Scalar ar,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_3(
      sizes,
      type,
      ar,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecI32, ffi.Int, Scalar, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_create_3');
  late final _cv_Mat_create_3 = _cv_Mat_create_3Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(VecI32, int, Scalar, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with specified sizes, type and data buffer
  ///
  /// @param sizes array of integers, each describing a dimension
  /// @param type type of the created matrix
  /// @param buf buffer to initialize the matrix with, will be copied
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_4(
    VecI32 sizes,
    int type,
    ffi.Pointer<ffi.Void> buf,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_4(
      sizes,
      type,
      buf,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_4');
  late final _cv_Mat_create_4 = _cv_Mat_create_4Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecI32, int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with Scalar values
  ///
  /// @param scalar array of values to initialize the matrix with
  /// @param rows number of rows
  /// @param cols number of columns
  /// @param type type of the created matrix
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_5(
    Scalar scalar,
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_5(
      scalar,
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_create_5');
  late final _cv_Mat_create_5 = _cv_Mat_create_5Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Scalar, int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with rows, cols, type and data buffer
  ///
  /// @param sizes array of integers, each describing a dimension
  /// @param type type of the created matrix
  /// @param buf buffer to initialize the matrix with, will be copied
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_6(
    int rows,
    int cols,
    int type,
    ffi.Pointer<ffi.Void> buf,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_6(
      rows,
      cols,
      type,
      buf,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_6');
  late final _cv_Mat_create_6 = _cv_Mat_create_6Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_6_no_copy(
    int rows,
    int cols,
    int type,
    ffi.Pointer<ffi.Void> buf,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_6_no_copy(
      rows,
      cols,
      type,
      buf,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_6_no_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>,
              imp1.CvCallback_0)>>('cv_Mat_create_6_no_copy');
  late final _cv_Mat_create_6_no_copy = _cv_Mat_create_6_no_copyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  /// @brief Create Mat with specified vector of points
  ///
  /// @param vec array of points
  /// @param rval Mat*
  /// @return CvStatus
  ffi.Pointer<CvStatus> cv_Mat_create_7(
    VecPoint vec,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_7(
      vec,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_7Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<Mat>, imp1.CvCallback_0)>>(
      'cv_Mat_create_7');
  late final _cv_Mat_create_7 = _cv_Mat_create_7Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_8(
    VecPoint2f vec,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_8(
      vec,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_8Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<Mat>, imp1.CvCallback_0)>>(
      'cv_Mat_create_8');
  late final _cv_Mat_create_8 = _cv_Mat_create_8Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_create_9(
    VecPoint3f vec,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_create_9(
      vec,
      rval,
      callback,
    );
  }

  late final _cv_Mat_create_9Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Pointer<Mat>, imp1.CvCallback_0)>>(
      'cv_Mat_create_9');
  late final _cv_Mat_create_9 = _cv_Mat_create_9Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<imp1.uchar> cv_Mat_data(
    Mat self,
  ) {
    return _cv_Mat_data(
      self,
    );
  }

  late final _cv_Mat_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<imp1.uchar> Function(Mat)>>('cv_Mat_data');
  late final _cv_Mat_data = _cv_Mat_dataPtr.asFunction<ffi.Pointer<imp1.uchar> Function(Mat)>(isLeaf: true);

  int cv_Mat_dims(
    Mat self,
  ) {
    return _cv_Mat_dims(
      self,
    );
  }

  late final _cv_Mat_dimsPtr = _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_dims');
  late final _cv_Mat_dims = _cv_Mat_dimsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  int cv_Mat_elemSize(
    Mat self,
  ) {
    return _cv_Mat_elemSize(
      self,
    );
  }

  late final _cv_Mat_elemSizePtr = _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('cv_Mat_elemSize');
  late final _cv_Mat_elemSize = _cv_Mat_elemSizePtr.asFunction<int Function(Mat)>(isLeaf: true);

  int cv_Mat_elemSize1(
    Mat self,
  ) {
    return _cv_Mat_elemSize1(
      self,
    );
  }

  late final _cv_Mat_elemSize1Ptr = _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('cv_Mat_elemSize1');
  late final _cv_Mat_elemSize1 = _cv_Mat_elemSize1Ptr.asFunction<int Function(Mat)>(isLeaf: true);

  bool cv_Mat_empty(
    Mat self,
  ) {
    return _cv_Mat_empty(
      self,
    );
  }

  late final _cv_Mat_emptyPtr = _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('cv_Mat_empty');
  late final _cv_Mat_empty = _cv_Mat_emptyPtr.asFunction<bool Function(Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_eye(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_eye(
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_eyePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_eye');
  late final _cv_Mat_eye = _cv_Mat_eyePtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  int cv_Mat_flags(
    Mat self,
  ) {
    return _cv_Mat_flags(
      self,
    );
  }

  late final _cv_Mat_flagsPtr = _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_flags');
  late final _cv_Mat_flags = _cv_Mat_flagsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<Vec2b> cv_Mat_get_Vec2b(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2b(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2bPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec2b> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec2b');
  late final _cv_Mat_get_Vec2b =
      _cv_Mat_get_Vec2bPtr.asFunction<ffi.Pointer<Vec2b> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2d> cv_Mat_get_Vec2d(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2d(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2dPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec2d> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec2d');
  late final _cv_Mat_get_Vec2d =
      _cv_Mat_get_Vec2dPtr.asFunction<ffi.Pointer<Vec2d> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2f> cv_Mat_get_Vec2f(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2f(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2fPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec2f> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec2f');
  late final _cv_Mat_get_Vec2f =
      _cv_Mat_get_Vec2fPtr.asFunction<ffi.Pointer<Vec2f> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2i> cv_Mat_get_Vec2i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2iPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec2i> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec2i');
  late final _cv_Mat_get_Vec2i =
      _cv_Mat_get_Vec2iPtr.asFunction<ffi.Pointer<Vec2i> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2s> cv_Mat_get_Vec2s(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2s(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2sPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec2s> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec2s');
  late final _cv_Mat_get_Vec2s =
      _cv_Mat_get_Vec2sPtr.asFunction<ffi.Pointer<Vec2s> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec2w> cv_Mat_get_Vec2w(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec2w(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec2wPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec2w> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec2w');
  late final _cv_Mat_get_Vec2w =
      _cv_Mat_get_Vec2wPtr.asFunction<ffi.Pointer<Vec2w> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3b> cv_Mat_get_Vec3b(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3b(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3bPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec3b> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec3b');
  late final _cv_Mat_get_Vec3b =
      _cv_Mat_get_Vec3bPtr.asFunction<ffi.Pointer<Vec3b> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3d> cv_Mat_get_Vec3d(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3d(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3dPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec3d> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec3d');
  late final _cv_Mat_get_Vec3d =
      _cv_Mat_get_Vec3dPtr.asFunction<ffi.Pointer<Vec3d> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3f> cv_Mat_get_Vec3f(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3f(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3fPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec3f> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec3f');
  late final _cv_Mat_get_Vec3f =
      _cv_Mat_get_Vec3fPtr.asFunction<ffi.Pointer<Vec3f> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3i> cv_Mat_get_Vec3i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3iPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec3i> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec3i');
  late final _cv_Mat_get_Vec3i =
      _cv_Mat_get_Vec3iPtr.asFunction<ffi.Pointer<Vec3i> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3s> cv_Mat_get_Vec3s(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3s(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3sPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec3s> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec3s');
  late final _cv_Mat_get_Vec3s =
      _cv_Mat_get_Vec3sPtr.asFunction<ffi.Pointer<Vec3s> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec3w> cv_Mat_get_Vec3w(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec3w(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec3wPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec3w> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec3w');
  late final _cv_Mat_get_Vec3w =
      _cv_Mat_get_Vec3wPtr.asFunction<ffi.Pointer<Vec3w> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4b> cv_Mat_get_Vec4b(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4b(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4bPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4b> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec4b');
  late final _cv_Mat_get_Vec4b =
      _cv_Mat_get_Vec4bPtr.asFunction<ffi.Pointer<Vec4b> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4d> cv_Mat_get_Vec4d(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4d(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4dPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4d> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec4d');
  late final _cv_Mat_get_Vec4d =
      _cv_Mat_get_Vec4dPtr.asFunction<ffi.Pointer<Vec4d> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4f> cv_Mat_get_Vec4f(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4f(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4fPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4f> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec4f');
  late final _cv_Mat_get_Vec4f =
      _cv_Mat_get_Vec4fPtr.asFunction<ffi.Pointer<Vec4f> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4i> cv_Mat_get_Vec4i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4iPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4i> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec4i');
  late final _cv_Mat_get_Vec4i =
      _cv_Mat_get_Vec4iPtr.asFunction<ffi.Pointer<Vec4i> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4s> cv_Mat_get_Vec4s(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4s(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4sPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4s> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec4s');
  late final _cv_Mat_get_Vec4s =
      _cv_Mat_get_Vec4sPtr.asFunction<ffi.Pointer<Vec4s> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec4w> cv_Mat_get_Vec4w(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec4w(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec4wPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4w> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec4w');
  late final _cv_Mat_get_Vec4w =
      _cv_Mat_get_Vec4wPtr.asFunction<ffi.Pointer<Vec4w> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec6d> cv_Mat_get_Vec6d(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec6d(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec6dPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec6d> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec6d');
  late final _cv_Mat_get_Vec6d =
      _cv_Mat_get_Vec6dPtr.asFunction<ffi.Pointer<Vec6d> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec6f> cv_Mat_get_Vec6f(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec6f(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec6fPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec6f> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec6f');
  late final _cv_Mat_get_Vec6f =
      _cv_Mat_get_Vec6fPtr.asFunction<ffi.Pointer<Vec6f> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec6i> cv_Mat_get_Vec6i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec6i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec6iPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec6i> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec6i');
  late final _cv_Mat_get_Vec6i =
      _cv_Mat_get_Vec6iPtr.asFunction<ffi.Pointer<Vec6i> Function(Mat, int, int)>(isLeaf: true);

  ffi.Pointer<Vec8i> cv_Mat_get_Vec8i(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_Vec8i(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_Vec8iPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec8i> Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_Vec8i');
  late final _cv_Mat_get_Vec8i =
      _cv_Mat_get_Vec8iPtr.asFunction<ffi.Pointer<Vec8i> Function(Mat, int, int)>(isLeaf: true);

  double cv_Mat_get_f32_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_f32_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_f32_1Ptr =
      _lookup<ffi.NativeFunction<float_t Function(Mat, ffi.Int)>>('cv_Mat_get_f32_1');
  late final _cv_Mat_get_f32_1 = _cv_Mat_get_f32_1Ptr.asFunction<double Function(Mat, int)>(isLeaf: true);

  double cv_Mat_get_f32_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_f32_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_f32_2Ptr =
      _lookup<ffi.NativeFunction<float_t Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_f32_2');
  late final _cv_Mat_get_f32_2 =
      _cv_Mat_get_f32_2Ptr.asFunction<double Function(Mat, int, int)>(isLeaf: true);

  double cv_Mat_get_f32_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_f32_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_f32_3Ptr =
      _lookup<ffi.NativeFunction<float_t Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('cv_Mat_get_f32_3');
  late final _cv_Mat_get_f32_3 =
      _cv_Mat_get_f32_3Ptr.asFunction<double Function(Mat, int, int, int)>(isLeaf: true);

  double cv_Mat_get_f64_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_f64_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_f64_1Ptr =
      _lookup<ffi.NativeFunction<double_t Function(Mat, ffi.Int)>>('cv_Mat_get_f64_1');
  late final _cv_Mat_get_f64_1 = _cv_Mat_get_f64_1Ptr.asFunction<double Function(Mat, int)>(isLeaf: true);

  double cv_Mat_get_f64_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_f64_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_f64_2Ptr =
      _lookup<ffi.NativeFunction<double_t Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_f64_2');
  late final _cv_Mat_get_f64_2 =
      _cv_Mat_get_f64_2Ptr.asFunction<double Function(Mat, int, int)>(isLeaf: true);

  double cv_Mat_get_f64_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_f64_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_f64_3Ptr =
      _lookup<ffi.NativeFunction<double_t Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('cv_Mat_get_f64_3');
  late final _cv_Mat_get_f64_3 =
      _cv_Mat_get_f64_3Ptr.asFunction<double Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_i16_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_i16_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_i16_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(Mat, ffi.Int)>>('cv_Mat_get_i16_1');
  late final _cv_Mat_get_i16_1 = _cv_Mat_get_i16_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_i16_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_i16_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_i16_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_i16_2');
  late final _cv_Mat_get_i16_2 = _cv_Mat_get_i16_2Ptr.asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_i16_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_i16_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_i16_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('cv_Mat_get_i16_3');
  late final _cv_Mat_get_i16_3 =
      _cv_Mat_get_i16_3Ptr.asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_i32_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_i32_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_i32_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Mat, ffi.Int)>>('cv_Mat_get_i32_1');
  late final _cv_Mat_get_i32_1 = _cv_Mat_get_i32_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_i32_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_i32_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_i32_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_i32_2');
  late final _cv_Mat_get_i32_2 = _cv_Mat_get_i32_2Ptr.asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_i32_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_i32_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_i32_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('cv_Mat_get_i32_3');
  late final _cv_Mat_get_i32_3 =
      _cv_Mat_get_i32_3Ptr.asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_i8_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_i8_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_i8_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(Mat, ffi.Int)>>('cv_Mat_get_i8_1');
  late final _cv_Mat_get_i8_1 = _cv_Mat_get_i8_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_i8_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_i8_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_i8_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_i8_2');
  late final _cv_Mat_get_i8_2 = _cv_Mat_get_i8_2Ptr.asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_i8_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_i8_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_i8_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('cv_Mat_get_i8_3');
  late final _cv_Mat_get_i8_3 =
      _cv_Mat_get_i8_3Ptr.asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_u16_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_u16_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_u16_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(Mat, ffi.Int)>>('cv_Mat_get_u16_1');
  late final _cv_Mat_get_u16_1 = _cv_Mat_get_u16_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_u16_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_u16_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_u16_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_u16_2');
  late final _cv_Mat_get_u16_2 = _cv_Mat_get_u16_2Ptr.asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_u16_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_u16_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_u16_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('cv_Mat_get_u16_3');
  late final _cv_Mat_get_u16_3 =
      _cv_Mat_get_u16_3Ptr.asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  int cv_Mat_get_u8_1(
    Mat self,
    int i0,
  ) {
    return _cv_Mat_get_u8_1(
      self,
      i0,
    );
  }

  late final _cv_Mat_get_u8_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Mat, ffi.Int)>>('cv_Mat_get_u8_1');
  late final _cv_Mat_get_u8_1 = _cv_Mat_get_u8_1Ptr.asFunction<int Function(Mat, int)>(isLeaf: true);

  int cv_Mat_get_u8_2(
    Mat self,
    int i0,
    int i1,
  ) {
    return _cv_Mat_get_u8_2(
      self,
      i0,
      i1,
    );
  }

  late final _cv_Mat_get_u8_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int)>>('cv_Mat_get_u8_2');
  late final _cv_Mat_get_u8_2 = _cv_Mat_get_u8_2Ptr.asFunction<int Function(Mat, int, int)>(isLeaf: true);

  int cv_Mat_get_u8_3(
    Mat self,
    int i0,
    int i1,
    int i2,
  ) {
    return _cv_Mat_get_u8_3(
      self,
      i0,
      i1,
      i2,
    );
  }

  late final _cv_Mat_get_u8_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('cv_Mat_get_u8_3');
  late final _cv_Mat_get_u8_3 =
      _cv_Mat_get_u8_3Ptr.asFunction<int Function(Mat, int, int, int)>(isLeaf: true);

  bool cv_Mat_isContinuous(
    Mat self,
  ) {
    return _cv_Mat_isContinuous(
      self,
    );
  }

  late final _cv_Mat_isContinuousPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('cv_Mat_isContinuous');
  late final _cv_Mat_isContinuous = _cv_Mat_isContinuousPtr.asFunction<bool Function(Mat)>(isLeaf: true);

  bool cv_Mat_isSubmatrix(
    Mat self,
  ) {
    return _cv_Mat_isSubmatrix(
      self,
    );
  }

  late final _cv_Mat_isSubmatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('cv_Mat_isSubmatrix');
  late final _cv_Mat_isSubmatrix = _cv_Mat_isSubmatrixPtr.asFunction<bool Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_locateROI(
    Mat self,
    ffi.Pointer<CvSize> wholeSize,
    ffi.Pointer<CvPoint> ofs,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_locateROI(
      self,
      wholeSize,
      ofs,
      callback,
    );
  }

  late final _cv_Mat_locateROIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<CvSize>, ffi.Pointer<CvPoint>, imp1.CvCallback_0)>>('cv_Mat_locateROI');
  late final _cv_Mat_locateROI = _cv_Mat_locateROIPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<CvSize>, ffi.Pointer<CvPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_mean(
    Mat self,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_mean(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_meanPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>(
      'cv_Mat_mean');
  late final _cv_Mat_mean = _cv_Mat_meanPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_mean_1(
    Mat self,
    Mat mask,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_mean_1(
      self,
      mask,
      rval,
      callback,
    );
  }

  late final _cv_Mat_mean_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_Mat_mean_1');
  late final _cv_Mat_mean_1 = _cv_Mat_mean_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_mul(
    Mat self,
    Mat val,
    ffi.Pointer<Mat> dst,
    double scale,
  ) {
    return _cv_Mat_mul(
      self,
      val,
      dst,
      scale,
    );
  }

  late final _cv_Mat_mulPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>, ffi.Double)>>(
          'cv_Mat_mul');
  late final _cv_Mat_mul =
      _cv_Mat_mulPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>, double)>();

  ffi.Pointer<CvStatus> cv_Mat_ones(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_ones(
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_onesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_ones');
  late final _cv_Mat_ones = _cv_Mat_onesPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_f32(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_add_f32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_f32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>('cv_Mat_op_add_f32');
  late final _cv_Mat_op_add_f32 =
      _cv_Mat_op_add_f32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_f64(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_add_f64(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_f64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>('cv_Mat_op_add_f64');
  late final _cv_Mat_op_add_f64 =
      _cv_Mat_op_add_f64Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_i16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_i16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_i16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>('cv_Mat_op_add_i16');
  late final _cv_Mat_op_add_i16 =
      _cv_Mat_op_add_i16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_i32(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_i32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_i32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>('cv_Mat_op_add_i32');
  late final _cv_Mat_op_add_i32 =
      _cv_Mat_op_add_i32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_i8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_i8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_i8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>('cv_Mat_op_add_i8');
  late final _cv_Mat_op_add_i8 = _cv_Mat_op_add_i8Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_mat(
    Mat self,
    Mat val,
  ) {
    return _cv_Mat_op_add_mat(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_matPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>('cv_Mat_op_add_mat');
  late final _cv_Mat_op_add_mat =
      _cv_Mat_op_add_matPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_u16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_u16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_u16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>('cv_Mat_op_add_u16');
  late final _cv_Mat_op_add_u16 =
      _cv_Mat_op_add_u16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_add_u8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_add_u8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_add_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>('cv_Mat_op_add_u8');
  late final _cv_Mat_op_add_u8 = _cv_Mat_op_add_u8Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_f32(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_div_f32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_f32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>('cv_Mat_op_div_f32');
  late final _cv_Mat_op_div_f32 =
      _cv_Mat_op_div_f32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_f64(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_div_f64(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_f64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>('cv_Mat_op_div_f64');
  late final _cv_Mat_op_div_f64 =
      _cv_Mat_op_div_f64Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_i16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_i16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_i16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>('cv_Mat_op_div_i16');
  late final _cv_Mat_op_div_i16 =
      _cv_Mat_op_div_i16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_i32(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_i32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_i32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>('cv_Mat_op_div_i32');
  late final _cv_Mat_op_div_i32 =
      _cv_Mat_op_div_i32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_i8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_i8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_i8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>('cv_Mat_op_div_i8');
  late final _cv_Mat_op_div_i8 = _cv_Mat_op_div_i8Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_mat(
    Mat self,
    Mat val,
  ) {
    return _cv_Mat_op_div_mat(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_matPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>('cv_Mat_op_div_mat');
  late final _cv_Mat_op_div_mat =
      _cv_Mat_op_div_matPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_u16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_u16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_u16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>('cv_Mat_op_div_u16');
  late final _cv_Mat_op_div_u16 =
      _cv_Mat_op_div_u16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_div_u8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_div_u8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_div_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>('cv_Mat_op_div_u8');
  late final _cv_Mat_op_div_u8 = _cv_Mat_op_div_u8Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_f32(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_mul_f32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_f32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>('cv_Mat_op_mul_f32');
  late final _cv_Mat_op_mul_f32 =
      _cv_Mat_op_mul_f32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_f64(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_mul_f64(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_f64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>('cv_Mat_op_mul_f64');
  late final _cv_Mat_op_mul_f64 =
      _cv_Mat_op_mul_f64Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_i16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_i16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_i16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>('cv_Mat_op_mul_i16');
  late final _cv_Mat_op_mul_i16 =
      _cv_Mat_op_mul_i16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_i32(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_i32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_i32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>('cv_Mat_op_mul_i32');
  late final _cv_Mat_op_mul_i32 =
      _cv_Mat_op_mul_i32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_i8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_i8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_i8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>('cv_Mat_op_mul_i8');
  late final _cv_Mat_op_mul_i8 = _cv_Mat_op_mul_i8Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_mat(
    Mat self,
    Mat val,
  ) {
    return _cv_Mat_op_mul_mat(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_matPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>('cv_Mat_op_mul_mat');
  late final _cv_Mat_op_mul_mat =
      _cv_Mat_op_mul_matPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_u16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_u16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_u16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>('cv_Mat_op_mul_u16');
  late final _cv_Mat_op_mul_u16 =
      _cv_Mat_op_mul_u16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_mul_u8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_mul_u8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_mul_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>('cv_Mat_op_mul_u8');
  late final _cv_Mat_op_mul_u8 = _cv_Mat_op_mul_u8Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_f32(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_sub_f32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_f32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, float_t)>>('cv_Mat_op_sub_f32');
  late final _cv_Mat_op_sub_f32 =
      _cv_Mat_op_sub_f32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_f64(
    Mat self,
    double val,
  ) {
    return _cv_Mat_op_sub_f64(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_f64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, double_t)>>('cv_Mat_op_sub_f64');
  late final _cv_Mat_op_sub_f64 =
      _cv_Mat_op_sub_f64Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_i16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_i16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_i16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>>('cv_Mat_op_sub_i16');
  late final _cv_Mat_op_sub_i16 =
      _cv_Mat_op_sub_i16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_i32(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_i32(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_i32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>>('cv_Mat_op_sub_i32');
  late final _cv_Mat_op_sub_i32 =
      _cv_Mat_op_sub_i32Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_i8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_i8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_i8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>>('cv_Mat_op_sub_i8');
  late final _cv_Mat_op_sub_i8 = _cv_Mat_op_sub_i8Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_mat(
    Mat self,
    Mat val,
  ) {
    return _cv_Mat_op_sub_mat(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_matPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>>('cv_Mat_op_sub_mat');
  late final _cv_Mat_op_sub_mat =
      _cv_Mat_op_sub_matPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_u16(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_u16(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_u16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>>('cv_Mat_op_sub_u16');
  late final _cv_Mat_op_sub_u16 =
      _cv_Mat_op_sub_u16Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_op_sub_u8(
    Mat self,
    int val,
  ) {
    return _cv_Mat_op_sub_u8(
      self,
      val,
    );
  }

  late final _cv_Mat_op_sub_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>>('cv_Mat_op_sub_u8');
  late final _cv_Mat_op_sub_u8 = _cv_Mat_op_sub_u8Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int)>();

  ffi.Pointer<CvStatus> cv_Mat_patchNaNs(
    Mat self,
    double val,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_patchNaNs(
      self,
      val,
      callback,
    );
  }

  late final _cv_Mat_patchNaNsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, imp1.CvCallback_0)>>(
          'cv_Mat_patchNaNs');
  late final _cv_Mat_patchNaNs =
      _cv_Mat_patchNaNsPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<imp1.uchar> cv_Mat_ptr_uchar_1(
    Mat self,
    int i,
  ) {
    return _cv_Mat_ptr_uchar_1(
      self,
      i,
    );
  }

  late final _cv_Mat_ptr_uchar_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<imp1.uchar> Function(Mat, ffi.Int)>>('cv_Mat_ptr_uchar_1');
  late final _cv_Mat_ptr_uchar_1 =
      _cv_Mat_ptr_uchar_1Ptr.asFunction<ffi.Pointer<imp1.uchar> Function(Mat, int)>();

  ffi.Pointer<imp1.uchar> cv_Mat_ptr_uchar_2(
    Mat self,
    int i,
    int j,
  ) {
    return _cv_Mat_ptr_uchar_2(
      self,
      i,
      j,
    );
  }

  late final _cv_Mat_ptr_uchar_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<imp1.uchar> Function(Mat, ffi.Int, ffi.Int)>>(
          'cv_Mat_ptr_uchar_2');
  late final _cv_Mat_ptr_uchar_2 =
      _cv_Mat_ptr_uchar_2Ptr.asFunction<ffi.Pointer<imp1.uchar> Function(Mat, int, int)>();

  ffi.Pointer<imp1.uchar> cv_Mat_ptr_uchar_3(
    Mat self,
    int i,
    int j,
    int k,
  ) {
    return _cv_Mat_ptr_uchar_3(
      self,
      i,
      j,
      k,
    );
  }

  late final _cv_Mat_ptr_uchar_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<imp1.uchar> Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
          'cv_Mat_ptr_uchar_3');
  late final _cv_Mat_ptr_uchar_3 =
      _cv_Mat_ptr_uchar_3Ptr.asFunction<ffi.Pointer<imp1.uchar> Function(Mat, int, int, int)>();

  ffi.Pointer<CvStatus> cv_Mat_region(
    Mat self,
    CvRect r,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_region(
      self,
      r,
      rval,
      callback,
    );
  }

  late final _cv_Mat_regionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, CvRect, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_region');
  late final _cv_Mat_region = _cv_Mat_regionPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, CvRect, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_release(
    Mat self,
  ) {
    return _cv_Mat_release(
      self,
    );
  }

  late final _cv_Mat_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat)>>('cv_Mat_release');
  late final _cv_Mat_release = _cv_Mat_releasePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat)>();

  ffi.Pointer<CvStatus> cv_Mat_reshape(
    Mat self,
    int cn,
    int rows,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_reshape(
      self,
      cn,
      rows,
      rval,
      callback,
    );
  }

  late final _cv_Mat_reshapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_reshape');
  late final _cv_Mat_reshape = _cv_Mat_reshapePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_reshape_1(
    Mat self,
    int cn,
    VecI32 newshape,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_reshape_1(
      self,
      cn,
      newshape,
      rval,
      callback,
    );
  }

  late final _cv_Mat_reshape_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, VecI32, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_reshape_1');
  late final _cv_Mat_reshape_1 = _cv_Mat_reshape_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int, VecI32, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_row(
    Mat self,
    int y,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_row(
      self,
      y,
      rval,
      callback,
    );
  }

  late final _cv_Mat_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_row');
  late final _cv_Mat_row = _cv_Mat_rowPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  int cv_Mat_rows(
    Mat self,
  ) {
    return _cv_Mat_rows(
      self,
    );
  }

  late final _cv_Mat_rowsPtr = _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_rows');
  late final _cv_Mat_rows = _cv_Mat_rowsPtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_setTo(
    Mat self,
    Scalar value,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_setTo(
      self,
      value,
      mask,
      callback,
    );
  }

  late final _cv_Mat_setToPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Mat, imp1.CvCallback_0)>>(
          'cv_Mat_setTo');
  late final _cv_Mat_setTo = _cv_Mat_setToPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Mat, imp1.CvCallback_0)>(isLeaf: true);

  void cv_Mat_set_Vec2b(
    Mat self,
    int i0,
    int i1,
    Vec2b val,
  ) {
    return _cv_Mat_set_Vec2b(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2bPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2b)>>('cv_Mat_set_Vec2b');
  late final _cv_Mat_set_Vec2b =
      _cv_Mat_set_Vec2bPtr.asFunction<void Function(Mat, int, int, Vec2b)>(isLeaf: true);

  void cv_Mat_set_Vec2d(
    Mat self,
    int i0,
    int i1,
    Vec2d val,
  ) {
    return _cv_Mat_set_Vec2d(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2d)>>('cv_Mat_set_Vec2d');
  late final _cv_Mat_set_Vec2d =
      _cv_Mat_set_Vec2dPtr.asFunction<void Function(Mat, int, int, Vec2d)>(isLeaf: true);

  void cv_Mat_set_Vec2f(
    Mat self,
    int i0,
    int i1,
    Vec2f val,
  ) {
    return _cv_Mat_set_Vec2f(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2f)>>('cv_Mat_set_Vec2f');
  late final _cv_Mat_set_Vec2f =
      _cv_Mat_set_Vec2fPtr.asFunction<void Function(Mat, int, int, Vec2f)>(isLeaf: true);

  void cv_Mat_set_Vec2i(
    Mat self,
    int i0,
    int i1,
    Vec2i val,
  ) {
    return _cv_Mat_set_Vec2i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2i)>>('cv_Mat_set_Vec2i');
  late final _cv_Mat_set_Vec2i =
      _cv_Mat_set_Vec2iPtr.asFunction<void Function(Mat, int, int, Vec2i)>(isLeaf: true);

  void cv_Mat_set_Vec2s(
    Mat self,
    int i0,
    int i1,
    Vec2s val,
  ) {
    return _cv_Mat_set_Vec2s(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2sPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2s)>>('cv_Mat_set_Vec2s');
  late final _cv_Mat_set_Vec2s =
      _cv_Mat_set_Vec2sPtr.asFunction<void Function(Mat, int, int, Vec2s)>(isLeaf: true);

  void cv_Mat_set_Vec2w(
    Mat self,
    int i0,
    int i1,
    Vec2w val,
  ) {
    return _cv_Mat_set_Vec2w(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec2wPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec2w)>>('cv_Mat_set_Vec2w');
  late final _cv_Mat_set_Vec2w =
      _cv_Mat_set_Vec2wPtr.asFunction<void Function(Mat, int, int, Vec2w)>(isLeaf: true);

  void cv_Mat_set_Vec3b(
    Mat self,
    int i0,
    int i1,
    Vec3b val,
  ) {
    return _cv_Mat_set_Vec3b(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3bPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3b)>>('cv_Mat_set_Vec3b');
  late final _cv_Mat_set_Vec3b =
      _cv_Mat_set_Vec3bPtr.asFunction<void Function(Mat, int, int, Vec3b)>(isLeaf: true);

  void cv_Mat_set_Vec3d(
    Mat self,
    int i0,
    int i1,
    Vec3d val,
  ) {
    return _cv_Mat_set_Vec3d(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3d)>>('cv_Mat_set_Vec3d');
  late final _cv_Mat_set_Vec3d =
      _cv_Mat_set_Vec3dPtr.asFunction<void Function(Mat, int, int, Vec3d)>(isLeaf: true);

  void cv_Mat_set_Vec3f(
    Mat self,
    int i0,
    int i1,
    Vec3f val,
  ) {
    return _cv_Mat_set_Vec3f(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3f)>>('cv_Mat_set_Vec3f');
  late final _cv_Mat_set_Vec3f =
      _cv_Mat_set_Vec3fPtr.asFunction<void Function(Mat, int, int, Vec3f)>(isLeaf: true);

  void cv_Mat_set_Vec3i(
    Mat self,
    int i0,
    int i1,
    Vec3i val,
  ) {
    return _cv_Mat_set_Vec3i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3i)>>('cv_Mat_set_Vec3i');
  late final _cv_Mat_set_Vec3i =
      _cv_Mat_set_Vec3iPtr.asFunction<void Function(Mat, int, int, Vec3i)>(isLeaf: true);

  void cv_Mat_set_Vec3s(
    Mat self,
    int i0,
    int i1,
    Vec3s val,
  ) {
    return _cv_Mat_set_Vec3s(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3sPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3s)>>('cv_Mat_set_Vec3s');
  late final _cv_Mat_set_Vec3s =
      _cv_Mat_set_Vec3sPtr.asFunction<void Function(Mat, int, int, Vec3s)>(isLeaf: true);

  void cv_Mat_set_Vec3w(
    Mat self,
    int i0,
    int i1,
    Vec3w val,
  ) {
    return _cv_Mat_set_Vec3w(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec3wPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec3w)>>('cv_Mat_set_Vec3w');
  late final _cv_Mat_set_Vec3w =
      _cv_Mat_set_Vec3wPtr.asFunction<void Function(Mat, int, int, Vec3w)>(isLeaf: true);

  void cv_Mat_set_Vec4b(
    Mat self,
    int i0,
    int i1,
    Vec4b val,
  ) {
    return _cv_Mat_set_Vec4b(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4bPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4b)>>('cv_Mat_set_Vec4b');
  late final _cv_Mat_set_Vec4b =
      _cv_Mat_set_Vec4bPtr.asFunction<void Function(Mat, int, int, Vec4b)>(isLeaf: true);

  void cv_Mat_set_Vec4d(
    Mat self,
    int i0,
    int i1,
    Vec4d val,
  ) {
    return _cv_Mat_set_Vec4d(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4d)>>('cv_Mat_set_Vec4d');
  late final _cv_Mat_set_Vec4d =
      _cv_Mat_set_Vec4dPtr.asFunction<void Function(Mat, int, int, Vec4d)>(isLeaf: true);

  void cv_Mat_set_Vec4f(
    Mat self,
    int i0,
    int i1,
    Vec4f val,
  ) {
    return _cv_Mat_set_Vec4f(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4f)>>('cv_Mat_set_Vec4f');
  late final _cv_Mat_set_Vec4f =
      _cv_Mat_set_Vec4fPtr.asFunction<void Function(Mat, int, int, Vec4f)>(isLeaf: true);

  void cv_Mat_set_Vec4i(
    Mat self,
    int i0,
    int i1,
    Vec4i val,
  ) {
    return _cv_Mat_set_Vec4i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4i)>>('cv_Mat_set_Vec4i');
  late final _cv_Mat_set_Vec4i =
      _cv_Mat_set_Vec4iPtr.asFunction<void Function(Mat, int, int, Vec4i)>(isLeaf: true);

  void cv_Mat_set_Vec4s(
    Mat self,
    int i0,
    int i1,
    Vec4s val,
  ) {
    return _cv_Mat_set_Vec4s(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4sPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4s)>>('cv_Mat_set_Vec4s');
  late final _cv_Mat_set_Vec4s =
      _cv_Mat_set_Vec4sPtr.asFunction<void Function(Mat, int, int, Vec4s)>(isLeaf: true);

  void cv_Mat_set_Vec4w(
    Mat self,
    int i0,
    int i1,
    Vec4w val,
  ) {
    return _cv_Mat_set_Vec4w(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec4wPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec4w)>>('cv_Mat_set_Vec4w');
  late final _cv_Mat_set_Vec4w =
      _cv_Mat_set_Vec4wPtr.asFunction<void Function(Mat, int, int, Vec4w)>(isLeaf: true);

  void cv_Mat_set_Vec6d(
    Mat self,
    int i0,
    int i1,
    Vec6d val,
  ) {
    return _cv_Mat_set_Vec6d(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec6dPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6d)>>('cv_Mat_set_Vec6d');
  late final _cv_Mat_set_Vec6d =
      _cv_Mat_set_Vec6dPtr.asFunction<void Function(Mat, int, int, Vec6d)>(isLeaf: true);

  void cv_Mat_set_Vec6f(
    Mat self,
    int i0,
    int i1,
    Vec6f val,
  ) {
    return _cv_Mat_set_Vec6f(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec6fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6f)>>('cv_Mat_set_Vec6f');
  late final _cv_Mat_set_Vec6f =
      _cv_Mat_set_Vec6fPtr.asFunction<void Function(Mat, int, int, Vec6f)>(isLeaf: true);

  void cv_Mat_set_Vec6i(
    Mat self,
    int i0,
    int i1,
    Vec6i val,
  ) {
    return _cv_Mat_set_Vec6i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec6iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec6i)>>('cv_Mat_set_Vec6i');
  late final _cv_Mat_set_Vec6i =
      _cv_Mat_set_Vec6iPtr.asFunction<void Function(Mat, int, int, Vec6i)>(isLeaf: true);

  void cv_Mat_set_Vec8i(
    Mat self,
    int i0,
    int i1,
    Vec8i val,
  ) {
    return _cv_Mat_set_Vec8i(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_Vec8iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Vec8i)>>('cv_Mat_set_Vec8i');
  late final _cv_Mat_set_Vec8i =
      _cv_Mat_set_Vec8iPtr.asFunction<void Function(Mat, int, int, Vec8i)>(isLeaf: true);

  void cv_Mat_set_f32_1(
    Mat self,
    int i0,
    double val,
  ) {
    return _cv_Mat_set_f32_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_f32_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, float_t)>>('cv_Mat_set_f32_1');
  late final _cv_Mat_set_f32_1 =
      _cv_Mat_set_f32_1Ptr.asFunction<void Function(Mat, int, double)>(isLeaf: true);

  void cv_Mat_set_f32_2(
    Mat self,
    int i0,
    int i1,
    double val,
  ) {
    return _cv_Mat_set_f32_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_f32_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, float_t)>>('cv_Mat_set_f32_2');
  late final _cv_Mat_set_f32_2 =
      _cv_Mat_set_f32_2Ptr.asFunction<void Function(Mat, int, int, double)>(isLeaf: true);

  void cv_Mat_set_f32_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    double val,
  ) {
    return _cv_Mat_set_f32_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_f32_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, float_t)>>(
          'cv_Mat_set_f32_3');
  late final _cv_Mat_set_f32_3 =
      _cv_Mat_set_f32_3Ptr.asFunction<void Function(Mat, int, int, int, double)>(isLeaf: true);

  void cv_Mat_set_f64_1(
    Mat self,
    int i0,
    double val,
  ) {
    return _cv_Mat_set_f64_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_f64_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, double_t)>>('cv_Mat_set_f64_1');
  late final _cv_Mat_set_f64_1 =
      _cv_Mat_set_f64_1Ptr.asFunction<void Function(Mat, int, double)>(isLeaf: true);

  void cv_Mat_set_f64_2(
    Mat self,
    int i0,
    int i1,
    double val,
  ) {
    return _cv_Mat_set_f64_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_f64_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, double_t)>>('cv_Mat_set_f64_2');
  late final _cv_Mat_set_f64_2 =
      _cv_Mat_set_f64_2Ptr.asFunction<void Function(Mat, int, int, double)>(isLeaf: true);

  void cv_Mat_set_f64_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    double val,
  ) {
    return _cv_Mat_set_f64_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_f64_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, double_t)>>(
          'cv_Mat_set_f64_3');
  late final _cv_Mat_set_f64_3 =
      _cv_Mat_set_f64_3Ptr.asFunction<void Function(Mat, int, int, int, double)>(isLeaf: true);

  void cv_Mat_set_i16_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_i16_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_i16_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int16)>>('cv_Mat_set_i16_1');
  late final _cv_Mat_set_i16_1 = _cv_Mat_set_i16_1Ptr.asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_i16_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_i16_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_i16_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int16)>>('cv_Mat_set_i16_2');
  late final _cv_Mat_set_i16_2 =
      _cv_Mat_set_i16_2Ptr.asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i16_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_i16_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_i16_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>>(
          'cv_Mat_set_i16_3');
  late final _cv_Mat_set_i16_3 =
      _cv_Mat_set_i16_3Ptr.asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i32_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_i32_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_i32_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int32)>>('cv_Mat_set_i32_1');
  late final _cv_Mat_set_i32_1 = _cv_Mat_set_i32_1Ptr.asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_i32_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_i32_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_i32_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int32)>>('cv_Mat_set_i32_2');
  late final _cv_Mat_set_i32_2 =
      _cv_Mat_set_i32_2Ptr.asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i32_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_i32_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_i32_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>>(
          'cv_Mat_set_i32_3');
  late final _cv_Mat_set_i32_3 =
      _cv_Mat_set_i32_3Ptr.asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i8_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_i8_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_i8_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int8)>>('cv_Mat_set_i8_1');
  late final _cv_Mat_set_i8_1 = _cv_Mat_set_i8_1Ptr.asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_i8_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_i8_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_i8_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int8)>>('cv_Mat_set_i8_2');
  late final _cv_Mat_set_i8_2 =
      _cv_Mat_set_i8_2Ptr.asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_i8_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_i8_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_i8_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>>(
          'cv_Mat_set_i8_3');
  late final _cv_Mat_set_i8_3 =
      _cv_Mat_set_i8_3Ptr.asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  void cv_Mat_set_u16_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_u16_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_u16_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Uint16)>>('cv_Mat_set_u16_1');
  late final _cv_Mat_set_u16_1 = _cv_Mat_set_u16_1Ptr.asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_u16_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_u16_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_u16_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Uint16)>>('cv_Mat_set_u16_2');
  late final _cv_Mat_set_u16_2 =
      _cv_Mat_set_u16_2Ptr.asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_u16_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_u16_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_u16_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint16)>>(
          'cv_Mat_set_u16_3');
  late final _cv_Mat_set_u16_3 =
      _cv_Mat_set_u16_3Ptr.asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  void cv_Mat_set_u8_1(
    Mat self,
    int i0,
    int val,
  ) {
    return _cv_Mat_set_u8_1(
      self,
      i0,
      val,
    );
  }

  late final _cv_Mat_set_u8_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Uint8)>>('cv_Mat_set_u8_1');
  late final _cv_Mat_set_u8_1 = _cv_Mat_set_u8_1Ptr.asFunction<void Function(Mat, int, int)>(isLeaf: true);

  void cv_Mat_set_u8_2(
    Mat self,
    int i0,
    int i1,
    int val,
  ) {
    return _cv_Mat_set_u8_2(
      self,
      i0,
      i1,
      val,
    );
  }

  late final _cv_Mat_set_u8_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Uint8)>>('cv_Mat_set_u8_2');
  late final _cv_Mat_set_u8_2 =
      _cv_Mat_set_u8_2Ptr.asFunction<void Function(Mat, int, int, int)>(isLeaf: true);

  void cv_Mat_set_u8_3(
    Mat self,
    int i0,
    int i1,
    int i2,
    int val,
  ) {
    return _cv_Mat_set_u8_3(
      self,
      i0,
      i1,
      i2,
      val,
    );
  }

  late final _cv_Mat_set_u8_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>>(
          'cv_Mat_set_u8_3');
  late final _cv_Mat_set_u8_3 =
      _cv_Mat_set_u8_3Ptr.asFunction<void Function(Mat, int, int, int, int)>(isLeaf: true);

  ffi.Pointer<VecI32> cv_Mat_size(
    Mat self,
  ) {
    return _cv_Mat_size(
      self,
    );
  }

  late final _cv_Mat_sizePtr = _lookup<ffi.NativeFunction<ffi.Pointer<VecI32> Function(Mat)>>('cv_Mat_size');
  late final _cv_Mat_size = _cv_Mat_sizePtr.asFunction<ffi.Pointer<VecI32> Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_sqrt(
    Mat self,
    Mat rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_sqrt(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>('cv_Mat_sqrt');
  late final _cv_Mat_sqrt =
      _cv_Mat_sqrtPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  MatStep cv_Mat_step(
    Mat self,
  ) {
    return _cv_Mat_step(
      self,
    );
  }

  late final _cv_Mat_stepPtr = _lookup<ffi.NativeFunction<MatStep Function(Mat)>>('cv_Mat_step');
  late final _cv_Mat_step = _cv_Mat_stepPtr.asFunction<MatStep Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_t(
    Mat self,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_t(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_tPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>>(
          'cv_Mat_t');
  late final _cv_Mat_t =
      _cv_Mat_tPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toFmtString(
    Mat self,
    int fmtType,
    int f16Precision,
    int f32Precision,
    int f64Precision,
    bool multiLine,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ) {
    return _cv_Mat_toFmtString(
      self,
      fmtType,
      f16Precision,
      f32Precision,
      f64Precision,
      multiLine,
      rval,
    );
  }

  late final _cv_Mat_toFmtStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Bool,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cv_Mat_toFmtString');
  late final _cv_Mat_toFmtString = _cv_Mat_toFmtStringPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, int, int, int, bool, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecChar(
    Mat self,
    ffi.Pointer<VecChar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecChar(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_toVecCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecChar>, imp1.CvCallback_0)>>(
      'cv_Mat_toVecChar');
  late final _cv_Mat_toVecChar = _cv_Mat_toVecCharPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecChar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecPoint(
    Mat self,
    ffi.Pointer<VecPoint> vec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecPoint(
      self,
      vec,
      callback,
    );
  }

  late final _cv_Mat_toVecPointPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint>, imp1.CvCallback_0)>>(
      'cv_Mat_toVecPoint');
  late final _cv_Mat_toVecPoint = _cv_Mat_toVecPointPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecPoint2f(
    Mat self,
    ffi.Pointer<VecPoint2f> vec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecPoint2f(
      self,
      vec,
      callback,
    );
  }

  late final _cv_Mat_toVecPoint2fPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, imp1.CvCallback_0)>>(
      'cv_Mat_toVecPoint2f');
  late final _cv_Mat_toVecPoint2f = _cv_Mat_toVecPoint2fPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecPoint3f(
    Mat self,
    ffi.Pointer<VecPoint3f> vec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecPoint3f(
      self,
      vec,
      callback,
    );
  }

  late final _cv_Mat_toVecPoint3fPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3f>, imp1.CvCallback_0)>>(
      'cv_Mat_toVecPoint3f');
  late final _cv_Mat_toVecPoint3f = _cv_Mat_toVecPoint3fPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3f>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecPoint3i(
    Mat self,
    ffi.Pointer<VecPoint3i> vec,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecPoint3i(
      self,
      vec,
      callback,
    );
  }

  late final _cv_Mat_toVecPoint3iPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3i>, imp1.CvCallback_0)>>(
      'cv_Mat_toVecPoint3i');
  late final _cv_Mat_toVecPoint3i = _cv_Mat_toVecPoint3iPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3i>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_Mat_toVecUChar(
    Mat self,
    ffi.Pointer<VecUChar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_toVecUChar(
      self,
      rval,
      callback,
    );
  }

  late final _cv_Mat_toVecUCharPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecUChar>, imp1.CvCallback_0)>>(
      'cv_Mat_toVecUChar');
  late final _cv_Mat_toVecUChar = _cv_Mat_toVecUCharPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecUChar>, imp1.CvCallback_0)>();

  int cv_Mat_total(
    Mat self,
  ) {
    return _cv_Mat_total(
      self,
    );
  }

  late final _cv_Mat_totalPtr = _lookup<ffi.NativeFunction<ffi.Size Function(Mat)>>('cv_Mat_total');
  late final _cv_Mat_total = _cv_Mat_totalPtr.asFunction<int Function(Mat)>(isLeaf: true);

  int cv_Mat_type(
    Mat self,
  ) {
    return _cv_Mat_type(
      self,
    );
  }

  late final _cv_Mat_typePtr = _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_Mat_type');
  late final _cv_Mat_type = _cv_Mat_typePtr.asFunction<int Function(Mat)>(isLeaf: true);

  ffi.Pointer<CvStatus> cv_Mat_zeros(
    int rows,
    int cols,
    int type,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_Mat_zeros(
      rows,
      cols,
      type,
      rval,
      callback,
    );
  }

  late final _cv_Mat_zerosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_Mat_zeros');
  late final _cv_Mat_zeros = _cv_Mat_zerosPtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PCABackProject(
    Mat data,
    Mat mean,
    Mat eigenvectors,
    Mat result,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PCABackProject(
      data,
      mean,
      eigenvectors,
      result,
      callback,
    );
  }

  late final _cv_PCABackProjectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_PCABackProject');
  late final _cv_PCABackProject = _cv_PCABackProjectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PCACompute(
    Mat src,
    Mat mean,
    Mat eigenvectors,
    Mat eigenvalues,
    int maxComponents,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PCACompute(
      src,
      mean,
      eigenvectors,
      eigenvalues,
      maxComponents,
      callback,
    );
  }

  late final _cv_PCAComputePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
      'cv_PCACompute');
  late final _cv_PCACompute = _cv_PCAComputePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PCACompute_1(
    Mat src,
    Mat mean,
    Mat eigenvectors,
    Mat eigenvalues,
    double retainedVariance,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PCACompute_1(
      src,
      mean,
      eigenvectors,
      eigenvalues,
      retainedVariance,
      callback,
    );
  }

  late final _cv_PCACompute_1Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Double, imp1.CvCallback_0)>>(
      'cv_PCACompute_1');
  late final _cv_PCACompute_1 = _cv_PCACompute_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PCAProject(
    Mat data,
    Mat mean,
    Mat eigenvectors,
    Mat result,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PCAProject(
      data,
      mean,
      eigenvectors,
      result,
      callback,
    );
  }

  late final _cv_PCAProjectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_PCAProject');
  late final _cv_PCAProject =
      _cv_PCAProjectPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_PSNR(
    Mat src1,
    Mat src2,
    double R,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_PSNR(
      src1,
      src2,
      R,
      rval,
      callback,
    );
  }

  late final _cv_PSNRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_PSNR');
  late final _cv_PSNR = _cv_PSNRPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  void cv_RNG_close(
    imp1.RNGPtr rng,
  ) {
    return _cv_RNG_close(
      rng,
    );
  }

  late final _cv_RNG_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(imp1.RNGPtr)>>('cv_RNG_close');
  late final _cv_RNG_close = _cv_RNG_closePtr.asFunction<void Function(imp1.RNGPtr)>();

  ffi.Pointer<CvStatus> cv_RNG_create(
    ffi.Pointer<RNG> rval,
  ) {
    return _cv_RNG_create(
      rval,
    );
  }

  late final _cv_RNG_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>>('cv_RNG_create');
  late final _cv_RNG_create =
      _cv_RNG_createPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>();

  ffi.Pointer<CvStatus> cv_RNG_create_1(
    int state,
    ffi.Pointer<RNG> rval,
  ) {
    return _cv_RNG_create_1(
      state,
      rval,
    );
  }

  late final _cv_RNG_create_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Uint64, ffi.Pointer<RNG>)>>(
          'cv_RNG_create_1');
  late final _cv_RNG_create_1 =
      _cv_RNG_create_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(int, ffi.Pointer<RNG>)>();

  ffi.Pointer<CvStatus> cv_RNG_fill(
    RNG rng,
    Mat mat,
    int distType,
    double a,
    double b,
    bool saturateRange,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_RNG_fill(
      rng,
      mat,
      distType,
      a,
      b,
      saturateRange,
      callback,
    );
  }

  late final _cv_RNG_fillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Bool, imp1.CvCallback_0)>>('cv_RNG_fill');
  late final _cv_RNG_fill = _cv_RNG_fillPtr
      .asFunction<ffi.Pointer<CvStatus> Function(RNG, Mat, int, double, double, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_RNG_gaussian(
    RNG rng,
    double sigma,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _cv_RNG_gaussian(
      rng,
      sigma,
      rval,
    );
  }

  late final _cv_RNG_gaussianPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(RNG, ffi.Double, ffi.Pointer<ffi.Double>)>>(
          'cv_RNG_gaussian');
  late final _cv_RNG_gaussian =
      _cv_RNG_gaussianPtr.asFunction<ffi.Pointer<CvStatus> Function(RNG, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> cv_RNG_next(
    RNG rng,
    ffi.Pointer<ffi.Uint32> rval,
  ) {
    return _cv_RNG_next(
      rng,
      rval,
    );
  }

  late final _cv_RNG_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(RNG, ffi.Pointer<ffi.Uint32>)>>(
          'cv_RNG_next');
  late final _cv_RNG_next =
      _cv_RNG_nextPtr.asFunction<ffi.Pointer<CvStatus> Function(RNG, ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<CvStatus> cv_RNG_uniform(
    RNG rng,
    int a,
    int b,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _cv_RNG_uniform(
      rng,
      a,
      b,
      rval,
    );
  }

  late final _cv_RNG_uniformPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(RNG, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'cv_RNG_uniform');
  late final _cv_RNG_uniform =
      _cv_RNG_uniformPtr.asFunction<ffi.Pointer<CvStatus> Function(RNG, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> cv_RNG_uniformDouble(
    RNG rng,
    double a,
    double b,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _cv_RNG_uniformDouble(
      rng,
      a,
      b,
      rval,
    );
  }

  late final _cv_RNG_uniformDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              RNG, ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>)>>('cv_RNG_uniformDouble');
  late final _cv_RNG_uniformDouble = _cv_RNG_uniformDoublePtr
      .asFunction<ffi.Pointer<CvStatus> Function(RNG, double, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> cv_RotatedRect_boundingRect(
    RotatedRect rect,
    ffi.Pointer<CvRect> rval,
  ) {
    return _cv_RotatedRect_boundingRect(
      rect,
      rval,
    );
  }

  late final _cv_RotatedRect_boundingRectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect>)>>(
          'cv_RotatedRect_boundingRect');
  late final _cv_RotatedRect_boundingRect = _cv_RotatedRect_boundingRectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect>)>();

  ffi.Pointer<CvStatus> cv_RotatedRect_boundingRect2f(
    RotatedRect rect,
    ffi.Pointer<CvRect2f> rval,
  ) {
    return _cv_RotatedRect_boundingRect2f(
      rect,
      rval,
    );
  }

  late final _cv_RotatedRect_boundingRect2fPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect2f>)>>(
          'cv_RotatedRect_boundingRect2f');
  late final _cv_RotatedRect_boundingRect2f = _cv_RotatedRect_boundingRect2fPtr
      .asFunction<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<CvRect2f>)>();

  ffi.Pointer<CvStatus> cv_RotatedRect_points(
    RotatedRect rect,
    ffi.Pointer<VecPoint2f> out_pts,
  ) {
    return _cv_RotatedRect_points(
      rect,
      out_pts,
    );
  }

  late final _cv_RotatedRect_pointsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>>(
          'cv_RotatedRect_points');
  late final _cv_RotatedRect_points = _cv_RotatedRect_pointsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>();

  ffi.Pointer<CvStatus> cv_SVBackSubst(
    Mat w,
    Mat u,
    Mat vt,
    Mat rhs,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SVBackSubst(
      w,
      u,
      vt,
      rhs,
      dst,
      callback,
    );
  }

  late final _cv_SVBackSubstPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_SVBackSubst');
  late final _cv_SVBackSubst = _cv_SVBackSubstPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_SVD_Compute(
    Mat src,
    Mat w_r,
    Mat u_r,
    Mat vt_r,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SVD_Compute(
      src,
      w_r,
      u_r,
      vt_r,
      flags,
      callback,
    );
  }

  late final _cv_SVD_ComputePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
      'cv_SVD_Compute');
  late final _cv_SVD_Compute = _cv_SVD_ComputePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_SVD_backSubst(
    Mat w,
    Mat u,
    Mat vt,
    Mat rhs,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SVD_backSubst(
      w,
      u,
      vt,
      rhs,
      dst,
      callback,
    );
  }

  late final _cv_SVD_backSubstPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_SVD_backSubst');
  late final _cv_SVD_backSubst = _cv_SVD_backSubstPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_SVDecomp(
    Mat w,
    Mat u,
    Mat vt,
    Mat d,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_SVDecomp(
      w,
      u,
      vt,
      d,
      flags,
      callback,
    );
  }

  late final _cv_SVDecompPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
      'cv_SVDecomp');
  late final _cv_SVDecomp = _cv_SVDecompPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_absdiff(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_absdiff(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_absdiffPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_absdiff');
  late final _cv_absdiff =
      _cv_absdiffPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_add(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_add(
      src1,
      src2,
      dst,
      mask,
      dtype,
      callback,
    );
  }

  late final _cv_addPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
      'cv_add');
  late final _cv_add =
      _cv_addPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_addWeighted(
    Mat src1,
    double alpha,
    Mat src2,
    double beta,
    double gamma,
    Mat dst,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_addWeighted(
      src1,
      alpha,
      src2,
      beta,
      gamma,
      dst,
      dtype,
      callback,
    );
  }

  late final _cv_addWeightedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, ffi.Double, ffi.Double, Mat, ffi.Int,
              imp1.CvCallback_0)>>('cv_addWeighted');
  late final _cv_addWeighted = _cv_addWeightedPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, double, Mat, double, double, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_batchDistance(
    Mat src1,
    Mat src2,
    Mat dist,
    int dtype,
    Mat nidx,
    int normType,
    int K,
    Mat mask,
    int update,
    bool crosscheck,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_batchDistance(
      src1,
      src2,
      dist,
      dtype,
      nidx,
      normType,
      K,
      mask,
      update,
      crosscheck,
      callback,
    );
  }

  late final _cv_batchDistancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, Mat, ffi.Int, ffi.Int, Mat, ffi.Int,
              ffi.Bool, imp1.CvCallback_0)>>('cv_batchDistance');
  late final _cv_batchDistance = _cv_batchDistancePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, Mat, int, int, Mat, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_and(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_and(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_bitwise_andPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_bitwise_and');
  late final _cv_bitwise_and =
      _cv_bitwise_andPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_and_1(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_and_1(
      src1,
      src2,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_bitwise_and_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_bitwise_and_1');
  late final _cv_bitwise_and_1 = _cv_bitwise_and_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_not(
    Mat src1,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_not(
      src1,
      dst,
      callback,
    );
  }

  late final _cv_bitwise_notPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_bitwise_not');
  late final _cv_bitwise_not =
      _cv_bitwise_notPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_not_1(
    Mat src1,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_not_1(
      src1,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_bitwise_not_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_bitwise_not_1');
  late final _cv_bitwise_not_1 =
      _cv_bitwise_not_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_or(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_or(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_bitwise_orPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_bitwise_or');
  late final _cv_bitwise_or =
      _cv_bitwise_orPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_or_1(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_or_1(
      src1,
      src2,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_bitwise_or_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_bitwise_or_1');
  late final _cv_bitwise_or_1 =
      _cv_bitwise_or_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_xor(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_xor(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_bitwise_xorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_bitwise_xor');
  late final _cv_bitwise_xor =
      _cv_bitwise_xorPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_bitwise_xor_1(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_bitwise_xor_1(
      src1,
      src2,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_bitwise_xor_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_bitwise_xor_1');
  late final _cv_bitwise_xor_1 = _cv_bitwise_xor_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_borderInterpolate(
    int p,
    int len,
    int borderType,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_borderInterpolate(
      p,
      len,
      borderType,
      rval,
      callback,
    );
  }

  late final _cv_borderInterpolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>('cv_borderInterpolate');
  late final _cv_borderInterpolate = _cv_borderInterpolatePtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, int, int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_calcCovarMatrix(
    Mat samples,
    Mat covar,
    Mat mean,
    int flags,
    int ctype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_calcCovarMatrix(
      samples,
      covar,
      mean,
      flags,
      ctype,
      callback,
    );
  }

  late final _cv_calcCovarMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_calcCovarMatrix');
  late final _cv_calcCovarMatrix = _cv_calcCovarMatrixPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_cartToPolar(
    Mat x,
    Mat y,
    Mat magnitude,
    Mat angle,
    bool angleInDegrees,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_cartToPolar(
      x,
      y,
      magnitude,
      angle,
      angleInDegrees,
      callback,
    );
  }

  late final _cv_cartToPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Bool, imp1.CvCallback_0)>>('cv_cartToPolar');
  late final _cv_cartToPolar = _cv_cartToPolarPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_checkRange(
    Mat a,
    bool quiet,
    ffi.Pointer<CvPoint> pos,
    double minVal,
    double maxVal,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_checkRange(
      a,
      quiet,
      pos,
      minVal,
      maxVal,
      rval,
      callback,
    );
  }

  late final _cv_checkRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, ffi.Pointer<CvPoint>, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>>('cv_checkRange');
  late final _cv_checkRange = _cv_checkRangePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, bool, ffi.Pointer<CvPoint>, double, double, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_colRange(
    Mat self,
    int start,
    int end,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_colRange(
      self,
      start,
      end,
      rval,
      callback,
    );
  }

  late final _cv_colRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_colRange');
  late final _cv_colRange = _cv_colRangePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_compare(
    Mat src1,
    Mat src2,
    Mat dst,
    int cmpop,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_compare(
      src1,
      src2,
      dst,
      cmpop,
      callback,
    );
  }

  late final _cv_comparePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_compare');
  late final _cv_compare =
      _cv_comparePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_completeSymm(
    Mat m,
    bool lowerToUpper,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_completeSymm(
      m,
      lowerToUpper,
      callback,
    );
  }

  late final _cv_completeSymmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, imp1.CvCallback_0)>>(
          'cv_completeSymm');
  late final _cv_completeSymm =
      _cv_completeSymmPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_convertScaleAbs(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_convertScaleAbs(
      src,
      dst,
      alpha,
      beta,
      callback,
    );
  }

  late final _cv_convertScaleAbsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, ffi.Double, imp1.CvCallback_0)>>('cv_convertScaleAbs');
  late final _cv_convertScaleAbs = _cv_convertScaleAbsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_copyMakeBorder(
    Mat src,
    Mat dst,
    int top,
    int bottom,
    int left,
    int right,
    int borderType,
    Scalar value,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_copyMakeBorder(
      src,
      dst,
      top,
      bottom,
      left,
      right,
      borderType,
      value,
      callback,
    );
  }

  late final _cv_copyMakeBorderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, Scalar,
              imp1.CvCallback_0)>>('cv_copyMakeBorder');
  late final _cv_copyMakeBorder = _cv_copyMakeBorderPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, int, int, int, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_copyTo(
    Mat src,
    Mat dst,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_copyTo(
      src,
      dst,
      mask,
      callback,
    );
  }

  late final _cv_copyToPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_copyTo');
  late final _cv_copyTo =
      _cv_copyToPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  int cv_countNonZero(
    Mat src,
  ) {
    return _cv_countNonZero(
      src,
    );
  }

  late final _cv_countNonZeroPtr = _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('cv_countNonZero');
  late final _cv_countNonZero = _cv_countNonZeroPtr.asFunction<int Function(Mat)>();

  ffi.Pointer<CvStatus> cv_dct(
    Mat src,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_dct(
      src,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_dctPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_dct');
  late final _cv_dct =
      _cv_dctPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_determinant(
    Mat self,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_determinant(
      self,
      rval,
      callback,
    );
  }

  late final _cv_determinantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_determinant');
  late final _cv_determinant = _cv_determinantPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_dft(
    Mat src,
    Mat dst,
    int flags,
    int nonzeroRows,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_dft(
      src,
      dst,
      flags,
      nonzeroRows,
      callback,
    );
  }

  late final _cv_dftPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>(
      'cv_dft');
  late final _cv_dft =
      _cv_dftPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_divide(
    Mat src1,
    Mat src2,
    Mat dst,
    double scale,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_divide(
      src1,
      src2,
      dst,
      scale,
      dtype,
      callback,
    );
  }

  late final _cv_dividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_divide');
  late final _cv_divide = _cv_dividePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_eigen(
    Mat src,
    Mat eigenvalues,
    Mat eigenvectors,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_eigen(
      src,
      eigenvalues,
      eigenvectors,
      rval,
      callback,
    );
  }

  late final _cv_eigenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>>('cv_eigen');
  late final _cv_eigen = _cv_eigenPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_eigenNonSymmetric(
    Mat src,
    Mat eigenvalues,
    Mat eigenvectors,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_eigenNonSymmetric(
      src,
      eigenvalues,
      eigenvectors,
      callback,
    );
  }

  late final _cv_eigenNonSymmetricPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_eigenNonSymmetric');
  late final _cv_eigenNonSymmetric =
      _cv_eigenNonSymmetricPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_exp(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_exp(
      src,
      dst,
      callback,
    );
  }

  late final _cv_expPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>('cv_exp');
  late final _cv_exp = _cv_expPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_extractChannel(
    Mat src,
    Mat dst,
    int coi,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_extractChannel(
      src,
      dst,
      coi,
      callback,
    );
  }

  late final _cv_extractChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_extractChannel');
  late final _cv_extractChannel =
      _cv_extractChannelPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_findNonZero(
    Mat src,
    Mat idx,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_findNonZero(
      src,
      idx,
      callback,
    );
  }

  late final _cv_findNonZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_findNonZero');
  late final _cv_findNonZero =
      _cv_findNonZeroPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_flip(
    Mat src,
    Mat dst,
    int flipCode,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_flip(
      src,
      dst,
      flipCode,
      callback,
    );
  }

  late final _cv_flipPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_flip');
  late final _cv_flip =
      _cv_flipPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_flipND(
    Mat src,
    Mat dst,
    int axis,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_flipND(
      src,
      dst,
      axis,
      callback,
    );
  }

  late final _cv_flipNDPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_flipND');
  late final _cv_flipND =
      _cv_flipNDPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_gemm(
    Mat src1,
    Mat src2,
    double alpha,
    Mat src3,
    double beta,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_gemm(
      src1,
      src2,
      alpha,
      src3,
      beta,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_gemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, Mat, ffi.Double, Mat, ffi.Int, imp1.CvCallback_0)>>('cv_gemm');
  late final _cv_gemm = _cv_gemmPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, Mat, double, Mat, int, imp1.CvCallback_0)>();

  int cv_getNumThreads() {
    return _cv_getNumThreads();
  }

  late final _cv_getNumThreadsPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('cv_getNumThreads');
  late final _cv_getNumThreads = _cv_getNumThreadsPtr.asFunction<int Function()>();

  ffi.Pointer<CvStatus> cv_getOptimalDFTSize(
    int vecsize,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_getOptimalDFTSize(
      vecsize,
      rval,
      callback,
    );
  }

  late final _cv_getOptimalDFTSizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>(
      'cv_getOptimalDFTSize');
  late final _cv_getOptimalDFTSize = _cv_getOptimalDFTSizePtr
      .asFunction<ffi.Pointer<CvStatus> Function(int, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  int cv_getTickCount() {
    return _cv_getTickCount();
  }

  late final _cv_getTickCountPtr = _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('cv_getTickCount');
  late final _cv_getTickCount = _cv_getTickCountPtr.asFunction<int Function()>();

  double cv_getTickFrequency() {
    return _cv_getTickFrequency();
  }

  late final _cv_getTickFrequencyPtr =
      _lookup<ffi.NativeFunction<double_t Function()>>('cv_getTickFrequency');
  late final _cv_getTickFrequency = _cv_getTickFrequencyPtr.asFunction<double Function()>();

  ffi.Pointer<CvStatus> cv_hasNonZero(
    Mat src,
    ffi.Pointer<ffi.Bool> rval,
  ) {
    return _cv_hasNonZero(
      src,
      rval,
    );
  }

  late final _cv_hasNonZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Bool>)>>(
          'cv_hasNonZero');
  late final _cv_hasNonZero =
      _cv_hasNonZeroPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<CvStatus> cv_hconcat(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_hconcat(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_hconcatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_hconcat');
  late final _cv_hconcat =
      _cv_hconcatPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_idct(
    Mat src,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_idct(
      src,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_idctPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_idct');
  late final _cv_idct =
      _cv_idctPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_idft(
    Mat src,
    Mat dst,
    int flags,
    int nonzeroRows,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_idft(
      src,
      dst,
      flags,
      nonzeroRows,
      callback,
    );
  }

  late final _cv_idftPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>>(
      'cv_idft');
  late final _cv_idft =
      _cv_idftPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_inRange(
    Mat src,
    Mat lowerb,
    Mat upperb,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_inRange(
      src,
      lowerb,
      upperb,
      dst,
      callback,
    );
  }

  late final _cv_inRangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_inRange');
  late final _cv_inRange =
      _cv_inRangePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_inRange_1(
    Mat src,
    Scalar lowerb,
    Scalar upperb,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_inRange_1(
      src,
      lowerb,
      upperb,
      dst,
      callback,
    );
  }

  late final _cv_inRange_1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, Mat, imp1.CvCallback_0)>>(
      'cv_inRange_1');
  late final _cv_inRange_1 = _cv_inRange_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_insertChannel(
    Mat src,
    Mat dst,
    int coi,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_insertChannel(
      src,
      dst,
      coi,
      callback,
    );
  }

  late final _cv_insertChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_insertChannel');
  late final _cv_insertChannel =
      _cv_insertChannelPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_invert(
    Mat src,
    Mat dst,
    int flags,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_invert(
      src,
      dst,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_invert');
  late final _cv_invert = _cv_invertPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_kmeans(
    Mat data,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    Mat centers,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_kmeans(
      data,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      centers,
      rval,
      callback,
    );
  }

  late final _cv_kmeansPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, TermCriteria, ffi.Int, ffi.Int, Mat,
              ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_kmeans');
  late final _cv_kmeans = _cv_kmeansPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, int, Mat, TermCriteria, int, int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_kmeans_points(
    VecPoint2f pts,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    Mat centers,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_kmeans_points(
      pts,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      centers,
      rval,
      callback,
    );
  }

  late final _cv_kmeans_pointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Int, Mat, TermCriteria, ffi.Int, ffi.Int, Mat,
              ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_kmeans_points');
  late final _cv_kmeans_points = _cv_kmeans_pointsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          VecPoint2f, int, Mat, TermCriteria, int, int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_log(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_log(
      src,
      dst,
      callback,
    );
  }

  late final _cv_logPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>('cv_log');
  late final _cv_log = _cv_logPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_magnitude(
    Mat x,
    Mat y,
    Mat magnitude,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_magnitude(
      x,
      y,
      magnitude,
      callback,
    );
  }

  late final _cv_magnitudePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_magnitude');
  late final _cv_magnitude =
      _cv_magnitudePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_max(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_max(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_max');
  late final _cv_max =
      _cv_maxPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mean(
    Mat src,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mean(
      src,
      rval,
      callback,
    );
  }

  late final _cv_meanPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>(
      'cv_mean');
  late final _cv_mean =
      _cv_meanPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_meanStdDev(
    Mat src,
    ffi.Pointer<Scalar> dstMean,
    ffi.Pointer<Scalar> dstStdDev,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_meanStdDev(
      src,
      dstMean,
      dstStdDev,
      callback,
    );
  }

  late final _cv_meanStdDevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_meanStdDev');
  late final _cv_meanStdDev = _cv_meanStdDevPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_meanStdDev_1(
    Mat src,
    ffi.Pointer<Scalar> dstMean,
    ffi.Pointer<Scalar> dstStdDev,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_meanStdDev_1(
      src,
      dstMean,
      dstStdDev,
      mask,
      callback,
    );
  }

  late final _cv_meanStdDev_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, Mat, imp1.CvCallback_0)>>('cv_meanStdDev_1');
  late final _cv_meanStdDev_1 = _cv_meanStdDev_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mean_1(
    Mat src,
    Mat mask,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mean_1(
      src,
      mask,
      rval,
      callback,
    );
  }

  late final _cv_mean_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_mean_1');
  late final _cv_mean_1 = _cv_mean_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_merge(
    VecMat mats,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_merge(
      mats,
      dst,
      callback,
    );
  }

  late final _cv_mergePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecMat, Mat, imp1.CvCallback_0)>>('cv_merge');
  late final _cv_merge =
      _cv_mergePtr.asFunction<ffi.Pointer<CvStatus> Function(VecMat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_min(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_min(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_minPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>('cv_min');
  late final _cv_min =
      _cv_minPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_minMaxIdx(
    Mat self,
    ffi.Pointer<ffi.Double> minVal,
    ffi.Pointer<ffi.Double> maxVal,
    ffi.Pointer<ffi.Int> minIdx,
    ffi.Pointer<ffi.Int> maxIdx,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_minMaxIdx(
      self,
      minVal,
      maxVal,
      minIdx,
      maxIdx,
      mask,
      callback,
    );
  }

  late final _cv_minMaxIdxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, Mat, imp1.CvCallback_0)>>('cv_minMaxIdx');
  late final _cv_minMaxIdx = _cv_minMaxIdxPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_minMaxLoc(
    Mat self,
    ffi.Pointer<ffi.Double> minVal,
    ffi.Pointer<ffi.Double> maxVal,
    ffi.Pointer<CvPoint> minLoc,
    ffi.Pointer<CvPoint> maxLoc,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_minMaxLoc(
      self,
      minVal,
      maxVal,
      minLoc,
      maxLoc,
      mask,
      callback,
    );
  }

  late final _cv_minMaxLocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<CvPoint>, ffi.Pointer<CvPoint>, Mat, imp1.CvCallback_0)>>('cv_minMaxLoc');
  late final _cv_minMaxLoc = _cv_minMaxLocPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<CvPoint>, ffi.Pointer<CvPoint>, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mixChannels(
    VecMat src,
    VecMat dst,
    VecI32 fromTo,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mixChannels(
      src,
      dst,
      fromTo,
      callback,
    );
  }

  late final _cv_mixChannelsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecMat, VecMat, VecI32, imp1.CvCallback_0)>>(
          'cv_mixChannels');
  late final _cv_mixChannels = _cv_mixChannelsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecMat, VecMat, VecI32, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mulSpectrums(
    Mat a,
    Mat b,
    Mat c,
    int flags,
    bool conjB,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mulSpectrums(
      a,
      b,
      c,
      flags,
      conjB,
      callback,
    );
  }

  late final _cv_mulSpectrumsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Bool, imp1.CvCallback_0)>>('cv_mulSpectrums');
  late final _cv_mulSpectrums = _cv_mulSpectrumsPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_mulTransposed(
    Mat src,
    Mat dst,
    bool aTa,
    Mat delta,
    double scale,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_mulTransposed(
      src,
      dst,
      aTa,
      delta,
      scale,
      dtype,
      callback,
    );
  }

  late final _cv_mulTransposedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Bool, Mat, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_mulTransposed');
  late final _cv_mulTransposed = _cv_mulTransposedPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, bool, Mat, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_multiply(
    Mat src1,
    Mat src2,
    Mat dst,
    double scale,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_multiply(
      src1,
      src2,
      dst,
      scale,
      dtype,
      callback,
    );
  }

  late final _cv_multiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Double, ffi.Int, imp1.CvCallback_0)>>('cv_multiply');
  late final _cv_multiply = _cv_multiplyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, double, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_norm(
    Mat src1,
    int normType,
    Mat mask,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_norm(
      src1,
      normType,
      mask,
      rval,
      callback,
    );
  }

  late final _cv_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_norm');
  late final _cv_norm = _cv_normPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_norm_1(
    Mat src1,
    Mat src2,
    int normType,
    Mat mask,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_norm_1(
      src1,
      src2,
      normType,
      mask,
      rval,
      callback,
    );
  }

  late final _cv_norm_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_norm_1');
  late final _cv_norm_1 = _cv_norm_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, Mat, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_normalize(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
    int typ,
    int dtype,
    Mat mask,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_normalize(
      src,
      dst,
      alpha,
      beta,
      typ,
      dtype,
      mask,
      callback,
    );
  }

  late final _cv_normalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Int, Mat, imp1.CvCallback_0)>>('cv_normalize');
  late final _cv_normalize = _cv_normalizePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, double, double, int, int, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_patchNaNs(
    Mat a,
    double val,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_patchNaNs(
      a,
      val,
      callback,
    );
  }

  late final _cv_patchNaNsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, imp1.CvCallback_0)>>(
          'cv_patchNaNs');
  late final _cv_patchNaNs =
      _cv_patchNaNsPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_perspectiveTransform(
    Mat src,
    Mat dst,
    Mat tm,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_perspectiveTransform(
      src,
      dst,
      tm,
      callback,
    );
  }

  late final _cv_perspectiveTransformPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_perspectiveTransform');
  late final _cv_perspectiveTransform = _cv_perspectiveTransformPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_phase(
    Mat x,
    Mat y,
    Mat angle,
    bool angleInDegrees,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_phase(
      x,
      y,
      angle,
      angleInDegrees,
      callback,
    );
  }

  late final _cv_phasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Bool, imp1.CvCallback_0)>>(
          'cv_phase');
  late final _cv_phase =
      _cv_phasePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_polarToCart(
    Mat magnitude,
    Mat degree,
    Mat x,
    Mat y,
    bool angleInDegrees,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_polarToCart(
      magnitude,
      degree,
      x,
      y,
      angleInDegrees,
      callback,
    );
  }

  late final _cv_polarToCartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Bool, imp1.CvCallback_0)>>('cv_polarToCart');
  late final _cv_polarToCart = _cv_polarToCartPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_pow(
    Mat src,
    double power,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_pow(
      src,
      power,
      dst,
      callback,
    );
  }

  late final _cv_powPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, imp1.CvCallback_0)>>(
          'cv_pow');
  late final _cv_pow =
      _cv_powPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_randShuffle(
    Mat mat,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_randShuffle(
      mat,
      callback,
    );
  }

  late final _cv_randShufflePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_0)>>('cv_randShuffle');
  late final _cv_randShuffle =
      _cv_randShufflePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_randShuffle_1(
    Mat mat,
    double iterFactor,
    RNG rng,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_randShuffle_1(
      mat,
      iterFactor,
      rng,
      callback,
    );
  }

  late final _cv_randShuffle_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, RNG, imp1.CvCallback_0)>>(
          'cv_randShuffle_1');
  late final _cv_randShuffle_1 =
      _cv_randShuffle_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double, RNG, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_randn(
    Mat mat,
    Scalar mean,
    Scalar stddev,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_randn(
      mat,
      mean,
      stddev,
      callback,
    );
  }

  late final _cv_randnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>>(
          'cv_randn');
  late final _cv_randn =
      _cv_randnPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_randu(
    Mat mat,
    Scalar low,
    Scalar high,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_randu(
      mat,
      low,
      high,
      callback,
    );
  }

  late final _cv_randuPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>>(
          'cv_randu');
  late final _cv_randu =
      _cv_randuPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_reduce(
    Mat src,
    Mat dst,
    int dim,
    int rType,
    int dType,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_reduce(
      src,
      dst,
      dim,
      rType,
      dType,
      callback,
    );
  }

  late final _cv_reducePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>>('cv_reduce');
  late final _cv_reduce =
      _cv_reducePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, int, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_reduceArgMax(
    Mat src,
    Mat dst,
    int axis,
    bool lastIndex,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_reduceArgMax(
      src,
      dst,
      axis,
      lastIndex,
      callback,
    );
  }

  late final _cv_reduceArgMaxPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool, imp1.CvCallback_0)>>(
      'cv_reduceArgMax');
  late final _cv_reduceArgMax = _cv_reduceArgMaxPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_reduceArgMin(
    Mat src,
    Mat dst,
    int axis,
    bool lastIndex,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_reduceArgMin(
      src,
      dst,
      axis,
      lastIndex,
      callback,
    );
  }

  late final _cv_reduceArgMinPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool, imp1.CvCallback_0)>>(
      'cv_reduceArgMin');
  late final _cv_reduceArgMin = _cv_reduceArgMinPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, bool, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_repeat(
    Mat src,
    int nY,
    int nX,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_repeat(
      src,
      nY,
      nX,
      dst,
      callback,
    );
  }

  late final _cv_repeatPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Mat, imp1.CvCallback_0)>>(
      'cv_repeat');
  late final _cv_repeat =
      _cv_repeatPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, int, int, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_rotate(
    Mat src,
    Mat dst,
    int rotateCode,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_rotate(
      src,
      dst,
      rotateCode,
      callback,
    );
  }

  late final _cv_rotatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_rotate');
  late final _cv_rotate =
      _cv_rotatePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_rowRange(
    Mat self,
    int start,
    int end,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_rowRange(
      self,
      start,
      end,
      rval,
      callback,
    );
  }

  late final _cv_rowRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_rowRange');
  late final _cv_rowRange = _cv_rowRangePtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, int, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_scaleAdd(
    Mat src1,
    double alpha,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_scaleAdd(
      src1,
      alpha,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_scaleAddPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, Mat, imp1.CvCallback_0)>>(
      'cv_scaleAdd');
  late final _cv_scaleAdd =
      _cv_scaleAddPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, double, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_setIdentity(
    Mat src,
    Scalar scalar,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_setIdentity(
      src,
      scalar,
      callback,
    );
  }

  late final _cv_setIdentityPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, imp1.CvCallback_0)>>(
          'cv_setIdentity');
  late final _cv_setIdentity =
      _cv_setIdentityPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Scalar, imp1.CvCallback_0)>();

  void cv_setNumThreads(
    int n,
  ) {
    return _cv_setNumThreads(
      n,
    );
  }

  late final _cv_setNumThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('cv_setNumThreads');
  late final _cv_setNumThreads = _cv_setNumThreadsPtr.asFunction<void Function(int)>();

  ffi.Pointer<CvStatus> cv_setRNGSeed(
    int seed,
  ) {
    return _cv_setRNGSeed(
      seed,
    );
  }

  late final _cv_setRNGSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int)>>('cv_setRNGSeed');
  late final _cv_setRNGSeed = _cv_setRNGSeedPtr.asFunction<ffi.Pointer<CvStatus> Function(int)>();

  ffi.Pointer<CvStatus> cv_solve(
    Mat src1,
    Mat src2,
    Mat dst,
    int flags,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_solve(
      src1,
      src2,
      dst,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>>('cv_solve');
  late final _cv_solve = _cv_solvePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, int, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_solveCubic(
    Mat coeffs,
    Mat roots,
    ffi.Pointer<ffi.Int> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_solveCubic(
      coeffs,
      roots,
      rval,
      callback,
    );
  }

  late final _cv_solveCubicPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>>(
      'cv_solveCubic');
  late final _cv_solveCubic = _cv_solveCubicPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Int>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_solvePoly(
    Mat coeffs,
    Mat roots,
    int maxIters,
    ffi.Pointer<ffi.Double> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_solvePoly(
      coeffs,
      roots,
      maxIters,
      rval,
      callback,
    );
  }

  late final _cv_solvePolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>>('cv_solvePoly');
  late final _cv_solvePoly = _cv_solvePolyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Mat, Mat, int, ffi.Pointer<ffi.Double>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sort(
    Mat src,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sort(
      src,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_sortPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_sort');
  late final _cv_sort =
      _cv_sortPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sortIdx(
    Mat src,
    Mat dst,
    int flags,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sortIdx(
      src,
      dst,
      flags,
      callback,
    );
  }

  late final _cv_sortIdxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
          'cv_sortIdx');
  late final _cv_sortIdx =
      _cv_sortIdxPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_split(
    Mat src,
    ffi.Pointer<VecMat> out_rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_split(
      src,
      out_rval,
      callback,
    );
  }

  late final _cv_splitPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecMat>, imp1.CvCallback_0)>>(
      'cv_split');
  late final _cv_split =
      _cv_splitPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecMat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sqrt(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sqrt(
      src,
      dst,
      callback,
    );
  }

  late final _cv_sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>('cv_sqrt');
  late final _cv_sqrt = _cv_sqrtPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_subtract(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
    int dtype,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_subtract(
      src1,
      src2,
      dst,
      mask,
      dtype,
      callback,
    );
  }

  late final _cv_subtractPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, imp1.CvCallback_0)>>(
      'cv_subtract');
  late final _cv_subtract = _cv_subtractPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, int, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_sum(
    Mat src,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_sum(
      src,
      rval,
      callback,
    );
  }

  late final _cv_sumPtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>('cv_sum');
  late final _cv_sum =
      _cv_sumPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_theRNG(
    imp1.RNGPtr rval,
  ) {
    return _cv_theRNG(
      rval,
    );
  }

  late final _cv_theRNGPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(imp1.RNGPtr)>>('cv_theRNG');
  late final _cv_theRNG = _cv_theRNGPtr.asFunction<ffi.Pointer<CvStatus> Function(imp1.RNGPtr)>();

  ffi.Pointer<CvStatus> cv_trace(
    Mat src,
    ffi.Pointer<Scalar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_trace(
      src,
      rval,
      callback,
    );
  }

  late final _cv_tracePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>>(
      'cv_trace');
  late final _cv_trace =
      _cv_tracePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_transform(
    Mat src,
    Mat dst,
    Mat tm,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_transform(
      src,
      dst,
      tm,
      callback,
    );
  }

  late final _cv_transformPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_transform');
  late final _cv_transform =
      _cv_transformPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_transpose(
    Mat src,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_transpose(
      src,
      dst,
      callback,
    );
  }

  late final _cv_transposePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>>(
          'cv_transpose');
  late final _cv_transpose =
      _cv_transposePtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_transposeND(
    Mat src,
    Mat dst,
    VecI32 order,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_transposeND(
      src,
      dst,
      order,
      callback,
    );
  }

  late final _cv_transposeNDPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, VecI32, imp1.CvCallback_0)>>(
          'cv_transposeND');
  late final _cv_transposeND =
      _cv_transposeNDPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, VecI32, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_vconcat(
    Mat src1,
    Mat src2,
    Mat dst,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_vconcat(
      src1,
      src2,
      dst,
      callback,
    );
  }

  late final _cv_vconcatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>>(
          'cv_vconcat');
  late final _cv_vconcat =
      _cv_vconcatPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>();

  ffi.Pointer<VecU8> cv_yuv420_888_to_nv21(
    VecU8 y,
    VecU8 u,
    VecU8 v,
    int width,
    int height,
  ) {
    return _cv_yuv420_888_to_nv21(
      y,
      u,
      v,
      width,
      height,
    );
  }

  late final _cv_yuv420_888_to_nv21Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU8> Function(VecU8, VecU8, VecU8, ffi.Size, ffi.Size)>>(
          'cv_yuv420_888_to_nv21');
  late final _cv_yuv420_888_to_nv21 =
      _cv_yuv420_888_to_nv21Ptr.asFunction<ffi.Pointer<VecU8> Function(VecU8, VecU8, VecU8, int, int)>();

  ffi.Pointer<ffi.Char> getBuildInfo() {
    return _getBuildInfo();
  }

  late final _getBuildInfoPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getBuildInfo');
  late final _getBuildInfo = _getBuildInfoPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> getCvVersion() {
    return _getCvVersion();
  }

  late final _getCvVersionPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getCvVersion');
  late final _getCvVersion = _getCvVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<CvStatus> getLogLevel(
    ffi.Pointer<ffi.Int> logLevel,
  ) {
    return _getLogLevel(
      logLevel,
    );
  }

  late final _getLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>>('getLogLevel');
  late final _getLogLevel =
      _getLogLevelPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>();

  void registerErrorCallback(
    ErrorCallback callback,
  ) {
    return _registerErrorCallback(
      callback,
    );
  }

  late final _registerErrorCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ErrorCallback)>>('registerErrorCallback');
  late final _registerErrorCallback = _registerErrorCallbackPtr.asFunction<void Function(ErrorCallback)>();

  ffi.Pointer<CvStatus> setLogLevel(
    int logLevel,
  ) {
    return _setLogLevel(
      logLevel,
    );
  }

  late final _setLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int)>>('setLogLevel');
  late final _setLogLevel = _setLogLevelPtr.asFunction<ffi.Pointer<CvStatus> Function(int)>();

  void std_VecChar_clear(
    ffi.Pointer<VecChar> self,
  ) {
    return _std_VecChar_clear(
      self,
    );
  }

  late final _std_VecChar_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecChar>)>>('std_VecChar_clear');
  late final _std_VecChar_clear = _std_VecChar_clearPtr.asFunction<void Function(ffi.Pointer<VecChar>)>();

  ffi.Pointer<VecChar> std_VecChar_clone(
    ffi.Pointer<VecChar> self,
  ) {
    return _std_VecChar_clone(
      self,
    );
  }

  late final _std_VecChar_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecChar> Function(ffi.Pointer<VecChar>)>>('std_VecChar_clone');
  late final _std_VecChar_clone =
      _std_VecChar_clonePtr.asFunction<ffi.Pointer<VecChar> Function(ffi.Pointer<VecChar>)>();

  ffi.Pointer<ffi.Char> std_VecChar_data(
    ffi.Pointer<VecChar> self,
  ) {
    return _std_VecChar_data(
      self,
    );
  }

  late final _std_VecChar_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<VecChar>)>>('std_VecChar_data');
  late final _std_VecChar_data =
      _std_VecChar_dataPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<VecChar>)>();

  void std_VecChar_extend(
    ffi.Pointer<VecChar> self,
    ffi.Pointer<VecChar> other,
  ) {
    return _std_VecChar_extend(
      self,
      other,
    );
  }

  late final _std_VecChar_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Pointer<VecChar>)>>(
          'std_VecChar_extend');
  late final _std_VecChar_extend =
      _std_VecChar_extendPtr.asFunction<void Function(ffi.Pointer<VecChar>, ffi.Pointer<VecChar>)>();

  void std_VecChar_free(
    imp1.VecCharPtr self,
  ) {
    return _std_VecChar_free(
      self,
    );
  }

  late final _std_VecChar_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecCharPtr)>>('std_VecChar_free');
  late final _std_VecChar_free = _std_VecChar_freePtr.asFunction<void Function(imp1.VecCharPtr)>();

  int std_VecChar_get(
    ffi.Pointer<VecChar> self,
    int index,
  ) {
    return _std_VecChar_get(
      self,
      index,
    );
  }

  late final _std_VecChar_getPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function(ffi.Pointer<VecChar>, ffi.Size)>>('std_VecChar_get');
  late final _std_VecChar_get = _std_VecChar_getPtr.asFunction<int Function(ffi.Pointer<VecChar>, int)>();

  int std_VecChar_length(
    ffi.Pointer<VecChar> self,
  ) {
    return _std_VecChar_length(
      self,
    );
  }

  late final _std_VecChar_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecChar>)>>('std_VecChar_length');
  late final _std_VecChar_length = _std_VecChar_lengthPtr.asFunction<int Function(ffi.Pointer<VecChar>)>();

  ffi.Pointer<VecChar> std_VecChar_new(
    int length,
  ) {
    return _std_VecChar_new(
      length,
    );
  }

  late final _std_VecChar_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecChar> Function(ffi.Size)>>('std_VecChar_new');
  late final _std_VecChar_new = _std_VecChar_newPtr.asFunction<ffi.Pointer<VecChar> Function(int)>();

  ffi.Pointer<VecChar> std_VecChar_new_1(
    int length,
    int val,
  ) {
    return _std_VecChar_new_1(
      length,
      val,
    );
  }

  late final _std_VecChar_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecChar> Function(ffi.Size, ffi.Char)>>('std_VecChar_new_1');
  late final _std_VecChar_new_1 = _std_VecChar_new_1Ptr.asFunction<ffi.Pointer<VecChar> Function(int, int)>();

  ffi.Pointer<VecChar> std_VecChar_new_2(
    int length,
    ffi.Pointer<ffi.Char> val_ptr,
  ) {
    return _std_VecChar_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecChar_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecChar> Function(ffi.Size, ffi.Pointer<ffi.Char>)>>(
          'std_VecChar_new_2');
  late final _std_VecChar_new_2 =
      _std_VecChar_new_2Ptr.asFunction<ffi.Pointer<VecChar> Function(int, ffi.Pointer<ffi.Char>)>();

  void std_VecChar_push_back(
    ffi.Pointer<VecChar> self,
    int val,
  ) {
    return _std_VecChar_push_back(
      self,
      val,
    );
  }

  late final _std_VecChar_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Char)>>('std_VecChar_push_back');
  late final _std_VecChar_push_back =
      _std_VecChar_push_backPtr.asFunction<void Function(ffi.Pointer<VecChar>, int)>();

  void std_VecChar_reserve(
    ffi.Pointer<VecChar> self,
    int new_len,
  ) {
    return _std_VecChar_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecChar_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Size)>>('std_VecChar_reserve');
  late final _std_VecChar_reserve =
      _std_VecChar_reservePtr.asFunction<void Function(ffi.Pointer<VecChar>, int)>();

  void std_VecChar_resize(
    ffi.Pointer<VecChar> self,
    int new_len,
  ) {
    return _std_VecChar_resize(
      self,
      new_len,
    );
  }

  late final _std_VecChar_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Size)>>('std_VecChar_resize');
  late final _std_VecChar_resize =
      _std_VecChar_resizePtr.asFunction<void Function(ffi.Pointer<VecChar>, int)>();

  void std_VecChar_set(
    ffi.Pointer<VecChar> self,
    int index,
    int val,
  ) {
    return _std_VecChar_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecChar_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecChar>, ffi.Size, ffi.Char)>>(
          'std_VecChar_set');
  late final _std_VecChar_set =
      _std_VecChar_setPtr.asFunction<void Function(ffi.Pointer<VecChar>, int, int)>();

  void std_VecChar_shrink_to_fit(
    ffi.Pointer<VecChar> self,
  ) {
    return _std_VecChar_shrink_to_fit(
      self,
    );
  }

  late final _std_VecChar_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecChar>)>>('std_VecChar_shrink_to_fit');
  late final _std_VecChar_shrink_to_fit =
      _std_VecChar_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecChar>)>();

  void std_VecDMatch_clear(
    ffi.Pointer<VecDMatch> self,
  ) {
    return _std_VecDMatch_clear(
      self,
    );
  }

  late final _std_VecDMatch_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecDMatch>)>>('std_VecDMatch_clear');
  late final _std_VecDMatch_clear =
      _std_VecDMatch_clearPtr.asFunction<void Function(ffi.Pointer<VecDMatch>)>();

  ffi.Pointer<DMatch> std_VecDMatch_data(
    ffi.Pointer<VecDMatch> self,
  ) {
    return _std_VecDMatch_data(
      self,
    );
  }

  late final _std_VecDMatch_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DMatch> Function(ffi.Pointer<VecDMatch>)>>('std_VecDMatch_data');
  late final _std_VecDMatch_data =
      _std_VecDMatch_dataPtr.asFunction<ffi.Pointer<DMatch> Function(ffi.Pointer<VecDMatch>)>();

  void std_VecDMatch_extend(
    ffi.Pointer<VecDMatch> self,
    ffi.Pointer<VecDMatch> other,
  ) {
    return _std_VecDMatch_extend(
      self,
      other,
    );
  }

  late final _std_VecDMatch_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecDMatch>, ffi.Pointer<VecDMatch>)>>(
          'std_VecDMatch_extend');
  late final _std_VecDMatch_extend =
      _std_VecDMatch_extendPtr.asFunction<void Function(ffi.Pointer<VecDMatch>, ffi.Pointer<VecDMatch>)>();

  void std_VecDMatch_free(
    imp1.VecDMatchPtr self,
  ) {
    return _std_VecDMatch_free(
      self,
    );
  }

  late final _std_VecDMatch_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecDMatchPtr)>>('std_VecDMatch_free');
  late final _std_VecDMatch_free = _std_VecDMatch_freePtr.asFunction<void Function(imp1.VecDMatchPtr)>();

  DMatch std_VecDMatch_get(
    ffi.Pointer<VecDMatch> self,
    int index,
  ) {
    return _std_VecDMatch_get(
      self,
      index,
    );
  }

  late final _std_VecDMatch_getPtr =
      _lookup<ffi.NativeFunction<DMatch Function(ffi.Pointer<VecDMatch>, ffi.Size)>>('std_VecDMatch_get');
  late final _std_VecDMatch_get =
      _std_VecDMatch_getPtr.asFunction<DMatch Function(ffi.Pointer<VecDMatch>, int)>();

  ffi.Pointer<DMatch> std_VecDMatch_get_p(
    ffi.Pointer<VecDMatch> self,
    int index,
  ) {
    return _std_VecDMatch_get_p(
      self,
      index,
    );
  }

  late final _std_VecDMatch_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DMatch> Function(ffi.Pointer<VecDMatch>, ffi.Int)>>(
          'std_VecDMatch_get_p');
  late final _std_VecDMatch_get_p =
      _std_VecDMatch_get_pPtr.asFunction<ffi.Pointer<DMatch> Function(ffi.Pointer<VecDMatch>, int)>();

  int std_VecDMatch_length(
    ffi.Pointer<VecDMatch> self,
  ) {
    return _std_VecDMatch_length(
      self,
    );
  }

  late final _std_VecDMatch_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecDMatch>)>>('std_VecDMatch_length');
  late final _std_VecDMatch_length =
      _std_VecDMatch_lengthPtr.asFunction<int Function(ffi.Pointer<VecDMatch>)>();

  ffi.Pointer<VecDMatch> std_VecDMatch_new(
    int length,
  ) {
    return _std_VecDMatch_new(
      length,
    );
  }

  late final _std_VecDMatch_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecDMatch> Function(ffi.Size)>>('std_VecDMatch_new');
  late final _std_VecDMatch_new = _std_VecDMatch_newPtr.asFunction<ffi.Pointer<VecDMatch> Function(int)>();

  ffi.Pointer<VecDMatch> std_VecDMatch_new_1(
    int length,
    DMatch val,
  ) {
    return _std_VecDMatch_new_1(
      length,
      val,
    );
  }

  late final _std_VecDMatch_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecDMatch> Function(ffi.Size, DMatch)>>('std_VecDMatch_new_1');
  late final _std_VecDMatch_new_1 =
      _std_VecDMatch_new_1Ptr.asFunction<ffi.Pointer<VecDMatch> Function(int, DMatch)>();

  ffi.Pointer<VecDMatch> std_VecDMatch_new_2(
    int length,
    ffi.Pointer<DMatch> val_ptr,
  ) {
    return _std_VecDMatch_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecDMatch_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecDMatch> Function(ffi.Size, ffi.Pointer<DMatch>)>>(
          'std_VecDMatch_new_2');
  late final _std_VecDMatch_new_2 =
      _std_VecDMatch_new_2Ptr.asFunction<ffi.Pointer<VecDMatch> Function(int, ffi.Pointer<DMatch>)>();

  void std_VecDMatch_push_back(
    ffi.Pointer<VecDMatch> self,
    DMatch val,
  ) {
    return _std_VecDMatch_push_back(
      self,
      val,
    );
  }

  late final _std_VecDMatch_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecDMatch>, DMatch)>>(
          'std_VecDMatch_push_back');
  late final _std_VecDMatch_push_back =
      _std_VecDMatch_push_backPtr.asFunction<void Function(ffi.Pointer<VecDMatch>, DMatch)>();

  void std_VecDMatch_reserve(
    ffi.Pointer<VecDMatch> self,
    int new_len,
  ) {
    return _std_VecDMatch_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecDMatch_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecDMatch>, ffi.Size)>>(
          'std_VecDMatch_reserve');
  late final _std_VecDMatch_reserve =
      _std_VecDMatch_reservePtr.asFunction<void Function(ffi.Pointer<VecDMatch>, int)>();

  void std_VecDMatch_resize(
    ffi.Pointer<VecDMatch> self,
    int new_len,
  ) {
    return _std_VecDMatch_resize(
      self,
      new_len,
    );
  }

  late final _std_VecDMatch_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecDMatch>, ffi.Size)>>(
          'std_VecDMatch_resize');
  late final _std_VecDMatch_resize =
      _std_VecDMatch_resizePtr.asFunction<void Function(ffi.Pointer<VecDMatch>, int)>();

  void std_VecDMatch_set(
    ffi.Pointer<VecDMatch> self,
    int index,
    DMatch val,
  ) {
    return _std_VecDMatch_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecDMatch_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecDMatch>, ffi.Size, DMatch)>>(
          'std_VecDMatch_set');
  late final _std_VecDMatch_set =
      _std_VecDMatch_setPtr.asFunction<void Function(ffi.Pointer<VecDMatch>, int, DMatch)>();

  void std_VecDMatch_shrink_to_fit(
    ffi.Pointer<VecDMatch> self,
  ) {
    return _std_VecDMatch_shrink_to_fit(
      self,
    );
  }

  late final _std_VecDMatch_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecDMatch>)>>('std_VecDMatch_shrink_to_fit');
  late final _std_VecDMatch_shrink_to_fit =
      _std_VecDMatch_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecDMatch>)>();

  void std_VecF16_clear(
    ffi.Pointer<VecF16> self,
  ) {
    return _std_VecF16_clear(
      self,
    );
  }

  late final _std_VecF16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF16>)>>('std_VecF16_clear');
  late final _std_VecF16_clear = _std_VecF16_clearPtr.asFunction<void Function(ffi.Pointer<VecF16>)>();

  ffi.Pointer<VecF16> std_VecF16_clone(
    ffi.Pointer<VecF16> self,
  ) {
    return _std_VecF16_clone(
      self,
    );
  }

  late final _std_VecF16_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF16> Function(ffi.Pointer<VecF16>)>>('std_VecF16_clone');
  late final _std_VecF16_clone =
      _std_VecF16_clonePtr.asFunction<ffi.Pointer<VecF16> Function(ffi.Pointer<VecF16>)>();

  ffi.Pointer<ffi.Uint16> std_VecF16_data(
    ffi.Pointer<VecF16> self,
  ) {
    return _std_VecF16_data(
      self,
    );
  }

  late final _std_VecF16_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<VecF16>)>>('std_VecF16_data');
  late final _std_VecF16_data =
      _std_VecF16_dataPtr.asFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<VecF16>)>();

  void std_VecF16_extend(
    ffi.Pointer<VecF16> self,
    ffi.Pointer<VecF16> other,
  ) {
    return _std_VecF16_extend(
      self,
      other,
    );
  }

  late final _std_VecF16_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Pointer<VecF16>)>>(
          'std_VecF16_extend');
  late final _std_VecF16_extend =
      _std_VecF16_extendPtr.asFunction<void Function(ffi.Pointer<VecF16>, ffi.Pointer<VecF16>)>();

  void std_VecF16_free(
    imp1.VecF16Ptr self,
  ) {
    return _std_VecF16_free(
      self,
    );
  }

  late final _std_VecF16_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecF16Ptr)>>('std_VecF16_free');
  late final _std_VecF16_free = _std_VecF16_freePtr.asFunction<void Function(imp1.VecF16Ptr)>();

  int std_VecF16_get(
    ffi.Pointer<VecF16> self,
    int index,
  ) {
    return _std_VecF16_get(
      self,
      index,
    );
  }

  late final _std_VecF16_getPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<VecF16>, ffi.Size)>>('std_VecF16_get');
  late final _std_VecF16_get = _std_VecF16_getPtr.asFunction<int Function(ffi.Pointer<VecF16>, int)>();

  int std_VecF16_length(
    ffi.Pointer<VecF16> self,
  ) {
    return _std_VecF16_length(
      self,
    );
  }

  late final _std_VecF16_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecF16>)>>('std_VecF16_length');
  late final _std_VecF16_length = _std_VecF16_lengthPtr.asFunction<int Function(ffi.Pointer<VecF16>)>();

  ffi.Pointer<VecF16> std_VecF16_new(
    int length,
  ) {
    return _std_VecF16_new(
      length,
    );
  }

  late final _std_VecF16_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF16> Function(ffi.Size)>>('std_VecF16_new');
  late final _std_VecF16_new = _std_VecF16_newPtr.asFunction<ffi.Pointer<VecF16> Function(int)>();

  ffi.Pointer<VecF16> std_VecF16_new_1(
    int length,
    int val,
  ) {
    return _std_VecF16_new_1(
      length,
      val,
    );
  }

  late final _std_VecF16_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF16> Function(ffi.Size, ffi.Uint16)>>('std_VecF16_new_1');
  late final _std_VecF16_new_1 = _std_VecF16_new_1Ptr.asFunction<ffi.Pointer<VecF16> Function(int, int)>();

  ffi.Pointer<VecF16> std_VecF16_new_2(
    int length,
    ffi.Pointer<ffi.Uint16> val_ptr,
  ) {
    return _std_VecF16_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecF16_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF16> Function(ffi.Size, ffi.Pointer<ffi.Uint16>)>>(
          'std_VecF16_new_2');
  late final _std_VecF16_new_2 =
      _std_VecF16_new_2Ptr.asFunction<ffi.Pointer<VecF16> Function(int, ffi.Pointer<ffi.Uint16>)>();

  void std_VecF16_push_back(
    ffi.Pointer<VecF16> self,
    int val,
  ) {
    return _std_VecF16_push_back(
      self,
      val,
    );
  }

  late final _std_VecF16_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Uint16)>>('std_VecF16_push_back');
  late final _std_VecF16_push_back =
      _std_VecF16_push_backPtr.asFunction<void Function(ffi.Pointer<VecF16>, int)>();

  void std_VecF16_reserve(
    ffi.Pointer<VecF16> self,
    int new_len,
  ) {
    return _std_VecF16_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecF16_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Size)>>('std_VecF16_reserve');
  late final _std_VecF16_reserve =
      _std_VecF16_reservePtr.asFunction<void Function(ffi.Pointer<VecF16>, int)>();

  void std_VecF16_resize(
    ffi.Pointer<VecF16> self,
    int new_len,
  ) {
    return _std_VecF16_resize(
      self,
      new_len,
    );
  }

  late final _std_VecF16_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Size)>>('std_VecF16_resize');
  late final _std_VecF16_resize = _std_VecF16_resizePtr.asFunction<void Function(ffi.Pointer<VecF16>, int)>();

  void std_VecF16_set(
    ffi.Pointer<VecF16> self,
    int index,
    int val,
  ) {
    return _std_VecF16_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecF16_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF16>, ffi.Size, ffi.Uint16)>>(
          'std_VecF16_set');
  late final _std_VecF16_set = _std_VecF16_setPtr.asFunction<void Function(ffi.Pointer<VecF16>, int, int)>();

  void std_VecF16_shrink_to_fit(
    ffi.Pointer<VecF16> self,
  ) {
    return _std_VecF16_shrink_to_fit(
      self,
    );
  }

  late final _std_VecF16_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF16>)>>('std_VecF16_shrink_to_fit');
  late final _std_VecF16_shrink_to_fit =
      _std_VecF16_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecF16>)>();

  void std_VecF32_clear(
    ffi.Pointer<VecF32> self,
  ) {
    return _std_VecF32_clear(
      self,
    );
  }

  late final _std_VecF32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF32>)>>('std_VecF32_clear');
  late final _std_VecF32_clear = _std_VecF32_clearPtr.asFunction<void Function(ffi.Pointer<VecF32>)>();

  ffi.Pointer<VecF32> std_VecF32_clone(
    ffi.Pointer<VecF32> self,
  ) {
    return _std_VecF32_clone(
      self,
    );
  }

  late final _std_VecF32_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF32> Function(ffi.Pointer<VecF32>)>>('std_VecF32_clone');
  late final _std_VecF32_clone =
      _std_VecF32_clonePtr.asFunction<ffi.Pointer<VecF32> Function(ffi.Pointer<VecF32>)>();

  ffi.Pointer<float_t> std_VecF32_data(
    ffi.Pointer<VecF32> self,
  ) {
    return _std_VecF32_data(
      self,
    );
  }

  late final _std_VecF32_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<float_t> Function(ffi.Pointer<VecF32>)>>('std_VecF32_data');
  late final _std_VecF32_data =
      _std_VecF32_dataPtr.asFunction<ffi.Pointer<float_t> Function(ffi.Pointer<VecF32>)>();

  void std_VecF32_extend(
    ffi.Pointer<VecF32> self,
    ffi.Pointer<VecF32> other,
  ) {
    return _std_VecF32_extend(
      self,
      other,
    );
  }

  late final _std_VecF32_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF32>, ffi.Pointer<VecF32>)>>(
          'std_VecF32_extend');
  late final _std_VecF32_extend =
      _std_VecF32_extendPtr.asFunction<void Function(ffi.Pointer<VecF32>, ffi.Pointer<VecF32>)>();

  void std_VecF32_free(
    imp1.VecF32Ptr self,
  ) {
    return _std_VecF32_free(
      self,
    );
  }

  late final _std_VecF32_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecF32Ptr)>>('std_VecF32_free');
  late final _std_VecF32_free = _std_VecF32_freePtr.asFunction<void Function(imp1.VecF32Ptr)>();

  double std_VecF32_get(
    ffi.Pointer<VecF32> self,
    int index,
  ) {
    return _std_VecF32_get(
      self,
      index,
    );
  }

  late final _std_VecF32_getPtr =
      _lookup<ffi.NativeFunction<float_t Function(ffi.Pointer<VecF32>, ffi.Size)>>('std_VecF32_get');
  late final _std_VecF32_get = _std_VecF32_getPtr.asFunction<double Function(ffi.Pointer<VecF32>, int)>();

  int std_VecF32_length(
    ffi.Pointer<VecF32> self,
  ) {
    return _std_VecF32_length(
      self,
    );
  }

  late final _std_VecF32_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecF32>)>>('std_VecF32_length');
  late final _std_VecF32_length = _std_VecF32_lengthPtr.asFunction<int Function(ffi.Pointer<VecF32>)>();

  ffi.Pointer<VecF32> std_VecF32_new(
    int length,
  ) {
    return _std_VecF32_new(
      length,
    );
  }

  late final _std_VecF32_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF32> Function(ffi.Size)>>('std_VecF32_new');
  late final _std_VecF32_new = _std_VecF32_newPtr.asFunction<ffi.Pointer<VecF32> Function(int)>();

  ffi.Pointer<VecF32> std_VecF32_new_1(
    int length,
    double val,
  ) {
    return _std_VecF32_new_1(
      length,
      val,
    );
  }

  late final _std_VecF32_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF32> Function(ffi.Size, float_t)>>('std_VecF32_new_1');
  late final _std_VecF32_new_1 = _std_VecF32_new_1Ptr.asFunction<ffi.Pointer<VecF32> Function(int, double)>();

  ffi.Pointer<VecF32> std_VecF32_new_2(
    int length,
    ffi.Pointer<float_t> val_ptr,
  ) {
    return _std_VecF32_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecF32_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF32> Function(ffi.Size, ffi.Pointer<float_t>)>>(
          'std_VecF32_new_2');
  late final _std_VecF32_new_2 =
      _std_VecF32_new_2Ptr.asFunction<ffi.Pointer<VecF32> Function(int, ffi.Pointer<float_t>)>();

  void std_VecF32_push_back(
    ffi.Pointer<VecF32> self,
    double val,
  ) {
    return _std_VecF32_push_back(
      self,
      val,
    );
  }

  late final _std_VecF32_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF32>, float_t)>>('std_VecF32_push_back');
  late final _std_VecF32_push_back =
      _std_VecF32_push_backPtr.asFunction<void Function(ffi.Pointer<VecF32>, double)>();

  void std_VecF32_reserve(
    ffi.Pointer<VecF32> self,
    int new_len,
  ) {
    return _std_VecF32_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecF32_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF32>, ffi.Size)>>('std_VecF32_reserve');
  late final _std_VecF32_reserve =
      _std_VecF32_reservePtr.asFunction<void Function(ffi.Pointer<VecF32>, int)>();

  void std_VecF32_resize(
    ffi.Pointer<VecF32> self,
    int new_len,
  ) {
    return _std_VecF32_resize(
      self,
      new_len,
    );
  }

  late final _std_VecF32_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF32>, ffi.Size)>>('std_VecF32_resize');
  late final _std_VecF32_resize = _std_VecF32_resizePtr.asFunction<void Function(ffi.Pointer<VecF32>, int)>();

  void std_VecF32_set(
    ffi.Pointer<VecF32> self,
    int index,
    double val,
  ) {
    return _std_VecF32_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecF32_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF32>, ffi.Size, float_t)>>(
          'std_VecF32_set');
  late final _std_VecF32_set =
      _std_VecF32_setPtr.asFunction<void Function(ffi.Pointer<VecF32>, int, double)>();

  void std_VecF32_shrink_to_fit(
    ffi.Pointer<VecF32> self,
  ) {
    return _std_VecF32_shrink_to_fit(
      self,
    );
  }

  late final _std_VecF32_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF32>)>>('std_VecF32_shrink_to_fit');
  late final _std_VecF32_shrink_to_fit =
      _std_VecF32_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecF32>)>();

  void std_VecF64_clear(
    ffi.Pointer<VecF64> self,
  ) {
    return _std_VecF64_clear(
      self,
    );
  }

  late final _std_VecF64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF64>)>>('std_VecF64_clear');
  late final _std_VecF64_clear = _std_VecF64_clearPtr.asFunction<void Function(ffi.Pointer<VecF64>)>();

  ffi.Pointer<VecF64> std_VecF64_clone(
    ffi.Pointer<VecF64> self,
  ) {
    return _std_VecF64_clone(
      self,
    );
  }

  late final _std_VecF64_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF64> Function(ffi.Pointer<VecF64>)>>('std_VecF64_clone');
  late final _std_VecF64_clone =
      _std_VecF64_clonePtr.asFunction<ffi.Pointer<VecF64> Function(ffi.Pointer<VecF64>)>();

  ffi.Pointer<double_t> std_VecF64_data(
    ffi.Pointer<VecF64> self,
  ) {
    return _std_VecF64_data(
      self,
    );
  }

  late final _std_VecF64_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<double_t> Function(ffi.Pointer<VecF64>)>>('std_VecF64_data');
  late final _std_VecF64_data =
      _std_VecF64_dataPtr.asFunction<ffi.Pointer<double_t> Function(ffi.Pointer<VecF64>)>();

  void std_VecF64_extend(
    ffi.Pointer<VecF64> self,
    ffi.Pointer<VecF64> other,
  ) {
    return _std_VecF64_extend(
      self,
      other,
    );
  }

  late final _std_VecF64_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF64>, ffi.Pointer<VecF64>)>>(
          'std_VecF64_extend');
  late final _std_VecF64_extend =
      _std_VecF64_extendPtr.asFunction<void Function(ffi.Pointer<VecF64>, ffi.Pointer<VecF64>)>();

  void std_VecF64_free(
    imp1.VecF64Ptr self,
  ) {
    return _std_VecF64_free(
      self,
    );
  }

  late final _std_VecF64_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecF64Ptr)>>('std_VecF64_free');
  late final _std_VecF64_free = _std_VecF64_freePtr.asFunction<void Function(imp1.VecF64Ptr)>();

  double std_VecF64_get(
    ffi.Pointer<VecF64> self,
    int index,
  ) {
    return _std_VecF64_get(
      self,
      index,
    );
  }

  late final _std_VecF64_getPtr =
      _lookup<ffi.NativeFunction<double_t Function(ffi.Pointer<VecF64>, ffi.Size)>>('std_VecF64_get');
  late final _std_VecF64_get = _std_VecF64_getPtr.asFunction<double Function(ffi.Pointer<VecF64>, int)>();

  int std_VecF64_length(
    ffi.Pointer<VecF64> self,
  ) {
    return _std_VecF64_length(
      self,
    );
  }

  late final _std_VecF64_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecF64>)>>('std_VecF64_length');
  late final _std_VecF64_length = _std_VecF64_lengthPtr.asFunction<int Function(ffi.Pointer<VecF64>)>();

  ffi.Pointer<VecF64> std_VecF64_new(
    int length,
  ) {
    return _std_VecF64_new(
      length,
    );
  }

  late final _std_VecF64_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF64> Function(ffi.Size)>>('std_VecF64_new');
  late final _std_VecF64_new = _std_VecF64_newPtr.asFunction<ffi.Pointer<VecF64> Function(int)>();

  ffi.Pointer<VecF64> std_VecF64_new_1(
    int length,
    double val,
  ) {
    return _std_VecF64_new_1(
      length,
      val,
    );
  }

  late final _std_VecF64_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF64> Function(ffi.Size, double_t)>>('std_VecF64_new_1');
  late final _std_VecF64_new_1 = _std_VecF64_new_1Ptr.asFunction<ffi.Pointer<VecF64> Function(int, double)>();

  ffi.Pointer<VecF64> std_VecF64_new_2(
    int length,
    ffi.Pointer<double_t> val_ptr,
  ) {
    return _std_VecF64_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecF64_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecF64> Function(ffi.Size, ffi.Pointer<double_t>)>>(
          'std_VecF64_new_2');
  late final _std_VecF64_new_2 =
      _std_VecF64_new_2Ptr.asFunction<ffi.Pointer<VecF64> Function(int, ffi.Pointer<double_t>)>();

  void std_VecF64_push_back(
    ffi.Pointer<VecF64> self,
    double val,
  ) {
    return _std_VecF64_push_back(
      self,
      val,
    );
  }

  late final _std_VecF64_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF64>, double_t)>>('std_VecF64_push_back');
  late final _std_VecF64_push_back =
      _std_VecF64_push_backPtr.asFunction<void Function(ffi.Pointer<VecF64>, double)>();

  void std_VecF64_reserve(
    ffi.Pointer<VecF64> self,
    int new_len,
  ) {
    return _std_VecF64_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecF64_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF64>, ffi.Size)>>('std_VecF64_reserve');
  late final _std_VecF64_reserve =
      _std_VecF64_reservePtr.asFunction<void Function(ffi.Pointer<VecF64>, int)>();

  void std_VecF64_resize(
    ffi.Pointer<VecF64> self,
    int new_len,
  ) {
    return _std_VecF64_resize(
      self,
      new_len,
    );
  }

  late final _std_VecF64_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF64>, ffi.Size)>>('std_VecF64_resize');
  late final _std_VecF64_resize = _std_VecF64_resizePtr.asFunction<void Function(ffi.Pointer<VecF64>, int)>();

  void std_VecF64_set(
    ffi.Pointer<VecF64> self,
    int index,
    double val,
  ) {
    return _std_VecF64_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecF64_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF64>, ffi.Size, double_t)>>(
          'std_VecF64_set');
  late final _std_VecF64_set =
      _std_VecF64_setPtr.asFunction<void Function(ffi.Pointer<VecF64>, int, double)>();

  void std_VecF64_shrink_to_fit(
    ffi.Pointer<VecF64> self,
  ) {
    return _std_VecF64_shrink_to_fit(
      self,
    );
  }

  late final _std_VecF64_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecF64>)>>('std_VecF64_shrink_to_fit');
  late final _std_VecF64_shrink_to_fit =
      _std_VecF64_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecF64>)>();

  void std_VecI16_clear(
    ffi.Pointer<VecI16> self,
  ) {
    return _std_VecI16_clear(
      self,
    );
  }

  late final _std_VecI16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI16>)>>('std_VecI16_clear');
  late final _std_VecI16_clear = _std_VecI16_clearPtr.asFunction<void Function(ffi.Pointer<VecI16>)>();

  ffi.Pointer<VecI16> std_VecI16_clone(
    ffi.Pointer<VecI16> self,
  ) {
    return _std_VecI16_clone(
      self,
    );
  }

  late final _std_VecI16_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI16> Function(ffi.Pointer<VecI16>)>>('std_VecI16_clone');
  late final _std_VecI16_clone =
      _std_VecI16_clonePtr.asFunction<ffi.Pointer<VecI16> Function(ffi.Pointer<VecI16>)>();

  ffi.Pointer<ffi.Int16> std_VecI16_data(
    ffi.Pointer<VecI16> self,
  ) {
    return _std_VecI16_data(
      self,
    );
  }

  late final _std_VecI16_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int16> Function(ffi.Pointer<VecI16>)>>('std_VecI16_data');
  late final _std_VecI16_data =
      _std_VecI16_dataPtr.asFunction<ffi.Pointer<ffi.Int16> Function(ffi.Pointer<VecI16>)>();

  void std_VecI16_extend(
    ffi.Pointer<VecI16> self,
    ffi.Pointer<VecI16> other,
  ) {
    return _std_VecI16_extend(
      self,
      other,
    );
  }

  late final _std_VecI16_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Pointer<VecI16>)>>(
          'std_VecI16_extend');
  late final _std_VecI16_extend =
      _std_VecI16_extendPtr.asFunction<void Function(ffi.Pointer<VecI16>, ffi.Pointer<VecI16>)>();

  void std_VecI16_free(
    imp1.VecI16Ptr self,
  ) {
    return _std_VecI16_free(
      self,
    );
  }

  late final _std_VecI16_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecI16Ptr)>>('std_VecI16_free');
  late final _std_VecI16_free = _std_VecI16_freePtr.asFunction<void Function(imp1.VecI16Ptr)>();

  int std_VecI16_get(
    ffi.Pointer<VecI16> self,
    int index,
  ) {
    return _std_VecI16_get(
      self,
      index,
    );
  }

  late final _std_VecI16_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Pointer<VecI16>, ffi.Size)>>('std_VecI16_get');
  late final _std_VecI16_get = _std_VecI16_getPtr.asFunction<int Function(ffi.Pointer<VecI16>, int)>();

  int std_VecI16_length(
    ffi.Pointer<VecI16> self,
  ) {
    return _std_VecI16_length(
      self,
    );
  }

  late final _std_VecI16_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecI16>)>>('std_VecI16_length');
  late final _std_VecI16_length = _std_VecI16_lengthPtr.asFunction<int Function(ffi.Pointer<VecI16>)>();

  ffi.Pointer<VecI16> std_VecI16_new(
    int length,
  ) {
    return _std_VecI16_new(
      length,
    );
  }

  late final _std_VecI16_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI16> Function(ffi.Size)>>('std_VecI16_new');
  late final _std_VecI16_new = _std_VecI16_newPtr.asFunction<ffi.Pointer<VecI16> Function(int)>();

  ffi.Pointer<VecI16> std_VecI16_new_1(
    int length,
    int val,
  ) {
    return _std_VecI16_new_1(
      length,
      val,
    );
  }

  late final _std_VecI16_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI16> Function(ffi.Size, ffi.Int16)>>('std_VecI16_new_1');
  late final _std_VecI16_new_1 = _std_VecI16_new_1Ptr.asFunction<ffi.Pointer<VecI16> Function(int, int)>();

  ffi.Pointer<VecI16> std_VecI16_new_2(
    int length,
    ffi.Pointer<ffi.Int16> val_ptr,
  ) {
    return _std_VecI16_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecI16_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI16> Function(ffi.Size, ffi.Pointer<ffi.Int16>)>>(
          'std_VecI16_new_2');
  late final _std_VecI16_new_2 =
      _std_VecI16_new_2Ptr.asFunction<ffi.Pointer<VecI16> Function(int, ffi.Pointer<ffi.Int16>)>();

  void std_VecI16_push_back(
    ffi.Pointer<VecI16> self,
    int val,
  ) {
    return _std_VecI16_push_back(
      self,
      val,
    );
  }

  late final _std_VecI16_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Int16)>>('std_VecI16_push_back');
  late final _std_VecI16_push_back =
      _std_VecI16_push_backPtr.asFunction<void Function(ffi.Pointer<VecI16>, int)>();

  void std_VecI16_reserve(
    ffi.Pointer<VecI16> self,
    int new_len,
  ) {
    return _std_VecI16_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecI16_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Size)>>('std_VecI16_reserve');
  late final _std_VecI16_reserve =
      _std_VecI16_reservePtr.asFunction<void Function(ffi.Pointer<VecI16>, int)>();

  void std_VecI16_resize(
    ffi.Pointer<VecI16> self,
    int new_len,
  ) {
    return _std_VecI16_resize(
      self,
      new_len,
    );
  }

  late final _std_VecI16_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Size)>>('std_VecI16_resize');
  late final _std_VecI16_resize = _std_VecI16_resizePtr.asFunction<void Function(ffi.Pointer<VecI16>, int)>();

  void std_VecI16_set(
    ffi.Pointer<VecI16> self,
    int index,
    int val,
  ) {
    return _std_VecI16_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecI16_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI16>, ffi.Size, ffi.Int16)>>(
          'std_VecI16_set');
  late final _std_VecI16_set = _std_VecI16_setPtr.asFunction<void Function(ffi.Pointer<VecI16>, int, int)>();

  void std_VecI16_shrink_to_fit(
    ffi.Pointer<VecI16> self,
  ) {
    return _std_VecI16_shrink_to_fit(
      self,
    );
  }

  late final _std_VecI16_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI16>)>>('std_VecI16_shrink_to_fit');
  late final _std_VecI16_shrink_to_fit =
      _std_VecI16_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecI16>)>();

  void std_VecI32_clear(
    ffi.Pointer<VecI32> self,
  ) {
    return _std_VecI32_clear(
      self,
    );
  }

  late final _std_VecI32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI32>)>>('std_VecI32_clear');
  late final _std_VecI32_clear = _std_VecI32_clearPtr.asFunction<void Function(ffi.Pointer<VecI32>)>();

  ffi.Pointer<VecI32> std_VecI32_clone(
    ffi.Pointer<VecI32> self,
  ) {
    return _std_VecI32_clone(
      self,
    );
  }

  late final _std_VecI32_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI32> Function(ffi.Pointer<VecI32>)>>('std_VecI32_clone');
  late final _std_VecI32_clone =
      _std_VecI32_clonePtr.asFunction<ffi.Pointer<VecI32> Function(ffi.Pointer<VecI32>)>();

  ffi.Pointer<ffi.Int32> std_VecI32_data(
    ffi.Pointer<VecI32> self,
  ) {
    return _std_VecI32_data(
      self,
    );
  }

  late final _std_VecI32_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Pointer<VecI32>)>>('std_VecI32_data');
  late final _std_VecI32_data =
      _std_VecI32_dataPtr.asFunction<ffi.Pointer<ffi.Int32> Function(ffi.Pointer<VecI32>)>();

  void std_VecI32_extend(
    ffi.Pointer<VecI32> self,
    ffi.Pointer<VecI32> other,
  ) {
    return _std_VecI32_extend(
      self,
      other,
    );
  }

  late final _std_VecI32_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Pointer<VecI32>)>>(
          'std_VecI32_extend');
  late final _std_VecI32_extend =
      _std_VecI32_extendPtr.asFunction<void Function(ffi.Pointer<VecI32>, ffi.Pointer<VecI32>)>();

  void std_VecI32_free(
    imp1.VecI32Ptr self,
  ) {
    return _std_VecI32_free(
      self,
    );
  }

  late final _std_VecI32_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecI32Ptr)>>('std_VecI32_free');
  late final _std_VecI32_free = _std_VecI32_freePtr.asFunction<void Function(imp1.VecI32Ptr)>();

  int std_VecI32_get(
    ffi.Pointer<VecI32> self,
    int index,
  ) {
    return _std_VecI32_get(
      self,
      index,
    );
  }

  late final _std_VecI32_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<VecI32>, ffi.Size)>>('std_VecI32_get');
  late final _std_VecI32_get = _std_VecI32_getPtr.asFunction<int Function(ffi.Pointer<VecI32>, int)>();

  int std_VecI32_length(
    ffi.Pointer<VecI32> self,
  ) {
    return _std_VecI32_length(
      self,
    );
  }

  late final _std_VecI32_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecI32>)>>('std_VecI32_length');
  late final _std_VecI32_length = _std_VecI32_lengthPtr.asFunction<int Function(ffi.Pointer<VecI32>)>();

  ffi.Pointer<VecI32> std_VecI32_new(
    int length,
  ) {
    return _std_VecI32_new(
      length,
    );
  }

  late final _std_VecI32_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI32> Function(ffi.Size)>>('std_VecI32_new');
  late final _std_VecI32_new = _std_VecI32_newPtr.asFunction<ffi.Pointer<VecI32> Function(int)>();

  ffi.Pointer<VecI32> std_VecI32_new_1(
    int length,
    int val,
  ) {
    return _std_VecI32_new_1(
      length,
      val,
    );
  }

  late final _std_VecI32_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI32> Function(ffi.Size, ffi.Int32)>>('std_VecI32_new_1');
  late final _std_VecI32_new_1 = _std_VecI32_new_1Ptr.asFunction<ffi.Pointer<VecI32> Function(int, int)>();

  ffi.Pointer<VecI32> std_VecI32_new_2(
    int length,
    ffi.Pointer<ffi.Int32> val_ptr,
  ) {
    return _std_VecI32_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecI32_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI32> Function(ffi.Size, ffi.Pointer<ffi.Int32>)>>(
          'std_VecI32_new_2');
  late final _std_VecI32_new_2 =
      _std_VecI32_new_2Ptr.asFunction<ffi.Pointer<VecI32> Function(int, ffi.Pointer<ffi.Int32>)>();

  void std_VecI32_push_back(
    ffi.Pointer<VecI32> self,
    int val,
  ) {
    return _std_VecI32_push_back(
      self,
      val,
    );
  }

  late final _std_VecI32_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Int32)>>('std_VecI32_push_back');
  late final _std_VecI32_push_back =
      _std_VecI32_push_backPtr.asFunction<void Function(ffi.Pointer<VecI32>, int)>();

  void std_VecI32_reserve(
    ffi.Pointer<VecI32> self,
    int new_len,
  ) {
    return _std_VecI32_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecI32_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Size)>>('std_VecI32_reserve');
  late final _std_VecI32_reserve =
      _std_VecI32_reservePtr.asFunction<void Function(ffi.Pointer<VecI32>, int)>();

  void std_VecI32_resize(
    ffi.Pointer<VecI32> self,
    int new_len,
  ) {
    return _std_VecI32_resize(
      self,
      new_len,
    );
  }

  late final _std_VecI32_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Size)>>('std_VecI32_resize');
  late final _std_VecI32_resize = _std_VecI32_resizePtr.asFunction<void Function(ffi.Pointer<VecI32>, int)>();

  void std_VecI32_set(
    ffi.Pointer<VecI32> self,
    int index,
    int val,
  ) {
    return _std_VecI32_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecI32_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI32>, ffi.Size, ffi.Int32)>>(
          'std_VecI32_set');
  late final _std_VecI32_set = _std_VecI32_setPtr.asFunction<void Function(ffi.Pointer<VecI32>, int, int)>();

  void std_VecI32_shrink_to_fit(
    ffi.Pointer<VecI32> self,
  ) {
    return _std_VecI32_shrink_to_fit(
      self,
    );
  }

  late final _std_VecI32_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI32>)>>('std_VecI32_shrink_to_fit');
  late final _std_VecI32_shrink_to_fit =
      _std_VecI32_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecI32>)>();

  void std_VecI64_clear(
    ffi.Pointer<VecI64> self,
  ) {
    return _std_VecI64_clear(
      self,
    );
  }

  late final _std_VecI64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI64>)>>('std_VecI64_clear');
  late final _std_VecI64_clear = _std_VecI64_clearPtr.asFunction<void Function(ffi.Pointer<VecI64>)>();

  ffi.Pointer<VecI64> std_VecI64_clone(
    ffi.Pointer<VecI64> self,
  ) {
    return _std_VecI64_clone(
      self,
    );
  }

  late final _std_VecI64_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI64> Function(ffi.Pointer<VecI64>)>>('std_VecI64_clone');
  late final _std_VecI64_clone =
      _std_VecI64_clonePtr.asFunction<ffi.Pointer<VecI64> Function(ffi.Pointer<VecI64>)>();

  ffi.Pointer<ffi.Int64> std_VecI64_data(
    ffi.Pointer<VecI64> self,
  ) {
    return _std_VecI64_data(
      self,
    );
  }

  late final _std_VecI64_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Pointer<VecI64>)>>('std_VecI64_data');
  late final _std_VecI64_data =
      _std_VecI64_dataPtr.asFunction<ffi.Pointer<ffi.Int64> Function(ffi.Pointer<VecI64>)>();

  void std_VecI64_extend(
    ffi.Pointer<VecI64> self,
    ffi.Pointer<VecI64> other,
  ) {
    return _std_VecI64_extend(
      self,
      other,
    );
  }

  late final _std_VecI64_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Pointer<VecI64>)>>(
          'std_VecI64_extend');
  late final _std_VecI64_extend =
      _std_VecI64_extendPtr.asFunction<void Function(ffi.Pointer<VecI64>, ffi.Pointer<VecI64>)>();

  void std_VecI64_free(
    imp1.VecI64Ptr self,
  ) {
    return _std_VecI64_free(
      self,
    );
  }

  late final _std_VecI64_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecI64Ptr)>>('std_VecI64_free');
  late final _std_VecI64_free = _std_VecI64_freePtr.asFunction<void Function(imp1.VecI64Ptr)>();

  int std_VecI64_get(
    ffi.Pointer<VecI64> self,
    int index,
  ) {
    return _std_VecI64_get(
      self,
      index,
    );
  }

  late final _std_VecI64_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<VecI64>, ffi.Size)>>('std_VecI64_get');
  late final _std_VecI64_get = _std_VecI64_getPtr.asFunction<int Function(ffi.Pointer<VecI64>, int)>();

  int std_VecI64_length(
    ffi.Pointer<VecI64> self,
  ) {
    return _std_VecI64_length(
      self,
    );
  }

  late final _std_VecI64_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecI64>)>>('std_VecI64_length');
  late final _std_VecI64_length = _std_VecI64_lengthPtr.asFunction<int Function(ffi.Pointer<VecI64>)>();

  ffi.Pointer<VecI64> std_VecI64_new(
    int length,
  ) {
    return _std_VecI64_new(
      length,
    );
  }

  late final _std_VecI64_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI64> Function(ffi.Size)>>('std_VecI64_new');
  late final _std_VecI64_new = _std_VecI64_newPtr.asFunction<ffi.Pointer<VecI64> Function(int)>();

  ffi.Pointer<VecI64> std_VecI64_new_1(
    int length,
    int val,
  ) {
    return _std_VecI64_new_1(
      length,
      val,
    );
  }

  late final _std_VecI64_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI64> Function(ffi.Size, ffi.Int64)>>('std_VecI64_new_1');
  late final _std_VecI64_new_1 = _std_VecI64_new_1Ptr.asFunction<ffi.Pointer<VecI64> Function(int, int)>();

  ffi.Pointer<VecI64> std_VecI64_new_2(
    int length,
    ffi.Pointer<ffi.Int64> val_ptr,
  ) {
    return _std_VecI64_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecI64_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI64> Function(ffi.Size, ffi.Pointer<ffi.Int64>)>>(
          'std_VecI64_new_2');
  late final _std_VecI64_new_2 =
      _std_VecI64_new_2Ptr.asFunction<ffi.Pointer<VecI64> Function(int, ffi.Pointer<ffi.Int64>)>();

  void std_VecI64_push_back(
    ffi.Pointer<VecI64> self,
    int val,
  ) {
    return _std_VecI64_push_back(
      self,
      val,
    );
  }

  late final _std_VecI64_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Int64)>>('std_VecI64_push_back');
  late final _std_VecI64_push_back =
      _std_VecI64_push_backPtr.asFunction<void Function(ffi.Pointer<VecI64>, int)>();

  void std_VecI64_reserve(
    ffi.Pointer<VecI64> self,
    int new_len,
  ) {
    return _std_VecI64_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecI64_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Size)>>('std_VecI64_reserve');
  late final _std_VecI64_reserve =
      _std_VecI64_reservePtr.asFunction<void Function(ffi.Pointer<VecI64>, int)>();

  void std_VecI64_resize(
    ffi.Pointer<VecI64> self,
    int new_len,
  ) {
    return _std_VecI64_resize(
      self,
      new_len,
    );
  }

  late final _std_VecI64_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Size)>>('std_VecI64_resize');
  late final _std_VecI64_resize = _std_VecI64_resizePtr.asFunction<void Function(ffi.Pointer<VecI64>, int)>();

  void std_VecI64_set(
    ffi.Pointer<VecI64> self,
    int index,
    int val,
  ) {
    return _std_VecI64_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecI64_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI64>, ffi.Size, ffi.Int64)>>(
          'std_VecI64_set');
  late final _std_VecI64_set = _std_VecI64_setPtr.asFunction<void Function(ffi.Pointer<VecI64>, int, int)>();

  void std_VecI64_shrink_to_fit(
    ffi.Pointer<VecI64> self,
  ) {
    return _std_VecI64_shrink_to_fit(
      self,
    );
  }

  late final _std_VecI64_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI64>)>>('std_VecI64_shrink_to_fit');
  late final _std_VecI64_shrink_to_fit =
      _std_VecI64_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecI64>)>();

  void std_VecI8_clear(
    ffi.Pointer<VecI8> self,
  ) {
    return _std_VecI8_clear(
      self,
    );
  }

  late final _std_VecI8_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI8>)>>('std_VecI8_clear');
  late final _std_VecI8_clear = _std_VecI8_clearPtr.asFunction<void Function(ffi.Pointer<VecI8>)>();

  ffi.Pointer<VecI8> std_VecI8_clone(
    ffi.Pointer<VecI8> self,
  ) {
    return _std_VecI8_clone(
      self,
    );
  }

  late final _std_VecI8_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI8> Function(ffi.Pointer<VecI8>)>>('std_VecI8_clone');
  late final _std_VecI8_clone =
      _std_VecI8_clonePtr.asFunction<ffi.Pointer<VecI8> Function(ffi.Pointer<VecI8>)>();

  ffi.Pointer<ffi.Int8> std_VecI8_data(
    ffi.Pointer<VecI8> self,
  ) {
    return _std_VecI8_data(
      self,
    );
  }

  late final _std_VecI8_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<VecI8>)>>('std_VecI8_data');
  late final _std_VecI8_data =
      _std_VecI8_dataPtr.asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<VecI8>)>();

  void std_VecI8_extend(
    ffi.Pointer<VecI8> self,
    ffi.Pointer<VecI8> other,
  ) {
    return _std_VecI8_extend(
      self,
      other,
    );
  }

  late final _std_VecI8_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Pointer<VecI8>)>>(
          'std_VecI8_extend');
  late final _std_VecI8_extend =
      _std_VecI8_extendPtr.asFunction<void Function(ffi.Pointer<VecI8>, ffi.Pointer<VecI8>)>();

  void std_VecI8_free(
    imp1.VecI8Ptr self,
  ) {
    return _std_VecI8_free(
      self,
    );
  }

  late final _std_VecI8_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecI8Ptr)>>('std_VecI8_free');
  late final _std_VecI8_free = _std_VecI8_freePtr.asFunction<void Function(imp1.VecI8Ptr)>();

  int std_VecI8_get(
    ffi.Pointer<VecI8> self,
    int index,
  ) {
    return _std_VecI8_get(
      self,
      index,
    );
  }

  late final _std_VecI8_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<VecI8>, ffi.Size)>>('std_VecI8_get');
  late final _std_VecI8_get = _std_VecI8_getPtr.asFunction<int Function(ffi.Pointer<VecI8>, int)>();

  int std_VecI8_length(
    ffi.Pointer<VecI8> self,
  ) {
    return _std_VecI8_length(
      self,
    );
  }

  late final _std_VecI8_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecI8>)>>('std_VecI8_length');
  late final _std_VecI8_length = _std_VecI8_lengthPtr.asFunction<int Function(ffi.Pointer<VecI8>)>();

  ffi.Pointer<VecI8> std_VecI8_new(
    int length,
  ) {
    return _std_VecI8_new(
      length,
    );
  }

  late final _std_VecI8_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI8> Function(ffi.Size)>>('std_VecI8_new');
  late final _std_VecI8_new = _std_VecI8_newPtr.asFunction<ffi.Pointer<VecI8> Function(int)>();

  ffi.Pointer<VecI8> std_VecI8_new_1(
    int length,
    int val,
  ) {
    return _std_VecI8_new_1(
      length,
      val,
    );
  }

  late final _std_VecI8_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI8> Function(ffi.Size, ffi.Int8)>>('std_VecI8_new_1');
  late final _std_VecI8_new_1 = _std_VecI8_new_1Ptr.asFunction<ffi.Pointer<VecI8> Function(int, int)>();

  ffi.Pointer<VecI8> std_VecI8_new_2(
    int length,
    ffi.Pointer<ffi.Int8> val_ptr,
  ) {
    return _std_VecI8_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecI8_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecI8> Function(ffi.Size, ffi.Pointer<ffi.Int8>)>>(
          'std_VecI8_new_2');
  late final _std_VecI8_new_2 =
      _std_VecI8_new_2Ptr.asFunction<ffi.Pointer<VecI8> Function(int, ffi.Pointer<ffi.Int8>)>();

  void std_VecI8_push_back(
    ffi.Pointer<VecI8> self,
    int val,
  ) {
    return _std_VecI8_push_back(
      self,
      val,
    );
  }

  late final _std_VecI8_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Int8)>>('std_VecI8_push_back');
  late final _std_VecI8_push_back =
      _std_VecI8_push_backPtr.asFunction<void Function(ffi.Pointer<VecI8>, int)>();

  void std_VecI8_reserve(
    ffi.Pointer<VecI8> self,
    int new_len,
  ) {
    return _std_VecI8_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecI8_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Size)>>('std_VecI8_reserve');
  late final _std_VecI8_reserve = _std_VecI8_reservePtr.asFunction<void Function(ffi.Pointer<VecI8>, int)>();

  void std_VecI8_resize(
    ffi.Pointer<VecI8> self,
    int new_len,
  ) {
    return _std_VecI8_resize(
      self,
      new_len,
    );
  }

  late final _std_VecI8_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Size)>>('std_VecI8_resize');
  late final _std_VecI8_resize = _std_VecI8_resizePtr.asFunction<void Function(ffi.Pointer<VecI8>, int)>();

  void std_VecI8_set(
    ffi.Pointer<VecI8> self,
    int index,
    int val,
  ) {
    return _std_VecI8_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecI8_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI8>, ffi.Size, ffi.Int8)>>('std_VecI8_set');
  late final _std_VecI8_set = _std_VecI8_setPtr.asFunction<void Function(ffi.Pointer<VecI8>, int, int)>();

  void std_VecI8_shrink_to_fit(
    ffi.Pointer<VecI8> self,
  ) {
    return _std_VecI8_shrink_to_fit(
      self,
    );
  }

  late final _std_VecI8_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecI8>)>>('std_VecI8_shrink_to_fit');
  late final _std_VecI8_shrink_to_fit =
      _std_VecI8_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecI8>)>();

  void std_VecKeyPoint_clear(
    ffi.Pointer<VecKeyPoint> self,
  ) {
    return _std_VecKeyPoint_clear(
      self,
    );
  }

  late final _std_VecKeyPoint_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecKeyPoint>)>>('std_VecKeyPoint_clear');
  late final _std_VecKeyPoint_clear =
      _std_VecKeyPoint_clearPtr.asFunction<void Function(ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<KeyPoint> std_VecKeyPoint_data(
    ffi.Pointer<VecKeyPoint> self,
  ) {
    return _std_VecKeyPoint_data(
      self,
    );
  }

  late final _std_VecKeyPoint_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KeyPoint> Function(ffi.Pointer<VecKeyPoint>)>>(
          'std_VecKeyPoint_data');
  late final _std_VecKeyPoint_data =
      _std_VecKeyPoint_dataPtr.asFunction<ffi.Pointer<KeyPoint> Function(ffi.Pointer<VecKeyPoint>)>();

  void std_VecKeyPoint_extend(
    ffi.Pointer<VecKeyPoint> self,
    ffi.Pointer<VecKeyPoint> other,
  ) {
    return _std_VecKeyPoint_extend(
      self,
      other,
    );
  }

  late final _std_VecKeyPoint_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecKeyPoint>, ffi.Pointer<VecKeyPoint>)>>(
          'std_VecKeyPoint_extend');
  late final _std_VecKeyPoint_extend = _std_VecKeyPoint_extendPtr
      .asFunction<void Function(ffi.Pointer<VecKeyPoint>, ffi.Pointer<VecKeyPoint>)>();

  void std_VecKeyPoint_free(
    imp1.VecKeyPointPtr self,
  ) {
    return _std_VecKeyPoint_free(
      self,
    );
  }

  late final _std_VecKeyPoint_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecKeyPointPtr)>>('std_VecKeyPoint_free');
  late final _std_VecKeyPoint_free =
      _std_VecKeyPoint_freePtr.asFunction<void Function(imp1.VecKeyPointPtr)>();

  KeyPoint std_VecKeyPoint_get(
    ffi.Pointer<VecKeyPoint> self,
    int index,
  ) {
    return _std_VecKeyPoint_get(
      self,
      index,
    );
  }

  late final _std_VecKeyPoint_getPtr =
      _lookup<ffi.NativeFunction<KeyPoint Function(ffi.Pointer<VecKeyPoint>, ffi.Size)>>(
          'std_VecKeyPoint_get');
  late final _std_VecKeyPoint_get =
      _std_VecKeyPoint_getPtr.asFunction<KeyPoint Function(ffi.Pointer<VecKeyPoint>, int)>();

  ffi.Pointer<KeyPoint> std_VecKeyPoint_get_p(
    ffi.Pointer<VecKeyPoint> self,
    int index,
  ) {
    return _std_VecKeyPoint_get_p(
      self,
      index,
    );
  }

  late final _std_VecKeyPoint_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KeyPoint> Function(ffi.Pointer<VecKeyPoint>, ffi.Int)>>(
          'std_VecKeyPoint_get_p');
  late final _std_VecKeyPoint_get_p =
      _std_VecKeyPoint_get_pPtr.asFunction<ffi.Pointer<KeyPoint> Function(ffi.Pointer<VecKeyPoint>, int)>();

  int std_VecKeyPoint_length(
    ffi.Pointer<VecKeyPoint> self,
  ) {
    return _std_VecKeyPoint_length(
      self,
    );
  }

  late final _std_VecKeyPoint_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecKeyPoint>)>>('std_VecKeyPoint_length');
  late final _std_VecKeyPoint_length =
      _std_VecKeyPoint_lengthPtr.asFunction<int Function(ffi.Pointer<VecKeyPoint>)>();

  ffi.Pointer<VecKeyPoint> std_VecKeyPoint_new(
    int length,
  ) {
    return _std_VecKeyPoint_new(
      length,
    );
  }

  late final _std_VecKeyPoint_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecKeyPoint> Function(ffi.Size)>>('std_VecKeyPoint_new');
  late final _std_VecKeyPoint_new =
      _std_VecKeyPoint_newPtr.asFunction<ffi.Pointer<VecKeyPoint> Function(int)>();

  ffi.Pointer<VecKeyPoint> std_VecKeyPoint_new_1(
    int length,
    KeyPoint val,
  ) {
    return _std_VecKeyPoint_new_1(
      length,
      val,
    );
  }

  late final _std_VecKeyPoint_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecKeyPoint> Function(ffi.Size, KeyPoint)>>(
          'std_VecKeyPoint_new_1');
  late final _std_VecKeyPoint_new_1 =
      _std_VecKeyPoint_new_1Ptr.asFunction<ffi.Pointer<VecKeyPoint> Function(int, KeyPoint)>();

  ffi.Pointer<VecKeyPoint> std_VecKeyPoint_new_2(
    int length,
    ffi.Pointer<KeyPoint> val_ptr,
  ) {
    return _std_VecKeyPoint_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecKeyPoint_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecKeyPoint> Function(ffi.Size, ffi.Pointer<KeyPoint>)>>(
          'std_VecKeyPoint_new_2');
  late final _std_VecKeyPoint_new_2 =
      _std_VecKeyPoint_new_2Ptr.asFunction<ffi.Pointer<VecKeyPoint> Function(int, ffi.Pointer<KeyPoint>)>();

  void std_VecKeyPoint_push_back(
    ffi.Pointer<VecKeyPoint> self,
    KeyPoint val,
  ) {
    return _std_VecKeyPoint_push_back(
      self,
      val,
    );
  }

  late final _std_VecKeyPoint_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecKeyPoint>, KeyPoint)>>(
          'std_VecKeyPoint_push_back');
  late final _std_VecKeyPoint_push_back =
      _std_VecKeyPoint_push_backPtr.asFunction<void Function(ffi.Pointer<VecKeyPoint>, KeyPoint)>();

  void std_VecKeyPoint_reserve(
    ffi.Pointer<VecKeyPoint> self,
    int new_len,
  ) {
    return _std_VecKeyPoint_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecKeyPoint_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecKeyPoint>, ffi.Size)>>(
          'std_VecKeyPoint_reserve');
  late final _std_VecKeyPoint_reserve =
      _std_VecKeyPoint_reservePtr.asFunction<void Function(ffi.Pointer<VecKeyPoint>, int)>();

  void std_VecKeyPoint_resize(
    ffi.Pointer<VecKeyPoint> self,
    int new_len,
  ) {
    return _std_VecKeyPoint_resize(
      self,
      new_len,
    );
  }

  late final _std_VecKeyPoint_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecKeyPoint>, ffi.Size)>>(
          'std_VecKeyPoint_resize');
  late final _std_VecKeyPoint_resize =
      _std_VecKeyPoint_resizePtr.asFunction<void Function(ffi.Pointer<VecKeyPoint>, int)>();

  void std_VecKeyPoint_set(
    ffi.Pointer<VecKeyPoint> self,
    int index,
    KeyPoint val,
  ) {
    return _std_VecKeyPoint_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecKeyPoint_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecKeyPoint>, ffi.Size, KeyPoint)>>(
          'std_VecKeyPoint_set');
  late final _std_VecKeyPoint_set =
      _std_VecKeyPoint_setPtr.asFunction<void Function(ffi.Pointer<VecKeyPoint>, int, KeyPoint)>();

  void std_VecKeyPoint_shrink_to_fit(
    ffi.Pointer<VecKeyPoint> self,
  ) {
    return _std_VecKeyPoint_shrink_to_fit(
      self,
    );
  }

  late final _std_VecKeyPoint_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecKeyPoint>)>>(
          'std_VecKeyPoint_shrink_to_fit');
  late final _std_VecKeyPoint_shrink_to_fit =
      _std_VecKeyPoint_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecKeyPoint>)>();

  void std_VecMat_clear(
    ffi.Pointer<VecMat> self,
  ) {
    return _std_VecMat_clear(
      self,
    );
  }

  late final _std_VecMat_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecMat>)>>('std_VecMat_clear');
  late final _std_VecMat_clear = _std_VecMat_clearPtr.asFunction<void Function(ffi.Pointer<VecMat>)>();

  ffi.Pointer<Mat> std_VecMat_data(
    ffi.Pointer<VecMat> self,
  ) {
    return _std_VecMat_data(
      self,
    );
  }

  late final _std_VecMat_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Mat> Function(ffi.Pointer<VecMat>)>>('std_VecMat_data');
  late final _std_VecMat_data =
      _std_VecMat_dataPtr.asFunction<ffi.Pointer<Mat> Function(ffi.Pointer<VecMat>)>();

  void std_VecMat_extend(
    ffi.Pointer<VecMat> self,
    ffi.Pointer<VecMat> other,
  ) {
    return _std_VecMat_extend(
      self,
      other,
    );
  }

  late final _std_VecMat_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecMat>, ffi.Pointer<VecMat>)>>(
          'std_VecMat_extend');
  late final _std_VecMat_extend =
      _std_VecMat_extendPtr.asFunction<void Function(ffi.Pointer<VecMat>, ffi.Pointer<VecMat>)>();

  void std_VecMat_free(
    imp1.VecMatPtr self,
  ) {
    return _std_VecMat_free(
      self,
    );
  }

  late final _std_VecMat_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecMatPtr)>>('std_VecMat_free');
  late final _std_VecMat_free = _std_VecMat_freePtr.asFunction<void Function(imp1.VecMatPtr)>();

  Mat std_VecMat_get(
    ffi.Pointer<VecMat> self,
    int index,
  ) {
    return _std_VecMat_get(
      self,
      index,
    );
  }

  late final _std_VecMat_getPtr =
      _lookup<ffi.NativeFunction<Mat Function(ffi.Pointer<VecMat>, ffi.Size)>>('std_VecMat_get');
  late final _std_VecMat_get = _std_VecMat_getPtr.asFunction<Mat Function(ffi.Pointer<VecMat>, int)>();

  ffi.Pointer<Mat> std_VecMat_get_p(
    ffi.Pointer<VecMat> self,
    int index,
  ) {
    return _std_VecMat_get_p(
      self,
      index,
    );
  }

  late final _std_VecMat_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Mat> Function(ffi.Pointer<VecMat>, ffi.Int)>>(
          'std_VecMat_get_p');
  late final _std_VecMat_get_p =
      _std_VecMat_get_pPtr.asFunction<ffi.Pointer<Mat> Function(ffi.Pointer<VecMat>, int)>();

  int std_VecMat_length(
    ffi.Pointer<VecMat> self,
  ) {
    return _std_VecMat_length(
      self,
    );
  }

  late final _std_VecMat_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecMat>)>>('std_VecMat_length');
  late final _std_VecMat_length = _std_VecMat_lengthPtr.asFunction<int Function(ffi.Pointer<VecMat>)>();

  ffi.Pointer<VecMat> std_VecMat_new(
    int length,
  ) {
    return _std_VecMat_new(
      length,
    );
  }

  late final _std_VecMat_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecMat> Function(ffi.Size)>>('std_VecMat_new');
  late final _std_VecMat_new = _std_VecMat_newPtr.asFunction<ffi.Pointer<VecMat> Function(int)>();

  ffi.Pointer<VecMat> std_VecMat_new_1(
    int length,
    Mat val,
  ) {
    return _std_VecMat_new_1(
      length,
      val,
    );
  }

  late final _std_VecMat_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecMat> Function(ffi.Size, Mat)>>('std_VecMat_new_1');
  late final _std_VecMat_new_1 = _std_VecMat_new_1Ptr.asFunction<ffi.Pointer<VecMat> Function(int, Mat)>();

  ffi.Pointer<VecMat> std_VecMat_new_2(
    int length,
    ffi.Pointer<Mat> val_ptr,
  ) {
    return _std_VecMat_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecMat_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecMat> Function(ffi.Size, ffi.Pointer<Mat>)>>(
          'std_VecMat_new_2');
  late final _std_VecMat_new_2 =
      _std_VecMat_new_2Ptr.asFunction<ffi.Pointer<VecMat> Function(int, ffi.Pointer<Mat>)>();

  void std_VecMat_push_back(
    ffi.Pointer<VecMat> self,
    Mat val,
  ) {
    return _std_VecMat_push_back(
      self,
      val,
    );
  }

  late final _std_VecMat_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecMat>, Mat)>>('std_VecMat_push_back');
  late final _std_VecMat_push_back =
      _std_VecMat_push_backPtr.asFunction<void Function(ffi.Pointer<VecMat>, Mat)>();

  void std_VecMat_reserve(
    ffi.Pointer<VecMat> self,
    int new_len,
  ) {
    return _std_VecMat_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecMat_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecMat>, ffi.Size)>>('std_VecMat_reserve');
  late final _std_VecMat_reserve =
      _std_VecMat_reservePtr.asFunction<void Function(ffi.Pointer<VecMat>, int)>();

  void std_VecMat_resize(
    ffi.Pointer<VecMat> self,
    int new_len,
  ) {
    return _std_VecMat_resize(
      self,
      new_len,
    );
  }

  late final _std_VecMat_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecMat>, ffi.Size)>>('std_VecMat_resize');
  late final _std_VecMat_resize = _std_VecMat_resizePtr.asFunction<void Function(ffi.Pointer<VecMat>, int)>();

  void std_VecMat_set(
    ffi.Pointer<VecMat> self,
    int index,
    Mat val,
  ) {
    return _std_VecMat_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecMat_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecMat>, ffi.Size, Mat)>>('std_VecMat_set');
  late final _std_VecMat_set = _std_VecMat_setPtr.asFunction<void Function(ffi.Pointer<VecMat>, int, Mat)>();

  void std_VecMat_shrink_to_fit(
    ffi.Pointer<VecMat> self,
  ) {
    return _std_VecMat_shrink_to_fit(
      self,
    );
  }

  late final _std_VecMat_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecMat>)>>('std_VecMat_shrink_to_fit');
  late final _std_VecMat_shrink_to_fit =
      _std_VecMat_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecMat>)>();

  void std_VecPoint2f_clear(
    ffi.Pointer<VecPoint2f> self,
  ) {
    return _std_VecPoint2f_clear(
      self,
    );
  }

  late final _std_VecPoint2f_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint2f>)>>('std_VecPoint2f_clear');
  late final _std_VecPoint2f_clear =
      _std_VecPoint2f_clearPtr.asFunction<void Function(ffi.Pointer<VecPoint2f>)>();

  ffi.Pointer<CvPoint2f> std_VecPoint2f_data(
    ffi.Pointer<VecPoint2f> self,
  ) {
    return _std_VecPoint2f_data(
      self,
    );
  }

  late final _std_VecPoint2f_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvPoint2f> Function(ffi.Pointer<VecPoint2f>)>>(
          'std_VecPoint2f_data');
  late final _std_VecPoint2f_data =
      _std_VecPoint2f_dataPtr.asFunction<ffi.Pointer<CvPoint2f> Function(ffi.Pointer<VecPoint2f>)>();

  void std_VecPoint2f_extend(
    ffi.Pointer<VecPoint2f> self,
    ffi.Pointer<VecPoint2f> other,
  ) {
    return _std_VecPoint2f_extend(
      self,
      other,
    );
  }

  late final _std_VecPoint2f_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint2f>, ffi.Pointer<VecPoint2f>)>>(
          'std_VecPoint2f_extend');
  late final _std_VecPoint2f_extend =
      _std_VecPoint2f_extendPtr.asFunction<void Function(ffi.Pointer<VecPoint2f>, ffi.Pointer<VecPoint2f>)>();

  void std_VecPoint2f_free(
    imp1.VecPoint2fPtr self,
  ) {
    return _std_VecPoint2f_free(
      self,
    );
  }

  late final _std_VecPoint2f_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecPoint2fPtr)>>('std_VecPoint2f_free');
  late final _std_VecPoint2f_free = _std_VecPoint2f_freePtr.asFunction<void Function(imp1.VecPoint2fPtr)>();

  CvPoint2f std_VecPoint2f_get(
    ffi.Pointer<VecPoint2f> self,
    int index,
  ) {
    return _std_VecPoint2f_get(
      self,
      index,
    );
  }

  late final _std_VecPoint2f_getPtr =
      _lookup<ffi.NativeFunction<CvPoint2f Function(ffi.Pointer<VecPoint2f>, ffi.Size)>>(
          'std_VecPoint2f_get');
  late final _std_VecPoint2f_get =
      _std_VecPoint2f_getPtr.asFunction<CvPoint2f Function(ffi.Pointer<VecPoint2f>, int)>();

  ffi.Pointer<CvPoint2f> std_VecPoint2f_get_p(
    ffi.Pointer<VecPoint2f> self,
    int index,
  ) {
    return _std_VecPoint2f_get_p(
      self,
      index,
    );
  }

  late final _std_VecPoint2f_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvPoint2f> Function(ffi.Pointer<VecPoint2f>, ffi.Int)>>(
          'std_VecPoint2f_get_p');
  late final _std_VecPoint2f_get_p =
      _std_VecPoint2f_get_pPtr.asFunction<ffi.Pointer<CvPoint2f> Function(ffi.Pointer<VecPoint2f>, int)>();

  int std_VecPoint2f_length(
    ffi.Pointer<VecPoint2f> self,
  ) {
    return _std_VecPoint2f_length(
      self,
    );
  }

  late final _std_VecPoint2f_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecPoint2f>)>>('std_VecPoint2f_length');
  late final _std_VecPoint2f_length =
      _std_VecPoint2f_lengthPtr.asFunction<int Function(ffi.Pointer<VecPoint2f>)>();

  ffi.Pointer<VecPoint2f> std_VecPoint2f_new(
    int length,
  ) {
    return _std_VecPoint2f_new(
      length,
    );
  }

  late final _std_VecPoint2f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint2f> Function(ffi.Size)>>('std_VecPoint2f_new');
  late final _std_VecPoint2f_new = _std_VecPoint2f_newPtr.asFunction<ffi.Pointer<VecPoint2f> Function(int)>();

  ffi.Pointer<VecPoint2f> std_VecPoint2f_new_1(
    int length,
    CvPoint2f val,
  ) {
    return _std_VecPoint2f_new_1(
      length,
      val,
    );
  }

  late final _std_VecPoint2f_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint2f> Function(ffi.Size, CvPoint2f)>>(
          'std_VecPoint2f_new_1');
  late final _std_VecPoint2f_new_1 =
      _std_VecPoint2f_new_1Ptr.asFunction<ffi.Pointer<VecPoint2f> Function(int, CvPoint2f)>();

  ffi.Pointer<VecPoint2f> std_VecPoint2f_new_2(
    int length,
    ffi.Pointer<CvPoint2f> val_ptr,
  ) {
    return _std_VecPoint2f_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecPoint2f_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint2f> Function(ffi.Size, ffi.Pointer<CvPoint2f>)>>(
          'std_VecPoint2f_new_2');
  late final _std_VecPoint2f_new_2 =
      _std_VecPoint2f_new_2Ptr.asFunction<ffi.Pointer<VecPoint2f> Function(int, ffi.Pointer<CvPoint2f>)>();

  void std_VecPoint2f_push_back(
    ffi.Pointer<VecPoint2f> self,
    CvPoint2f val,
  ) {
    return _std_VecPoint2f_push_back(
      self,
      val,
    );
  }

  late final _std_VecPoint2f_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint2f>, CvPoint2f)>>(
          'std_VecPoint2f_push_back');
  late final _std_VecPoint2f_push_back =
      _std_VecPoint2f_push_backPtr.asFunction<void Function(ffi.Pointer<VecPoint2f>, CvPoint2f)>();

  void std_VecPoint2f_reserve(
    ffi.Pointer<VecPoint2f> self,
    int new_len,
  ) {
    return _std_VecPoint2f_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecPoint2f_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint2f>, ffi.Size)>>(
          'std_VecPoint2f_reserve');
  late final _std_VecPoint2f_reserve =
      _std_VecPoint2f_reservePtr.asFunction<void Function(ffi.Pointer<VecPoint2f>, int)>();

  void std_VecPoint2f_resize(
    ffi.Pointer<VecPoint2f> self,
    int new_len,
  ) {
    return _std_VecPoint2f_resize(
      self,
      new_len,
    );
  }

  late final _std_VecPoint2f_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint2f>, ffi.Size)>>(
          'std_VecPoint2f_resize');
  late final _std_VecPoint2f_resize =
      _std_VecPoint2f_resizePtr.asFunction<void Function(ffi.Pointer<VecPoint2f>, int)>();

  void std_VecPoint2f_set(
    ffi.Pointer<VecPoint2f> self,
    int index,
    CvPoint2f val,
  ) {
    return _std_VecPoint2f_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecPoint2f_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint2f>, ffi.Size, CvPoint2f)>>(
          'std_VecPoint2f_set');
  late final _std_VecPoint2f_set =
      _std_VecPoint2f_setPtr.asFunction<void Function(ffi.Pointer<VecPoint2f>, int, CvPoint2f)>();

  void std_VecPoint2f_shrink_to_fit(
    ffi.Pointer<VecPoint2f> self,
  ) {
    return _std_VecPoint2f_shrink_to_fit(
      self,
    );
  }

  late final _std_VecPoint2f_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint2f>)>>('std_VecPoint2f_shrink_to_fit');
  late final _std_VecPoint2f_shrink_to_fit =
      _std_VecPoint2f_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecPoint2f>)>();

  void std_VecPoint3f_clear(
    ffi.Pointer<VecPoint3f> self,
  ) {
    return _std_VecPoint3f_clear(
      self,
    );
  }

  late final _std_VecPoint3f_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3f>)>>('std_VecPoint3f_clear');
  late final _std_VecPoint3f_clear =
      _std_VecPoint3f_clearPtr.asFunction<void Function(ffi.Pointer<VecPoint3f>)>();

  ffi.Pointer<CvPoint3f> std_VecPoint3f_data(
    ffi.Pointer<VecPoint3f> self,
  ) {
    return _std_VecPoint3f_data(
      self,
    );
  }

  late final _std_VecPoint3f_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvPoint3f> Function(ffi.Pointer<VecPoint3f>)>>(
          'std_VecPoint3f_data');
  late final _std_VecPoint3f_data =
      _std_VecPoint3f_dataPtr.asFunction<ffi.Pointer<CvPoint3f> Function(ffi.Pointer<VecPoint3f>)>();

  void std_VecPoint3f_extend(
    ffi.Pointer<VecPoint3f> self,
    ffi.Pointer<VecPoint3f> other,
  ) {
    return _std_VecPoint3f_extend(
      self,
      other,
    );
  }

  late final _std_VecPoint3f_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3f>, ffi.Pointer<VecPoint3f>)>>(
          'std_VecPoint3f_extend');
  late final _std_VecPoint3f_extend =
      _std_VecPoint3f_extendPtr.asFunction<void Function(ffi.Pointer<VecPoint3f>, ffi.Pointer<VecPoint3f>)>();

  void std_VecPoint3f_free(
    imp1.VecPoint3fPtr self,
  ) {
    return _std_VecPoint3f_free(
      self,
    );
  }

  late final _std_VecPoint3f_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecPoint3fPtr)>>('std_VecPoint3f_free');
  late final _std_VecPoint3f_free = _std_VecPoint3f_freePtr.asFunction<void Function(imp1.VecPoint3fPtr)>();

  CvPoint3f std_VecPoint3f_get(
    ffi.Pointer<VecPoint3f> self,
    int index,
  ) {
    return _std_VecPoint3f_get(
      self,
      index,
    );
  }

  late final _std_VecPoint3f_getPtr =
      _lookup<ffi.NativeFunction<CvPoint3f Function(ffi.Pointer<VecPoint3f>, ffi.Size)>>(
          'std_VecPoint3f_get');
  late final _std_VecPoint3f_get =
      _std_VecPoint3f_getPtr.asFunction<CvPoint3f Function(ffi.Pointer<VecPoint3f>, int)>();

  ffi.Pointer<CvPoint3f> std_VecPoint3f_get_p(
    ffi.Pointer<VecPoint3f> self,
    int index,
  ) {
    return _std_VecPoint3f_get_p(
      self,
      index,
    );
  }

  late final _std_VecPoint3f_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvPoint3f> Function(ffi.Pointer<VecPoint3f>, ffi.Int)>>(
          'std_VecPoint3f_get_p');
  late final _std_VecPoint3f_get_p =
      _std_VecPoint3f_get_pPtr.asFunction<ffi.Pointer<CvPoint3f> Function(ffi.Pointer<VecPoint3f>, int)>();

  int std_VecPoint3f_length(
    ffi.Pointer<VecPoint3f> self,
  ) {
    return _std_VecPoint3f_length(
      self,
    );
  }

  late final _std_VecPoint3f_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecPoint3f>)>>('std_VecPoint3f_length');
  late final _std_VecPoint3f_length =
      _std_VecPoint3f_lengthPtr.asFunction<int Function(ffi.Pointer<VecPoint3f>)>();

  ffi.Pointer<VecPoint3f> std_VecPoint3f_new(
    int length,
  ) {
    return _std_VecPoint3f_new(
      length,
    );
  }

  late final _std_VecPoint3f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3f> Function(ffi.Size)>>('std_VecPoint3f_new');
  late final _std_VecPoint3f_new = _std_VecPoint3f_newPtr.asFunction<ffi.Pointer<VecPoint3f> Function(int)>();

  ffi.Pointer<VecPoint3f> std_VecPoint3f_new_1(
    int length,
    CvPoint3f val,
  ) {
    return _std_VecPoint3f_new_1(
      length,
      val,
    );
  }

  late final _std_VecPoint3f_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3f> Function(ffi.Size, CvPoint3f)>>(
          'std_VecPoint3f_new_1');
  late final _std_VecPoint3f_new_1 =
      _std_VecPoint3f_new_1Ptr.asFunction<ffi.Pointer<VecPoint3f> Function(int, CvPoint3f)>();

  ffi.Pointer<VecPoint3f> std_VecPoint3f_new_2(
    int length,
    ffi.Pointer<CvPoint3f> val_ptr,
  ) {
    return _std_VecPoint3f_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecPoint3f_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3f> Function(ffi.Size, ffi.Pointer<CvPoint3f>)>>(
          'std_VecPoint3f_new_2');
  late final _std_VecPoint3f_new_2 =
      _std_VecPoint3f_new_2Ptr.asFunction<ffi.Pointer<VecPoint3f> Function(int, ffi.Pointer<CvPoint3f>)>();

  void std_VecPoint3f_push_back(
    ffi.Pointer<VecPoint3f> self,
    CvPoint3f val,
  ) {
    return _std_VecPoint3f_push_back(
      self,
      val,
    );
  }

  late final _std_VecPoint3f_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3f>, CvPoint3f)>>(
          'std_VecPoint3f_push_back');
  late final _std_VecPoint3f_push_back =
      _std_VecPoint3f_push_backPtr.asFunction<void Function(ffi.Pointer<VecPoint3f>, CvPoint3f)>();

  void std_VecPoint3f_reserve(
    ffi.Pointer<VecPoint3f> self,
    int new_len,
  ) {
    return _std_VecPoint3f_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecPoint3f_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3f>, ffi.Size)>>(
          'std_VecPoint3f_reserve');
  late final _std_VecPoint3f_reserve =
      _std_VecPoint3f_reservePtr.asFunction<void Function(ffi.Pointer<VecPoint3f>, int)>();

  void std_VecPoint3f_resize(
    ffi.Pointer<VecPoint3f> self,
    int new_len,
  ) {
    return _std_VecPoint3f_resize(
      self,
      new_len,
    );
  }

  late final _std_VecPoint3f_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3f>, ffi.Size)>>(
          'std_VecPoint3f_resize');
  late final _std_VecPoint3f_resize =
      _std_VecPoint3f_resizePtr.asFunction<void Function(ffi.Pointer<VecPoint3f>, int)>();

  void std_VecPoint3f_set(
    ffi.Pointer<VecPoint3f> self,
    int index,
    CvPoint3f val,
  ) {
    return _std_VecPoint3f_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecPoint3f_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3f>, ffi.Size, CvPoint3f)>>(
          'std_VecPoint3f_set');
  late final _std_VecPoint3f_set =
      _std_VecPoint3f_setPtr.asFunction<void Function(ffi.Pointer<VecPoint3f>, int, CvPoint3f)>();

  void std_VecPoint3f_shrink_to_fit(
    ffi.Pointer<VecPoint3f> self,
  ) {
    return _std_VecPoint3f_shrink_to_fit(
      self,
    );
  }

  late final _std_VecPoint3f_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3f>)>>('std_VecPoint3f_shrink_to_fit');
  late final _std_VecPoint3f_shrink_to_fit =
      _std_VecPoint3f_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecPoint3f>)>();

  void std_VecPoint3i_clear(
    ffi.Pointer<VecPoint3i> self,
  ) {
    return _std_VecPoint3i_clear(
      self,
    );
  }

  late final _std_VecPoint3i_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3i>)>>('std_VecPoint3i_clear');
  late final _std_VecPoint3i_clear =
      _std_VecPoint3i_clearPtr.asFunction<void Function(ffi.Pointer<VecPoint3i>)>();

  ffi.Pointer<CvPoint3i> std_VecPoint3i_data(
    ffi.Pointer<VecPoint3i> self,
  ) {
    return _std_VecPoint3i_data(
      self,
    );
  }

  late final _std_VecPoint3i_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvPoint3i> Function(ffi.Pointer<VecPoint3i>)>>(
          'std_VecPoint3i_data');
  late final _std_VecPoint3i_data =
      _std_VecPoint3i_dataPtr.asFunction<ffi.Pointer<CvPoint3i> Function(ffi.Pointer<VecPoint3i>)>();

  void std_VecPoint3i_extend(
    ffi.Pointer<VecPoint3i> self,
    ffi.Pointer<VecPoint3i> other,
  ) {
    return _std_VecPoint3i_extend(
      self,
      other,
    );
  }

  late final _std_VecPoint3i_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3i>, ffi.Pointer<VecPoint3i>)>>(
          'std_VecPoint3i_extend');
  late final _std_VecPoint3i_extend =
      _std_VecPoint3i_extendPtr.asFunction<void Function(ffi.Pointer<VecPoint3i>, ffi.Pointer<VecPoint3i>)>();

  void std_VecPoint3i_free(
    imp1.VecPoint3iPtr self,
  ) {
    return _std_VecPoint3i_free(
      self,
    );
  }

  late final _std_VecPoint3i_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecPoint3iPtr)>>('std_VecPoint3i_free');
  late final _std_VecPoint3i_free = _std_VecPoint3i_freePtr.asFunction<void Function(imp1.VecPoint3iPtr)>();

  CvPoint3i std_VecPoint3i_get(
    ffi.Pointer<VecPoint3i> self,
    int index,
  ) {
    return _std_VecPoint3i_get(
      self,
      index,
    );
  }

  late final _std_VecPoint3i_getPtr =
      _lookup<ffi.NativeFunction<CvPoint3i Function(ffi.Pointer<VecPoint3i>, ffi.Size)>>(
          'std_VecPoint3i_get');
  late final _std_VecPoint3i_get =
      _std_VecPoint3i_getPtr.asFunction<CvPoint3i Function(ffi.Pointer<VecPoint3i>, int)>();

  ffi.Pointer<CvPoint3i> std_VecPoint3i_get_p(
    ffi.Pointer<VecPoint3i> self,
    int index,
  ) {
    return _std_VecPoint3i_get_p(
      self,
      index,
    );
  }

  late final _std_VecPoint3i_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvPoint3i> Function(ffi.Pointer<VecPoint3i>, ffi.Int)>>(
          'std_VecPoint3i_get_p');
  late final _std_VecPoint3i_get_p =
      _std_VecPoint3i_get_pPtr.asFunction<ffi.Pointer<CvPoint3i> Function(ffi.Pointer<VecPoint3i>, int)>();

  int std_VecPoint3i_length(
    ffi.Pointer<VecPoint3i> self,
  ) {
    return _std_VecPoint3i_length(
      self,
    );
  }

  late final _std_VecPoint3i_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecPoint3i>)>>('std_VecPoint3i_length');
  late final _std_VecPoint3i_length =
      _std_VecPoint3i_lengthPtr.asFunction<int Function(ffi.Pointer<VecPoint3i>)>();

  ffi.Pointer<VecPoint3i> std_VecPoint3i_new(
    int length,
  ) {
    return _std_VecPoint3i_new(
      length,
    );
  }

  late final _std_VecPoint3i_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3i> Function(ffi.Size)>>('std_VecPoint3i_new');
  late final _std_VecPoint3i_new = _std_VecPoint3i_newPtr.asFunction<ffi.Pointer<VecPoint3i> Function(int)>();

  ffi.Pointer<VecPoint3i> std_VecPoint3i_new_1(
    int length,
    CvPoint3i val,
  ) {
    return _std_VecPoint3i_new_1(
      length,
      val,
    );
  }

  late final _std_VecPoint3i_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3i> Function(ffi.Size, CvPoint3i)>>(
          'std_VecPoint3i_new_1');
  late final _std_VecPoint3i_new_1 =
      _std_VecPoint3i_new_1Ptr.asFunction<ffi.Pointer<VecPoint3i> Function(int, CvPoint3i)>();

  ffi.Pointer<VecPoint3i> std_VecPoint3i_new_2(
    int length,
    ffi.Pointer<CvPoint3i> val_ptr,
  ) {
    return _std_VecPoint3i_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecPoint3i_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3i> Function(ffi.Size, ffi.Pointer<CvPoint3i>)>>(
          'std_VecPoint3i_new_2');
  late final _std_VecPoint3i_new_2 =
      _std_VecPoint3i_new_2Ptr.asFunction<ffi.Pointer<VecPoint3i> Function(int, ffi.Pointer<CvPoint3i>)>();

  void std_VecPoint3i_push_back(
    ffi.Pointer<VecPoint3i> self,
    CvPoint3i val,
  ) {
    return _std_VecPoint3i_push_back(
      self,
      val,
    );
  }

  late final _std_VecPoint3i_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3i>, CvPoint3i)>>(
          'std_VecPoint3i_push_back');
  late final _std_VecPoint3i_push_back =
      _std_VecPoint3i_push_backPtr.asFunction<void Function(ffi.Pointer<VecPoint3i>, CvPoint3i)>();

  void std_VecPoint3i_reserve(
    ffi.Pointer<VecPoint3i> self,
    int new_len,
  ) {
    return _std_VecPoint3i_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecPoint3i_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3i>, ffi.Size)>>(
          'std_VecPoint3i_reserve');
  late final _std_VecPoint3i_reserve =
      _std_VecPoint3i_reservePtr.asFunction<void Function(ffi.Pointer<VecPoint3i>, int)>();

  void std_VecPoint3i_resize(
    ffi.Pointer<VecPoint3i> self,
    int new_len,
  ) {
    return _std_VecPoint3i_resize(
      self,
      new_len,
    );
  }

  late final _std_VecPoint3i_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3i>, ffi.Size)>>(
          'std_VecPoint3i_resize');
  late final _std_VecPoint3i_resize =
      _std_VecPoint3i_resizePtr.asFunction<void Function(ffi.Pointer<VecPoint3i>, int)>();

  void std_VecPoint3i_set(
    ffi.Pointer<VecPoint3i> self,
    int index,
    CvPoint3i val,
  ) {
    return _std_VecPoint3i_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecPoint3i_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3i>, ffi.Size, CvPoint3i)>>(
          'std_VecPoint3i_set');
  late final _std_VecPoint3i_set =
      _std_VecPoint3i_setPtr.asFunction<void Function(ffi.Pointer<VecPoint3i>, int, CvPoint3i)>();

  void std_VecPoint3i_shrink_to_fit(
    ffi.Pointer<VecPoint3i> self,
  ) {
    return _std_VecPoint3i_shrink_to_fit(
      self,
    );
  }

  late final _std_VecPoint3i_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint3i>)>>('std_VecPoint3i_shrink_to_fit');
  late final _std_VecPoint3i_shrink_to_fit =
      _std_VecPoint3i_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecPoint3i>)>();

  void std_VecPoint_clear(
    ffi.Pointer<VecPoint> self,
  ) {
    return _std_VecPoint_clear(
      self,
    );
  }

  late final _std_VecPoint_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint>)>>('std_VecPoint_clear');
  late final _std_VecPoint_clear = _std_VecPoint_clearPtr.asFunction<void Function(ffi.Pointer<VecPoint>)>();

  ffi.Pointer<CvPoint> std_VecPoint_data(
    ffi.Pointer<VecPoint> self,
  ) {
    return _std_VecPoint_data(
      self,
    );
  }

  late final _std_VecPoint_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvPoint> Function(ffi.Pointer<VecPoint>)>>('std_VecPoint_data');
  late final _std_VecPoint_data =
      _std_VecPoint_dataPtr.asFunction<ffi.Pointer<CvPoint> Function(ffi.Pointer<VecPoint>)>();

  void std_VecPoint_extend(
    ffi.Pointer<VecPoint> self,
    ffi.Pointer<VecPoint> other,
  ) {
    return _std_VecPoint_extend(
      self,
      other,
    );
  }

  late final _std_VecPoint_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint>, ffi.Pointer<VecPoint>)>>(
          'std_VecPoint_extend');
  late final _std_VecPoint_extend =
      _std_VecPoint_extendPtr.asFunction<void Function(ffi.Pointer<VecPoint>, ffi.Pointer<VecPoint>)>();

  void std_VecPoint_free(
    imp1.VecPointPtr self,
  ) {
    return _std_VecPoint_free(
      self,
    );
  }

  late final _std_VecPoint_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecPointPtr)>>('std_VecPoint_free');
  late final _std_VecPoint_free = _std_VecPoint_freePtr.asFunction<void Function(imp1.VecPointPtr)>();

  CvPoint std_VecPoint_get(
    ffi.Pointer<VecPoint> self,
    int index,
  ) {
    return _std_VecPoint_get(
      self,
      index,
    );
  }

  late final _std_VecPoint_getPtr =
      _lookup<ffi.NativeFunction<CvPoint Function(ffi.Pointer<VecPoint>, ffi.Size)>>('std_VecPoint_get');
  late final _std_VecPoint_get =
      _std_VecPoint_getPtr.asFunction<CvPoint Function(ffi.Pointer<VecPoint>, int)>();

  ffi.Pointer<CvPoint> std_VecPoint_get_p(
    ffi.Pointer<VecPoint> self,
    int index,
  ) {
    return _std_VecPoint_get_p(
      self,
      index,
    );
  }

  late final _std_VecPoint_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvPoint> Function(ffi.Pointer<VecPoint>, ffi.Int)>>(
          'std_VecPoint_get_p');
  late final _std_VecPoint_get_p =
      _std_VecPoint_get_pPtr.asFunction<ffi.Pointer<CvPoint> Function(ffi.Pointer<VecPoint>, int)>();

  int std_VecPoint_length(
    ffi.Pointer<VecPoint> self,
  ) {
    return _std_VecPoint_length(
      self,
    );
  }

  late final _std_VecPoint_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecPoint>)>>('std_VecPoint_length');
  late final _std_VecPoint_length = _std_VecPoint_lengthPtr.asFunction<int Function(ffi.Pointer<VecPoint>)>();

  ffi.Pointer<VecPoint> std_VecPoint_new(
    int length,
  ) {
    return _std_VecPoint_new(
      length,
    );
  }

  late final _std_VecPoint_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint> Function(ffi.Size)>>('std_VecPoint_new');
  late final _std_VecPoint_new = _std_VecPoint_newPtr.asFunction<ffi.Pointer<VecPoint> Function(int)>();

  ffi.Pointer<VecPoint> std_VecPoint_new_1(
    int length,
    CvPoint val,
  ) {
    return _std_VecPoint_new_1(
      length,
      val,
    );
  }

  late final _std_VecPoint_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint> Function(ffi.Size, CvPoint)>>('std_VecPoint_new_1');
  late final _std_VecPoint_new_1 =
      _std_VecPoint_new_1Ptr.asFunction<ffi.Pointer<VecPoint> Function(int, CvPoint)>();

  ffi.Pointer<VecPoint> std_VecPoint_new_2(
    int length,
    ffi.Pointer<CvPoint> val_ptr,
  ) {
    return _std_VecPoint_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecPoint_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint> Function(ffi.Size, ffi.Pointer<CvPoint>)>>(
          'std_VecPoint_new_2');
  late final _std_VecPoint_new_2 =
      _std_VecPoint_new_2Ptr.asFunction<ffi.Pointer<VecPoint> Function(int, ffi.Pointer<CvPoint>)>();

  void std_VecPoint_push_back(
    ffi.Pointer<VecPoint> self,
    CvPoint val,
  ) {
    return _std_VecPoint_push_back(
      self,
      val,
    );
  }

  late final _std_VecPoint_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint>, CvPoint)>>(
          'std_VecPoint_push_back');
  late final _std_VecPoint_push_back =
      _std_VecPoint_push_backPtr.asFunction<void Function(ffi.Pointer<VecPoint>, CvPoint)>();

  void std_VecPoint_reserve(
    ffi.Pointer<VecPoint> self,
    int new_len,
  ) {
    return _std_VecPoint_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecPoint_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint>, ffi.Size)>>('std_VecPoint_reserve');
  late final _std_VecPoint_reserve =
      _std_VecPoint_reservePtr.asFunction<void Function(ffi.Pointer<VecPoint>, int)>();

  void std_VecPoint_resize(
    ffi.Pointer<VecPoint> self,
    int new_len,
  ) {
    return _std_VecPoint_resize(
      self,
      new_len,
    );
  }

  late final _std_VecPoint_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint>, ffi.Size)>>('std_VecPoint_resize');
  late final _std_VecPoint_resize =
      _std_VecPoint_resizePtr.asFunction<void Function(ffi.Pointer<VecPoint>, int)>();

  void std_VecPoint_set(
    ffi.Pointer<VecPoint> self,
    int index,
    CvPoint val,
  ) {
    return _std_VecPoint_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecPoint_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint>, ffi.Size, CvPoint)>>(
          'std_VecPoint_set');
  late final _std_VecPoint_set =
      _std_VecPoint_setPtr.asFunction<void Function(ffi.Pointer<VecPoint>, int, CvPoint)>();

  void std_VecPoint_shrink_to_fit(
    ffi.Pointer<VecPoint> self,
  ) {
    return _std_VecPoint_shrink_to_fit(
      self,
    );
  }

  late final _std_VecPoint_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecPoint>)>>('std_VecPoint_shrink_to_fit');
  late final _std_VecPoint_shrink_to_fit =
      _std_VecPoint_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecPoint>)>();

  void std_VecRect2f_clear(
    ffi.Pointer<VecRect2f> self,
  ) {
    return _std_VecRect2f_clear(
      self,
    );
  }

  late final _std_VecRect2f_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect2f>)>>('std_VecRect2f_clear');
  late final _std_VecRect2f_clear =
      _std_VecRect2f_clearPtr.asFunction<void Function(ffi.Pointer<VecRect2f>)>();

  ffi.Pointer<CvRect2f> std_VecRect2f_data(
    ffi.Pointer<VecRect2f> self,
  ) {
    return _std_VecRect2f_data(
      self,
    );
  }

  late final _std_VecRect2f_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvRect2f> Function(ffi.Pointer<VecRect2f>)>>(
          'std_VecRect2f_data');
  late final _std_VecRect2f_data =
      _std_VecRect2f_dataPtr.asFunction<ffi.Pointer<CvRect2f> Function(ffi.Pointer<VecRect2f>)>();

  void std_VecRect2f_extend(
    ffi.Pointer<VecRect2f> self,
    ffi.Pointer<VecRect2f> other,
  ) {
    return _std_VecRect2f_extend(
      self,
      other,
    );
  }

  late final _std_VecRect2f_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect2f>, ffi.Pointer<VecRect2f>)>>(
          'std_VecRect2f_extend');
  late final _std_VecRect2f_extend =
      _std_VecRect2f_extendPtr.asFunction<void Function(ffi.Pointer<VecRect2f>, ffi.Pointer<VecRect2f>)>();

  void std_VecRect2f_free(
    imp1.VecRect2fPtr self,
  ) {
    return _std_VecRect2f_free(
      self,
    );
  }

  late final _std_VecRect2f_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecRect2fPtr)>>('std_VecRect2f_free');
  late final _std_VecRect2f_free = _std_VecRect2f_freePtr.asFunction<void Function(imp1.VecRect2fPtr)>();

  CvRect2f std_VecRect2f_get(
    ffi.Pointer<VecRect2f> self,
    int index,
  ) {
    return _std_VecRect2f_get(
      self,
      index,
    );
  }

  late final _std_VecRect2f_getPtr =
      _lookup<ffi.NativeFunction<CvRect2f Function(ffi.Pointer<VecRect2f>, ffi.Size)>>('std_VecRect2f_get');
  late final _std_VecRect2f_get =
      _std_VecRect2f_getPtr.asFunction<CvRect2f Function(ffi.Pointer<VecRect2f>, int)>();

  ffi.Pointer<CvRect2f> std_VecRect2f_get_p(
    ffi.Pointer<VecRect2f> self,
    int index,
  ) {
    return _std_VecRect2f_get_p(
      self,
      index,
    );
  }

  late final _std_VecRect2f_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvRect2f> Function(ffi.Pointer<VecRect2f>, ffi.Int)>>(
          'std_VecRect2f_get_p');
  late final _std_VecRect2f_get_p =
      _std_VecRect2f_get_pPtr.asFunction<ffi.Pointer<CvRect2f> Function(ffi.Pointer<VecRect2f>, int)>();

  int std_VecRect2f_length(
    ffi.Pointer<VecRect2f> self,
  ) {
    return _std_VecRect2f_length(
      self,
    );
  }

  late final _std_VecRect2f_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecRect2f>)>>('std_VecRect2f_length');
  late final _std_VecRect2f_length =
      _std_VecRect2f_lengthPtr.asFunction<int Function(ffi.Pointer<VecRect2f>)>();

  ffi.Pointer<VecRect2f> std_VecRect2f_new(
    int length,
  ) {
    return _std_VecRect2f_new(
      length,
    );
  }

  late final _std_VecRect2f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRect2f> Function(ffi.Size)>>('std_VecRect2f_new');
  late final _std_VecRect2f_new = _std_VecRect2f_newPtr.asFunction<ffi.Pointer<VecRect2f> Function(int)>();

  ffi.Pointer<VecRect2f> std_VecRect2f_new_1(
    int length,
    CvRect2f val,
  ) {
    return _std_VecRect2f_new_1(
      length,
      val,
    );
  }

  late final _std_VecRect2f_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRect2f> Function(ffi.Size, CvRect2f)>>('std_VecRect2f_new_1');
  late final _std_VecRect2f_new_1 =
      _std_VecRect2f_new_1Ptr.asFunction<ffi.Pointer<VecRect2f> Function(int, CvRect2f)>();

  ffi.Pointer<VecRect2f> std_VecRect2f_new_2(
    int length,
    ffi.Pointer<CvRect2f> val_ptr,
  ) {
    return _std_VecRect2f_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecRect2f_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRect2f> Function(ffi.Size, ffi.Pointer<CvRect2f>)>>(
          'std_VecRect2f_new_2');
  late final _std_VecRect2f_new_2 =
      _std_VecRect2f_new_2Ptr.asFunction<ffi.Pointer<VecRect2f> Function(int, ffi.Pointer<CvRect2f>)>();

  void std_VecRect2f_push_back(
    ffi.Pointer<VecRect2f> self,
    CvRect2f val,
  ) {
    return _std_VecRect2f_push_back(
      self,
      val,
    );
  }

  late final _std_VecRect2f_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect2f>, CvRect2f)>>(
          'std_VecRect2f_push_back');
  late final _std_VecRect2f_push_back =
      _std_VecRect2f_push_backPtr.asFunction<void Function(ffi.Pointer<VecRect2f>, CvRect2f)>();

  void std_VecRect2f_reserve(
    ffi.Pointer<VecRect2f> self,
    int new_len,
  ) {
    return _std_VecRect2f_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecRect2f_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect2f>, ffi.Size)>>(
          'std_VecRect2f_reserve');
  late final _std_VecRect2f_reserve =
      _std_VecRect2f_reservePtr.asFunction<void Function(ffi.Pointer<VecRect2f>, int)>();

  void std_VecRect2f_resize(
    ffi.Pointer<VecRect2f> self,
    int new_len,
  ) {
    return _std_VecRect2f_resize(
      self,
      new_len,
    );
  }

  late final _std_VecRect2f_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect2f>, ffi.Size)>>(
          'std_VecRect2f_resize');
  late final _std_VecRect2f_resize =
      _std_VecRect2f_resizePtr.asFunction<void Function(ffi.Pointer<VecRect2f>, int)>();

  void std_VecRect2f_set(
    ffi.Pointer<VecRect2f> self,
    int index,
    CvRect2f val,
  ) {
    return _std_VecRect2f_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecRect2f_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect2f>, ffi.Size, CvRect2f)>>(
          'std_VecRect2f_set');
  late final _std_VecRect2f_set =
      _std_VecRect2f_setPtr.asFunction<void Function(ffi.Pointer<VecRect2f>, int, CvRect2f)>();

  void std_VecRect2f_shrink_to_fit(
    ffi.Pointer<VecRect2f> self,
  ) {
    return _std_VecRect2f_shrink_to_fit(
      self,
    );
  }

  late final _std_VecRect2f_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect2f>)>>('std_VecRect2f_shrink_to_fit');
  late final _std_VecRect2f_shrink_to_fit =
      _std_VecRect2f_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecRect2f>)>();

  void std_VecRect_clear(
    ffi.Pointer<VecRect> self,
  ) {
    return _std_VecRect_clear(
      self,
    );
  }

  late final _std_VecRect_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect>)>>('std_VecRect_clear');
  late final _std_VecRect_clear = _std_VecRect_clearPtr.asFunction<void Function(ffi.Pointer<VecRect>)>();

  ffi.Pointer<CvRect> std_VecRect_data(
    ffi.Pointer<VecRect> self,
  ) {
    return _std_VecRect_data(
      self,
    );
  }

  late final _std_VecRect_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvRect> Function(ffi.Pointer<VecRect>)>>('std_VecRect_data');
  late final _std_VecRect_data =
      _std_VecRect_dataPtr.asFunction<ffi.Pointer<CvRect> Function(ffi.Pointer<VecRect>)>();

  void std_VecRect_extend(
    ffi.Pointer<VecRect> self,
    ffi.Pointer<VecRect> other,
  ) {
    return _std_VecRect_extend(
      self,
      other,
    );
  }

  late final _std_VecRect_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect>, ffi.Pointer<VecRect>)>>(
          'std_VecRect_extend');
  late final _std_VecRect_extend =
      _std_VecRect_extendPtr.asFunction<void Function(ffi.Pointer<VecRect>, ffi.Pointer<VecRect>)>();

  void std_VecRect_free(
    imp1.VecRectPtr self,
  ) {
    return _std_VecRect_free(
      self,
    );
  }

  late final _std_VecRect_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecRectPtr)>>('std_VecRect_free');
  late final _std_VecRect_free = _std_VecRect_freePtr.asFunction<void Function(imp1.VecRectPtr)>();

  CvRect std_VecRect_get(
    ffi.Pointer<VecRect> self,
    int index,
  ) {
    return _std_VecRect_get(
      self,
      index,
    );
  }

  late final _std_VecRect_getPtr =
      _lookup<ffi.NativeFunction<CvRect Function(ffi.Pointer<VecRect>, ffi.Size)>>('std_VecRect_get');
  late final _std_VecRect_get = _std_VecRect_getPtr.asFunction<CvRect Function(ffi.Pointer<VecRect>, int)>();

  ffi.Pointer<CvRect> std_VecRect_get_p(
    ffi.Pointer<VecRect> self,
    int index,
  ) {
    return _std_VecRect_get_p(
      self,
      index,
    );
  }

  late final _std_VecRect_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvRect> Function(ffi.Pointer<VecRect>, ffi.Int)>>(
          'std_VecRect_get_p');
  late final _std_VecRect_get_p =
      _std_VecRect_get_pPtr.asFunction<ffi.Pointer<CvRect> Function(ffi.Pointer<VecRect>, int)>();

  int std_VecRect_length(
    ffi.Pointer<VecRect> self,
  ) {
    return _std_VecRect_length(
      self,
    );
  }

  late final _std_VecRect_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecRect>)>>('std_VecRect_length');
  late final _std_VecRect_length = _std_VecRect_lengthPtr.asFunction<int Function(ffi.Pointer<VecRect>)>();

  ffi.Pointer<VecRect> std_VecRect_new(
    int length,
  ) {
    return _std_VecRect_new(
      length,
    );
  }

  late final _std_VecRect_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRect> Function(ffi.Size)>>('std_VecRect_new');
  late final _std_VecRect_new = _std_VecRect_newPtr.asFunction<ffi.Pointer<VecRect> Function(int)>();

  ffi.Pointer<VecRect> std_VecRect_new_1(
    int length,
    CvRect val,
  ) {
    return _std_VecRect_new_1(
      length,
      val,
    );
  }

  late final _std_VecRect_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRect> Function(ffi.Size, CvRect)>>('std_VecRect_new_1');
  late final _std_VecRect_new_1 =
      _std_VecRect_new_1Ptr.asFunction<ffi.Pointer<VecRect> Function(int, CvRect)>();

  ffi.Pointer<VecRect> std_VecRect_new_2(
    int length,
    ffi.Pointer<CvRect> val_ptr,
  ) {
    return _std_VecRect_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecRect_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRect> Function(ffi.Size, ffi.Pointer<CvRect>)>>(
          'std_VecRect_new_2');
  late final _std_VecRect_new_2 =
      _std_VecRect_new_2Ptr.asFunction<ffi.Pointer<VecRect> Function(int, ffi.Pointer<CvRect>)>();

  void std_VecRect_push_back(
    ffi.Pointer<VecRect> self,
    CvRect val,
  ) {
    return _std_VecRect_push_back(
      self,
      val,
    );
  }

  late final _std_VecRect_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect>, CvRect)>>('std_VecRect_push_back');
  late final _std_VecRect_push_back =
      _std_VecRect_push_backPtr.asFunction<void Function(ffi.Pointer<VecRect>, CvRect)>();

  void std_VecRect_reserve(
    ffi.Pointer<VecRect> self,
    int new_len,
  ) {
    return _std_VecRect_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecRect_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect>, ffi.Size)>>('std_VecRect_reserve');
  late final _std_VecRect_reserve =
      _std_VecRect_reservePtr.asFunction<void Function(ffi.Pointer<VecRect>, int)>();

  void std_VecRect_resize(
    ffi.Pointer<VecRect> self,
    int new_len,
  ) {
    return _std_VecRect_resize(
      self,
      new_len,
    );
  }

  late final _std_VecRect_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect>, ffi.Size)>>('std_VecRect_resize');
  late final _std_VecRect_resize =
      _std_VecRect_resizePtr.asFunction<void Function(ffi.Pointer<VecRect>, int)>();

  void std_VecRect_set(
    ffi.Pointer<VecRect> self,
    int index,
    CvRect val,
  ) {
    return _std_VecRect_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecRect_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect>, ffi.Size, CvRect)>>(
          'std_VecRect_set');
  late final _std_VecRect_set =
      _std_VecRect_setPtr.asFunction<void Function(ffi.Pointer<VecRect>, int, CvRect)>();

  void std_VecRect_shrink_to_fit(
    ffi.Pointer<VecRect> self,
  ) {
    return _std_VecRect_shrink_to_fit(
      self,
    );
  }

  late final _std_VecRect_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRect>)>>('std_VecRect_shrink_to_fit');
  late final _std_VecRect_shrink_to_fit =
      _std_VecRect_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecRect>)>();

  void std_VecRotatedRect_clear(
    ffi.Pointer<VecRotatedRect> self,
  ) {
    return _std_VecRotatedRect_clear(
      self,
    );
  }

  late final _std_VecRotatedRect_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRotatedRect>)>>('std_VecRotatedRect_clear');
  late final _std_VecRotatedRect_clear =
      _std_VecRotatedRect_clearPtr.asFunction<void Function(ffi.Pointer<VecRotatedRect>)>();

  ffi.Pointer<RotatedRect> std_VecRotatedRect_data(
    ffi.Pointer<VecRotatedRect> self,
  ) {
    return _std_VecRotatedRect_data(
      self,
    );
  }

  late final _std_VecRotatedRect_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RotatedRect> Function(ffi.Pointer<VecRotatedRect>)>>(
          'std_VecRotatedRect_data');
  late final _std_VecRotatedRect_data = _std_VecRotatedRect_dataPtr
      .asFunction<ffi.Pointer<RotatedRect> Function(ffi.Pointer<VecRotatedRect>)>();

  void std_VecRotatedRect_extend(
    ffi.Pointer<VecRotatedRect> self,
    ffi.Pointer<VecRotatedRect> other,
  ) {
    return _std_VecRotatedRect_extend(
      self,
      other,
    );
  }

  late final _std_VecRotatedRect_extendPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRotatedRect>, ffi.Pointer<VecRotatedRect>)>>(
      'std_VecRotatedRect_extend');
  late final _std_VecRotatedRect_extend = _std_VecRotatedRect_extendPtr
      .asFunction<void Function(ffi.Pointer<VecRotatedRect>, ffi.Pointer<VecRotatedRect>)>();

  void std_VecRotatedRect_free(
    imp1.VecRotatedRectPtr self,
  ) {
    return _std_VecRotatedRect_free(
      self,
    );
  }

  late final _std_VecRotatedRect_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecRotatedRectPtr)>>('std_VecRotatedRect_free');
  late final _std_VecRotatedRect_free =
      _std_VecRotatedRect_freePtr.asFunction<void Function(imp1.VecRotatedRectPtr)>();

  RotatedRect std_VecRotatedRect_get(
    ffi.Pointer<VecRotatedRect> self,
    int index,
  ) {
    return _std_VecRotatedRect_get(
      self,
      index,
    );
  }

  late final _std_VecRotatedRect_getPtr =
      _lookup<ffi.NativeFunction<RotatedRect Function(ffi.Pointer<VecRotatedRect>, ffi.Size)>>(
          'std_VecRotatedRect_get');
  late final _std_VecRotatedRect_get =
      _std_VecRotatedRect_getPtr.asFunction<RotatedRect Function(ffi.Pointer<VecRotatedRect>, int)>();

  ffi.Pointer<RotatedRect> std_VecRotatedRect_get_p(
    ffi.Pointer<VecRotatedRect> self,
    int index,
  ) {
    return _std_VecRotatedRect_get_p(
      self,
      index,
    );
  }

  late final _std_VecRotatedRect_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RotatedRect> Function(ffi.Pointer<VecRotatedRect>, ffi.Int)>>(
          'std_VecRotatedRect_get_p');
  late final _std_VecRotatedRect_get_p = _std_VecRotatedRect_get_pPtr
      .asFunction<ffi.Pointer<RotatedRect> Function(ffi.Pointer<VecRotatedRect>, int)>();

  int std_VecRotatedRect_length(
    ffi.Pointer<VecRotatedRect> self,
  ) {
    return _std_VecRotatedRect_length(
      self,
    );
  }

  late final _std_VecRotatedRect_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecRotatedRect>)>>(
          'std_VecRotatedRect_length');
  late final _std_VecRotatedRect_length =
      _std_VecRotatedRect_lengthPtr.asFunction<int Function(ffi.Pointer<VecRotatedRect>)>();

  ffi.Pointer<VecRotatedRect> std_VecRotatedRect_new(
    int length,
  ) {
    return _std_VecRotatedRect_new(
      length,
    );
  }

  late final _std_VecRotatedRect_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRotatedRect> Function(ffi.Size)>>('std_VecRotatedRect_new');
  late final _std_VecRotatedRect_new =
      _std_VecRotatedRect_newPtr.asFunction<ffi.Pointer<VecRotatedRect> Function(int)>();

  ffi.Pointer<VecRotatedRect> std_VecRotatedRect_new_1(
    int length,
    RotatedRect val,
  ) {
    return _std_VecRotatedRect_new_1(
      length,
      val,
    );
  }

  late final _std_VecRotatedRect_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRotatedRect> Function(ffi.Size, RotatedRect)>>(
          'std_VecRotatedRect_new_1');
  late final _std_VecRotatedRect_new_1 =
      _std_VecRotatedRect_new_1Ptr.asFunction<ffi.Pointer<VecRotatedRect> Function(int, RotatedRect)>();

  ffi.Pointer<VecRotatedRect> std_VecRotatedRect_new_2(
    int length,
    ffi.Pointer<RotatedRect> val_ptr,
  ) {
    return _std_VecRotatedRect_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecRotatedRect_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecRotatedRect> Function(ffi.Size, ffi.Pointer<RotatedRect>)>>(
          'std_VecRotatedRect_new_2');
  late final _std_VecRotatedRect_new_2 = _std_VecRotatedRect_new_2Ptr
      .asFunction<ffi.Pointer<VecRotatedRect> Function(int, ffi.Pointer<RotatedRect>)>();

  void std_VecRotatedRect_push_back(
    ffi.Pointer<VecRotatedRect> self,
    RotatedRect val,
  ) {
    return _std_VecRotatedRect_push_back(
      self,
      val,
    );
  }

  late final _std_VecRotatedRect_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRotatedRect>, RotatedRect)>>(
          'std_VecRotatedRect_push_back');
  late final _std_VecRotatedRect_push_back =
      _std_VecRotatedRect_push_backPtr.asFunction<void Function(ffi.Pointer<VecRotatedRect>, RotatedRect)>();

  void std_VecRotatedRect_reserve(
    ffi.Pointer<VecRotatedRect> self,
    int new_len,
  ) {
    return _std_VecRotatedRect_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecRotatedRect_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRotatedRect>, ffi.Size)>>(
          'std_VecRotatedRect_reserve');
  late final _std_VecRotatedRect_reserve =
      _std_VecRotatedRect_reservePtr.asFunction<void Function(ffi.Pointer<VecRotatedRect>, int)>();

  void std_VecRotatedRect_resize(
    ffi.Pointer<VecRotatedRect> self,
    int new_len,
  ) {
    return _std_VecRotatedRect_resize(
      self,
      new_len,
    );
  }

  late final _std_VecRotatedRect_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRotatedRect>, ffi.Size)>>(
          'std_VecRotatedRect_resize');
  late final _std_VecRotatedRect_resize =
      _std_VecRotatedRect_resizePtr.asFunction<void Function(ffi.Pointer<VecRotatedRect>, int)>();

  void std_VecRotatedRect_set(
    ffi.Pointer<VecRotatedRect> self,
    int index,
    RotatedRect val,
  ) {
    return _std_VecRotatedRect_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecRotatedRect_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRotatedRect>, ffi.Size, RotatedRect)>>(
          'std_VecRotatedRect_set');
  late final _std_VecRotatedRect_set =
      _std_VecRotatedRect_setPtr.asFunction<void Function(ffi.Pointer<VecRotatedRect>, int, RotatedRect)>();

  void std_VecRotatedRect_shrink_to_fit(
    ffi.Pointer<VecRotatedRect> self,
  ) {
    return _std_VecRotatedRect_shrink_to_fit(
      self,
    );
  }

  late final _std_VecRotatedRect_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecRotatedRect>)>>(
          'std_VecRotatedRect_shrink_to_fit');
  late final _std_VecRotatedRect_shrink_to_fit =
      _std_VecRotatedRect_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecRotatedRect>)>();

  void std_VecU16_clear(
    ffi.Pointer<VecU16> self,
  ) {
    return _std_VecU16_clear(
      self,
    );
  }

  late final _std_VecU16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU16>)>>('std_VecU16_clear');
  late final _std_VecU16_clear = _std_VecU16_clearPtr.asFunction<void Function(ffi.Pointer<VecU16>)>();

  ffi.Pointer<VecU16> std_VecU16_clone(
    ffi.Pointer<VecU16> self,
  ) {
    return _std_VecU16_clone(
      self,
    );
  }

  late final _std_VecU16_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU16> Function(ffi.Pointer<VecU16>)>>('std_VecU16_clone');
  late final _std_VecU16_clone =
      _std_VecU16_clonePtr.asFunction<ffi.Pointer<VecU16> Function(ffi.Pointer<VecU16>)>();

  ffi.Pointer<ffi.Uint16> std_VecU16_data(
    ffi.Pointer<VecU16> self,
  ) {
    return _std_VecU16_data(
      self,
    );
  }

  late final _std_VecU16_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<VecU16>)>>('std_VecU16_data');
  late final _std_VecU16_data =
      _std_VecU16_dataPtr.asFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<VecU16>)>();

  void std_VecU16_extend(
    ffi.Pointer<VecU16> self,
    ffi.Pointer<VecU16> other,
  ) {
    return _std_VecU16_extend(
      self,
      other,
    );
  }

  late final _std_VecU16_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Pointer<VecU16>)>>(
          'std_VecU16_extend');
  late final _std_VecU16_extend =
      _std_VecU16_extendPtr.asFunction<void Function(ffi.Pointer<VecU16>, ffi.Pointer<VecU16>)>();

  void std_VecU16_free(
    imp1.VecU16Ptr self,
  ) {
    return _std_VecU16_free(
      self,
    );
  }

  late final _std_VecU16_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecU16Ptr)>>('std_VecU16_free');
  late final _std_VecU16_free = _std_VecU16_freePtr.asFunction<void Function(imp1.VecU16Ptr)>();

  int std_VecU16_get(
    ffi.Pointer<VecU16> self,
    int index,
  ) {
    return _std_VecU16_get(
      self,
      index,
    );
  }

  late final _std_VecU16_getPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<VecU16>, ffi.Size)>>('std_VecU16_get');
  late final _std_VecU16_get = _std_VecU16_getPtr.asFunction<int Function(ffi.Pointer<VecU16>, int)>();

  int std_VecU16_length(
    ffi.Pointer<VecU16> self,
  ) {
    return _std_VecU16_length(
      self,
    );
  }

  late final _std_VecU16_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecU16>)>>('std_VecU16_length');
  late final _std_VecU16_length = _std_VecU16_lengthPtr.asFunction<int Function(ffi.Pointer<VecU16>)>();

  ffi.Pointer<VecU16> std_VecU16_new(
    int length,
  ) {
    return _std_VecU16_new(
      length,
    );
  }

  late final _std_VecU16_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU16> Function(ffi.Size)>>('std_VecU16_new');
  late final _std_VecU16_new = _std_VecU16_newPtr.asFunction<ffi.Pointer<VecU16> Function(int)>();

  ffi.Pointer<VecU16> std_VecU16_new_1(
    int length,
    int val,
  ) {
    return _std_VecU16_new_1(
      length,
      val,
    );
  }

  late final _std_VecU16_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU16> Function(ffi.Size, ffi.Uint16)>>('std_VecU16_new_1');
  late final _std_VecU16_new_1 = _std_VecU16_new_1Ptr.asFunction<ffi.Pointer<VecU16> Function(int, int)>();

  ffi.Pointer<VecU16> std_VecU16_new_2(
    int length,
    ffi.Pointer<ffi.Uint16> val_ptr,
  ) {
    return _std_VecU16_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecU16_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU16> Function(ffi.Size, ffi.Pointer<ffi.Uint16>)>>(
          'std_VecU16_new_2');
  late final _std_VecU16_new_2 =
      _std_VecU16_new_2Ptr.asFunction<ffi.Pointer<VecU16> Function(int, ffi.Pointer<ffi.Uint16>)>();

  void std_VecU16_push_back(
    ffi.Pointer<VecU16> self,
    int val,
  ) {
    return _std_VecU16_push_back(
      self,
      val,
    );
  }

  late final _std_VecU16_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Uint16)>>('std_VecU16_push_back');
  late final _std_VecU16_push_back =
      _std_VecU16_push_backPtr.asFunction<void Function(ffi.Pointer<VecU16>, int)>();

  void std_VecU16_reserve(
    ffi.Pointer<VecU16> self,
    int new_len,
  ) {
    return _std_VecU16_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecU16_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Size)>>('std_VecU16_reserve');
  late final _std_VecU16_reserve =
      _std_VecU16_reservePtr.asFunction<void Function(ffi.Pointer<VecU16>, int)>();

  void std_VecU16_resize(
    ffi.Pointer<VecU16> self,
    int new_len,
  ) {
    return _std_VecU16_resize(
      self,
      new_len,
    );
  }

  late final _std_VecU16_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Size)>>('std_VecU16_resize');
  late final _std_VecU16_resize = _std_VecU16_resizePtr.asFunction<void Function(ffi.Pointer<VecU16>, int)>();

  void std_VecU16_set(
    ffi.Pointer<VecU16> self,
    int index,
    int val,
  ) {
    return _std_VecU16_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecU16_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU16>, ffi.Size, ffi.Uint16)>>(
          'std_VecU16_set');
  late final _std_VecU16_set = _std_VecU16_setPtr.asFunction<void Function(ffi.Pointer<VecU16>, int, int)>();

  void std_VecU16_shrink_to_fit(
    ffi.Pointer<VecU16> self,
  ) {
    return _std_VecU16_shrink_to_fit(
      self,
    );
  }

  late final _std_VecU16_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU16>)>>('std_VecU16_shrink_to_fit');
  late final _std_VecU16_shrink_to_fit =
      _std_VecU16_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecU16>)>();

  void std_VecU32_clear(
    ffi.Pointer<VecU32> self,
  ) {
    return _std_VecU32_clear(
      self,
    );
  }

  late final _std_VecU32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU32>)>>('std_VecU32_clear');
  late final _std_VecU32_clear = _std_VecU32_clearPtr.asFunction<void Function(ffi.Pointer<VecU32>)>();

  ffi.Pointer<VecU32> std_VecU32_clone(
    ffi.Pointer<VecU32> self,
  ) {
    return _std_VecU32_clone(
      self,
    );
  }

  late final _std_VecU32_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU32> Function(ffi.Pointer<VecU32>)>>('std_VecU32_clone');
  late final _std_VecU32_clone =
      _std_VecU32_clonePtr.asFunction<ffi.Pointer<VecU32> Function(ffi.Pointer<VecU32>)>();

  ffi.Pointer<ffi.Uint32> std_VecU32_data(
    ffi.Pointer<VecU32> self,
  ) {
    return _std_VecU32_data(
      self,
    );
  }

  late final _std_VecU32_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<VecU32>)>>('std_VecU32_data');
  late final _std_VecU32_data =
      _std_VecU32_dataPtr.asFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<VecU32>)>();

  void std_VecU32_extend(
    ffi.Pointer<VecU32> self,
    ffi.Pointer<VecU32> other,
  ) {
    return _std_VecU32_extend(
      self,
      other,
    );
  }

  late final _std_VecU32_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Pointer<VecU32>)>>(
          'std_VecU32_extend');
  late final _std_VecU32_extend =
      _std_VecU32_extendPtr.asFunction<void Function(ffi.Pointer<VecU32>, ffi.Pointer<VecU32>)>();

  void std_VecU32_free(
    imp1.VecU32Ptr self,
  ) {
    return _std_VecU32_free(
      self,
    );
  }

  late final _std_VecU32_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecU32Ptr)>>('std_VecU32_free');
  late final _std_VecU32_free = _std_VecU32_freePtr.asFunction<void Function(imp1.VecU32Ptr)>();

  int std_VecU32_get(
    ffi.Pointer<VecU32> self,
    int index,
  ) {
    return _std_VecU32_get(
      self,
      index,
    );
  }

  late final _std_VecU32_getPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<VecU32>, ffi.Size)>>('std_VecU32_get');
  late final _std_VecU32_get = _std_VecU32_getPtr.asFunction<int Function(ffi.Pointer<VecU32>, int)>();

  int std_VecU32_length(
    ffi.Pointer<VecU32> self,
  ) {
    return _std_VecU32_length(
      self,
    );
  }

  late final _std_VecU32_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecU32>)>>('std_VecU32_length');
  late final _std_VecU32_length = _std_VecU32_lengthPtr.asFunction<int Function(ffi.Pointer<VecU32>)>();

  ffi.Pointer<VecU32> std_VecU32_new(
    int length,
  ) {
    return _std_VecU32_new(
      length,
    );
  }

  late final _std_VecU32_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU32> Function(ffi.Size)>>('std_VecU32_new');
  late final _std_VecU32_new = _std_VecU32_newPtr.asFunction<ffi.Pointer<VecU32> Function(int)>();

  ffi.Pointer<VecU32> std_VecU32_new_1(
    int length,
    int val,
  ) {
    return _std_VecU32_new_1(
      length,
      val,
    );
  }

  late final _std_VecU32_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU32> Function(ffi.Size, ffi.Uint32)>>('std_VecU32_new_1');
  late final _std_VecU32_new_1 = _std_VecU32_new_1Ptr.asFunction<ffi.Pointer<VecU32> Function(int, int)>();

  ffi.Pointer<VecU32> std_VecU32_new_2(
    int length,
    ffi.Pointer<ffi.Uint32> val_ptr,
  ) {
    return _std_VecU32_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecU32_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU32> Function(ffi.Size, ffi.Pointer<ffi.Uint32>)>>(
          'std_VecU32_new_2');
  late final _std_VecU32_new_2 =
      _std_VecU32_new_2Ptr.asFunction<ffi.Pointer<VecU32> Function(int, ffi.Pointer<ffi.Uint32>)>();

  void std_VecU32_push_back(
    ffi.Pointer<VecU32> self,
    int val,
  ) {
    return _std_VecU32_push_back(
      self,
      val,
    );
  }

  late final _std_VecU32_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Uint32)>>('std_VecU32_push_back');
  late final _std_VecU32_push_back =
      _std_VecU32_push_backPtr.asFunction<void Function(ffi.Pointer<VecU32>, int)>();

  void std_VecU32_reserve(
    ffi.Pointer<VecU32> self,
    int new_len,
  ) {
    return _std_VecU32_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecU32_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Size)>>('std_VecU32_reserve');
  late final _std_VecU32_reserve =
      _std_VecU32_reservePtr.asFunction<void Function(ffi.Pointer<VecU32>, int)>();

  void std_VecU32_resize(
    ffi.Pointer<VecU32> self,
    int new_len,
  ) {
    return _std_VecU32_resize(
      self,
      new_len,
    );
  }

  late final _std_VecU32_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Size)>>('std_VecU32_resize');
  late final _std_VecU32_resize = _std_VecU32_resizePtr.asFunction<void Function(ffi.Pointer<VecU32>, int)>();

  void std_VecU32_set(
    ffi.Pointer<VecU32> self,
    int index,
    int val,
  ) {
    return _std_VecU32_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecU32_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU32>, ffi.Size, ffi.Uint32)>>(
          'std_VecU32_set');
  late final _std_VecU32_set = _std_VecU32_setPtr.asFunction<void Function(ffi.Pointer<VecU32>, int, int)>();

  void std_VecU32_shrink_to_fit(
    ffi.Pointer<VecU32> self,
  ) {
    return _std_VecU32_shrink_to_fit(
      self,
    );
  }

  late final _std_VecU32_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU32>)>>('std_VecU32_shrink_to_fit');
  late final _std_VecU32_shrink_to_fit =
      _std_VecU32_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecU32>)>();

  void std_VecU64_clear(
    ffi.Pointer<VecU64> self,
  ) {
    return _std_VecU64_clear(
      self,
    );
  }

  late final _std_VecU64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU64>)>>('std_VecU64_clear');
  late final _std_VecU64_clear = _std_VecU64_clearPtr.asFunction<void Function(ffi.Pointer<VecU64>)>();

  ffi.Pointer<VecU64> std_VecU64_clone(
    ffi.Pointer<VecU64> self,
  ) {
    return _std_VecU64_clone(
      self,
    );
  }

  late final _std_VecU64_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU64> Function(ffi.Pointer<VecU64>)>>('std_VecU64_clone');
  late final _std_VecU64_clone =
      _std_VecU64_clonePtr.asFunction<ffi.Pointer<VecU64> Function(ffi.Pointer<VecU64>)>();

  ffi.Pointer<ffi.Uint64> std_VecU64_data(
    ffi.Pointer<VecU64> self,
  ) {
    return _std_VecU64_data(
      self,
    );
  }

  late final _std_VecU64_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<VecU64>)>>('std_VecU64_data');
  late final _std_VecU64_data =
      _std_VecU64_dataPtr.asFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<VecU64>)>();

  void std_VecU64_extend(
    ffi.Pointer<VecU64> self,
    ffi.Pointer<VecU64> other,
  ) {
    return _std_VecU64_extend(
      self,
      other,
    );
  }

  late final _std_VecU64_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Pointer<VecU64>)>>(
          'std_VecU64_extend');
  late final _std_VecU64_extend =
      _std_VecU64_extendPtr.asFunction<void Function(ffi.Pointer<VecU64>, ffi.Pointer<VecU64>)>();

  void std_VecU64_free(
    imp1.VecU64Ptr self,
  ) {
    return _std_VecU64_free(
      self,
    );
  }

  late final _std_VecU64_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecU64Ptr)>>('std_VecU64_free');
  late final _std_VecU64_free = _std_VecU64_freePtr.asFunction<void Function(imp1.VecU64Ptr)>();

  int std_VecU64_get(
    ffi.Pointer<VecU64> self,
    int index,
  ) {
    return _std_VecU64_get(
      self,
      index,
    );
  }

  late final _std_VecU64_getPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<VecU64>, ffi.Size)>>('std_VecU64_get');
  late final _std_VecU64_get = _std_VecU64_getPtr.asFunction<int Function(ffi.Pointer<VecU64>, int)>();

  int std_VecU64_length(
    ffi.Pointer<VecU64> self,
  ) {
    return _std_VecU64_length(
      self,
    );
  }

  late final _std_VecU64_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecU64>)>>('std_VecU64_length');
  late final _std_VecU64_length = _std_VecU64_lengthPtr.asFunction<int Function(ffi.Pointer<VecU64>)>();

  ffi.Pointer<VecU64> std_VecU64_new(
    int length,
  ) {
    return _std_VecU64_new(
      length,
    );
  }

  late final _std_VecU64_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU64> Function(ffi.Size)>>('std_VecU64_new');
  late final _std_VecU64_new = _std_VecU64_newPtr.asFunction<ffi.Pointer<VecU64> Function(int)>();

  ffi.Pointer<VecU64> std_VecU64_new_1(
    int length,
    int val,
  ) {
    return _std_VecU64_new_1(
      length,
      val,
    );
  }

  late final _std_VecU64_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU64> Function(ffi.Size, ffi.Uint64)>>('std_VecU64_new_1');
  late final _std_VecU64_new_1 = _std_VecU64_new_1Ptr.asFunction<ffi.Pointer<VecU64> Function(int, int)>();

  ffi.Pointer<VecU64> std_VecU64_new_2(
    int length,
    ffi.Pointer<ffi.Uint64> val_ptr,
  ) {
    return _std_VecU64_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecU64_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU64> Function(ffi.Size, ffi.Pointer<ffi.Uint64>)>>(
          'std_VecU64_new_2');
  late final _std_VecU64_new_2 =
      _std_VecU64_new_2Ptr.asFunction<ffi.Pointer<VecU64> Function(int, ffi.Pointer<ffi.Uint64>)>();

  void std_VecU64_push_back(
    ffi.Pointer<VecU64> self,
    int val,
  ) {
    return _std_VecU64_push_back(
      self,
      val,
    );
  }

  late final _std_VecU64_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Uint64)>>('std_VecU64_push_back');
  late final _std_VecU64_push_back =
      _std_VecU64_push_backPtr.asFunction<void Function(ffi.Pointer<VecU64>, int)>();

  void std_VecU64_reserve(
    ffi.Pointer<VecU64> self,
    int new_len,
  ) {
    return _std_VecU64_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecU64_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Size)>>('std_VecU64_reserve');
  late final _std_VecU64_reserve =
      _std_VecU64_reservePtr.asFunction<void Function(ffi.Pointer<VecU64>, int)>();

  void std_VecU64_resize(
    ffi.Pointer<VecU64> self,
    int new_len,
  ) {
    return _std_VecU64_resize(
      self,
      new_len,
    );
  }

  late final _std_VecU64_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Size)>>('std_VecU64_resize');
  late final _std_VecU64_resize = _std_VecU64_resizePtr.asFunction<void Function(ffi.Pointer<VecU64>, int)>();

  void std_VecU64_set(
    ffi.Pointer<VecU64> self,
    int index,
    int val,
  ) {
    return _std_VecU64_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecU64_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU64>, ffi.Size, ffi.Uint64)>>(
          'std_VecU64_set');
  late final _std_VecU64_set = _std_VecU64_setPtr.asFunction<void Function(ffi.Pointer<VecU64>, int, int)>();

  void std_VecU64_shrink_to_fit(
    ffi.Pointer<VecU64> self,
  ) {
    return _std_VecU64_shrink_to_fit(
      self,
    );
  }

  late final _std_VecU64_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU64>)>>('std_VecU64_shrink_to_fit');
  late final _std_VecU64_shrink_to_fit =
      _std_VecU64_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecU64>)>();

  void std_VecU8_clear(
    ffi.Pointer<VecU8> self,
  ) {
    return _std_VecU8_clear(
      self,
    );
  }

  late final _std_VecU8_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU8>)>>('std_VecU8_clear');
  late final _std_VecU8_clear = _std_VecU8_clearPtr.asFunction<void Function(ffi.Pointer<VecU8>)>();

  ffi.Pointer<VecU8> std_VecU8_clone(
    ffi.Pointer<VecU8> self,
  ) {
    return _std_VecU8_clone(
      self,
    );
  }

  late final _std_VecU8_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU8> Function(ffi.Pointer<VecU8>)>>('std_VecU8_clone');
  late final _std_VecU8_clone =
      _std_VecU8_clonePtr.asFunction<ffi.Pointer<VecU8> Function(ffi.Pointer<VecU8>)>();

  ffi.Pointer<ffi.Uint8> std_VecU8_data(
    ffi.Pointer<VecU8> self,
  ) {
    return _std_VecU8_data(
      self,
    );
  }

  late final _std_VecU8_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<VecU8>)>>('std_VecU8_data');
  late final _std_VecU8_data =
      _std_VecU8_dataPtr.asFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<VecU8>)>();

  void std_VecU8_extend(
    ffi.Pointer<VecU8> self,
    ffi.Pointer<VecU8> other,
  ) {
    return _std_VecU8_extend(
      self,
      other,
    );
  }

  late final _std_VecU8_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Pointer<VecU8>)>>(
          'std_VecU8_extend');
  late final _std_VecU8_extend =
      _std_VecU8_extendPtr.asFunction<void Function(ffi.Pointer<VecU8>, ffi.Pointer<VecU8>)>();

  void std_VecU8_free(
    imp1.VecU8Ptr self,
  ) {
    return _std_VecU8_free(
      self,
    );
  }

  late final _std_VecU8_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecU8Ptr)>>('std_VecU8_free');
  late final _std_VecU8_free = _std_VecU8_freePtr.asFunction<void Function(imp1.VecU8Ptr)>();

  int std_VecU8_get(
    ffi.Pointer<VecU8> self,
    int index,
  ) {
    return _std_VecU8_get(
      self,
      index,
    );
  }

  late final _std_VecU8_getPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<VecU8>, ffi.Size)>>('std_VecU8_get');
  late final _std_VecU8_get = _std_VecU8_getPtr.asFunction<int Function(ffi.Pointer<VecU8>, int)>();

  int std_VecU8_length(
    ffi.Pointer<VecU8> self,
  ) {
    return _std_VecU8_length(
      self,
    );
  }

  late final _std_VecU8_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecU8>)>>('std_VecU8_length');
  late final _std_VecU8_length = _std_VecU8_lengthPtr.asFunction<int Function(ffi.Pointer<VecU8>)>();

  ffi.Pointer<VecU8> std_VecU8_new(
    int length,
  ) {
    return _std_VecU8_new(
      length,
    );
  }

  late final _std_VecU8_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU8> Function(ffi.Size)>>('std_VecU8_new');
  late final _std_VecU8_new = _std_VecU8_newPtr.asFunction<ffi.Pointer<VecU8> Function(int)>();

  ffi.Pointer<VecU8> std_VecU8_new_1(
    int length,
    int val,
  ) {
    return _std_VecU8_new_1(
      length,
      val,
    );
  }

  late final _std_VecU8_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU8> Function(ffi.Size, ffi.Uint8)>>('std_VecU8_new_1');
  late final _std_VecU8_new_1 = _std_VecU8_new_1Ptr.asFunction<ffi.Pointer<VecU8> Function(int, int)>();

  ffi.Pointer<VecU8> std_VecU8_new_2(
    int length,
    ffi.Pointer<ffi.Uint8> val_ptr,
  ) {
    return _std_VecU8_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecU8_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecU8> Function(ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
          'std_VecU8_new_2');
  late final _std_VecU8_new_2 =
      _std_VecU8_new_2Ptr.asFunction<ffi.Pointer<VecU8> Function(int, ffi.Pointer<ffi.Uint8>)>();

  void std_VecU8_push_back(
    ffi.Pointer<VecU8> self,
    int val,
  ) {
    return _std_VecU8_push_back(
      self,
      val,
    );
  }

  late final _std_VecU8_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Uint8)>>('std_VecU8_push_back');
  late final _std_VecU8_push_back =
      _std_VecU8_push_backPtr.asFunction<void Function(ffi.Pointer<VecU8>, int)>();

  void std_VecU8_reserve(
    ffi.Pointer<VecU8> self,
    int new_len,
  ) {
    return _std_VecU8_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecU8_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Size)>>('std_VecU8_reserve');
  late final _std_VecU8_reserve = _std_VecU8_reservePtr.asFunction<void Function(ffi.Pointer<VecU8>, int)>();

  void std_VecU8_resize(
    ffi.Pointer<VecU8> self,
    int new_len,
  ) {
    return _std_VecU8_resize(
      self,
      new_len,
    );
  }

  late final _std_VecU8_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Size)>>('std_VecU8_resize');
  late final _std_VecU8_resize = _std_VecU8_resizePtr.asFunction<void Function(ffi.Pointer<VecU8>, int)>();

  void std_VecU8_set(
    ffi.Pointer<VecU8> self,
    int index,
    int val,
  ) {
    return _std_VecU8_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecU8_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU8>, ffi.Size, ffi.Uint8)>>(
          'std_VecU8_set');
  late final _std_VecU8_set = _std_VecU8_setPtr.asFunction<void Function(ffi.Pointer<VecU8>, int, int)>();

  void std_VecU8_shrink_to_fit(
    ffi.Pointer<VecU8> self,
  ) {
    return _std_VecU8_shrink_to_fit(
      self,
    );
  }

  late final _std_VecU8_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecU8>)>>('std_VecU8_shrink_to_fit');
  late final _std_VecU8_shrink_to_fit =
      _std_VecU8_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecU8>)>();

  void std_VecUChar_clear(
    ffi.Pointer<VecUChar> self,
  ) {
    return _std_VecUChar_clear(
      self,
    );
  }

  late final _std_VecUChar_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecUChar>)>>('std_VecUChar_clear');
  late final _std_VecUChar_clear = _std_VecUChar_clearPtr.asFunction<void Function(ffi.Pointer<VecUChar>)>();

  ffi.Pointer<VecUChar> std_VecUChar_clone(
    ffi.Pointer<VecUChar> self,
  ) {
    return _std_VecUChar_clone(
      self,
    );
  }

  late final _std_VecUChar_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecUChar> Function(ffi.Pointer<VecUChar>)>>(
          'std_VecUChar_clone');
  late final _std_VecUChar_clone =
      _std_VecUChar_clonePtr.asFunction<ffi.Pointer<VecUChar> Function(ffi.Pointer<VecUChar>)>();

  ffi.Pointer<ffi.UnsignedChar> std_VecUChar_data(
    ffi.Pointer<VecUChar> self,
  ) {
    return _std_VecUChar_data(
      self,
    );
  }

  late final _std_VecUChar_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<VecUChar>)>>(
          'std_VecUChar_data');
  late final _std_VecUChar_data =
      _std_VecUChar_dataPtr.asFunction<ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<VecUChar>)>();

  void std_VecUChar_extend(
    ffi.Pointer<VecUChar> self,
    ffi.Pointer<VecUChar> other,
  ) {
    return _std_VecUChar_extend(
      self,
      other,
    );
  }

  late final _std_VecUChar_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.Pointer<VecUChar>)>>(
          'std_VecUChar_extend');
  late final _std_VecUChar_extend =
      _std_VecUChar_extendPtr.asFunction<void Function(ffi.Pointer<VecUChar>, ffi.Pointer<VecUChar>)>();

  void std_VecUChar_free(
    imp1.VecUCharPtr self,
  ) {
    return _std_VecUChar_free(
      self,
    );
  }

  late final _std_VecUChar_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecUCharPtr)>>('std_VecUChar_free');
  late final _std_VecUChar_free = _std_VecUChar_freePtr.asFunction<void Function(imp1.VecUCharPtr)>();

  int std_VecUChar_get(
    ffi.Pointer<VecUChar> self,
    int index,
  ) {
    return _std_VecUChar_get(
      self,
      index,
    );
  }

  late final _std_VecUChar_getPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedChar Function(ffi.Pointer<VecUChar>, ffi.Size)>>(
          'std_VecUChar_get');
  late final _std_VecUChar_get = _std_VecUChar_getPtr.asFunction<int Function(ffi.Pointer<VecUChar>, int)>();

  int std_VecUChar_length(
    ffi.Pointer<VecUChar> self,
  ) {
    return _std_VecUChar_length(
      self,
    );
  }

  late final _std_VecUChar_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecUChar>)>>('std_VecUChar_length');
  late final _std_VecUChar_length = _std_VecUChar_lengthPtr.asFunction<int Function(ffi.Pointer<VecUChar>)>();

  ffi.Pointer<VecUChar> std_VecUChar_new(
    int length,
  ) {
    return _std_VecUChar_new(
      length,
    );
  }

  late final _std_VecUChar_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecUChar> Function(ffi.Size)>>('std_VecUChar_new');
  late final _std_VecUChar_new = _std_VecUChar_newPtr.asFunction<ffi.Pointer<VecUChar> Function(int)>();

  ffi.Pointer<VecUChar> std_VecUChar_new_1(
    int length,
    int val,
  ) {
    return _std_VecUChar_new_1(
      length,
      val,
    );
  }

  late final _std_VecUChar_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecUChar> Function(ffi.Size, ffi.UnsignedChar)>>(
          'std_VecUChar_new_1');
  late final _std_VecUChar_new_1 =
      _std_VecUChar_new_1Ptr.asFunction<ffi.Pointer<VecUChar> Function(int, int)>();

  ffi.Pointer<VecUChar> std_VecUChar_new_2(
    int length,
    ffi.Pointer<ffi.UnsignedChar> val_ptr,
  ) {
    return _std_VecUChar_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecUChar_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecUChar> Function(ffi.Size, ffi.Pointer<ffi.UnsignedChar>)>>(
          'std_VecUChar_new_2');
  late final _std_VecUChar_new_2 =
      _std_VecUChar_new_2Ptr.asFunction<ffi.Pointer<VecUChar> Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  void std_VecUChar_push_back(
    ffi.Pointer<VecUChar> self,
    int val,
  ) {
    return _std_VecUChar_push_back(
      self,
      val,
    );
  }

  late final _std_VecUChar_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.UnsignedChar)>>(
          'std_VecUChar_push_back');
  late final _std_VecUChar_push_back =
      _std_VecUChar_push_backPtr.asFunction<void Function(ffi.Pointer<VecUChar>, int)>();

  void std_VecUChar_reserve(
    ffi.Pointer<VecUChar> self,
    int new_len,
  ) {
    return _std_VecUChar_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecUChar_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.Size)>>('std_VecUChar_reserve');
  late final _std_VecUChar_reserve =
      _std_VecUChar_reservePtr.asFunction<void Function(ffi.Pointer<VecUChar>, int)>();

  void std_VecUChar_resize(
    ffi.Pointer<VecUChar> self,
    int new_len,
  ) {
    return _std_VecUChar_resize(
      self,
      new_len,
    );
  }

  late final _std_VecUChar_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.Size)>>('std_VecUChar_resize');
  late final _std_VecUChar_resize =
      _std_VecUChar_resizePtr.asFunction<void Function(ffi.Pointer<VecUChar>, int)>();

  void std_VecUChar_set(
    ffi.Pointer<VecUChar> self,
    int index,
    int val,
  ) {
    return _std_VecUChar_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecUChar_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecUChar>, ffi.Size, ffi.UnsignedChar)>>(
          'std_VecUChar_set');
  late final _std_VecUChar_set =
      _std_VecUChar_setPtr.asFunction<void Function(ffi.Pointer<VecUChar>, int, int)>();

  void std_VecUChar_shrink_to_fit(
    ffi.Pointer<VecUChar> self,
  ) {
    return _std_VecUChar_shrink_to_fit(
      self,
    );
  }

  late final _std_VecUChar_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecUChar>)>>('std_VecUChar_shrink_to_fit');
  late final _std_VecUChar_shrink_to_fit =
      _std_VecUChar_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecUChar>)>();

  void std_VecVec4f_clear(
    ffi.Pointer<VecVec4f> self,
  ) {
    return _std_VecVec4f_clear(
      self,
    );
  }

  late final _std_VecVec4f_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4f>)>>('std_VecVec4f_clear');
  late final _std_VecVec4f_clear = _std_VecVec4f_clearPtr.asFunction<void Function(ffi.Pointer<VecVec4f>)>();

  ffi.Pointer<Vec4f> std_VecVec4f_data(
    ffi.Pointer<VecVec4f> self,
  ) {
    return _std_VecVec4f_data(
      self,
    );
  }

  late final _std_VecVec4f_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4f> Function(ffi.Pointer<VecVec4f>)>>('std_VecVec4f_data');
  late final _std_VecVec4f_data =
      _std_VecVec4f_dataPtr.asFunction<ffi.Pointer<Vec4f> Function(ffi.Pointer<VecVec4f>)>();

  void std_VecVec4f_extend(
    ffi.Pointer<VecVec4f> self,
    ffi.Pointer<VecVec4f> other,
  ) {
    return _std_VecVec4f_extend(
      self,
      other,
    );
  }

  late final _std_VecVec4f_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4f>, ffi.Pointer<VecVec4f>)>>(
          'std_VecVec4f_extend');
  late final _std_VecVec4f_extend =
      _std_VecVec4f_extendPtr.asFunction<void Function(ffi.Pointer<VecVec4f>, ffi.Pointer<VecVec4f>)>();

  void std_VecVec4f_free(
    imp1.VecVec4fPtr self,
  ) {
    return _std_VecVec4f_free(
      self,
    );
  }

  late final _std_VecVec4f_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecVec4fPtr)>>('std_VecVec4f_free');
  late final _std_VecVec4f_free = _std_VecVec4f_freePtr.asFunction<void Function(imp1.VecVec4fPtr)>();

  Vec4f std_VecVec4f_get(
    ffi.Pointer<VecVec4f> self,
    int index,
  ) {
    return _std_VecVec4f_get(
      self,
      index,
    );
  }

  late final _std_VecVec4f_getPtr =
      _lookup<ffi.NativeFunction<Vec4f Function(ffi.Pointer<VecVec4f>, ffi.Size)>>('std_VecVec4f_get');
  late final _std_VecVec4f_get =
      _std_VecVec4f_getPtr.asFunction<Vec4f Function(ffi.Pointer<VecVec4f>, int)>();

  ffi.Pointer<Vec4f> std_VecVec4f_get_p(
    ffi.Pointer<VecVec4f> self,
    int index,
  ) {
    return _std_VecVec4f_get_p(
      self,
      index,
    );
  }

  late final _std_VecVec4f_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4f> Function(ffi.Pointer<VecVec4f>, ffi.Int)>>(
          'std_VecVec4f_get_p');
  late final _std_VecVec4f_get_p =
      _std_VecVec4f_get_pPtr.asFunction<ffi.Pointer<Vec4f> Function(ffi.Pointer<VecVec4f>, int)>();

  int std_VecVec4f_length(
    ffi.Pointer<VecVec4f> self,
  ) {
    return _std_VecVec4f_length(
      self,
    );
  }

  late final _std_VecVec4f_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVec4f>)>>('std_VecVec4f_length');
  late final _std_VecVec4f_length = _std_VecVec4f_lengthPtr.asFunction<int Function(ffi.Pointer<VecVec4f>)>();

  ffi.Pointer<VecVec4f> std_VecVec4f_new(
    int length,
  ) {
    return _std_VecVec4f_new(
      length,
    );
  }

  late final _std_VecVec4f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec4f> Function(ffi.Size)>>('std_VecVec4f_new');
  late final _std_VecVec4f_new = _std_VecVec4f_newPtr.asFunction<ffi.Pointer<VecVec4f> Function(int)>();

  ffi.Pointer<VecVec4f> std_VecVec4f_new_1(
    int length,
    Vec4f val,
  ) {
    return _std_VecVec4f_new_1(
      length,
      val,
    );
  }

  late final _std_VecVec4f_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec4f> Function(ffi.Size, Vec4f)>>('std_VecVec4f_new_1');
  late final _std_VecVec4f_new_1 =
      _std_VecVec4f_new_1Ptr.asFunction<ffi.Pointer<VecVec4f> Function(int, Vec4f)>();

  ffi.Pointer<VecVec4f> std_VecVec4f_new_2(
    int length,
    ffi.Pointer<Vec4f> val_ptr,
  ) {
    return _std_VecVec4f_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecVec4f_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec4f> Function(ffi.Size, ffi.Pointer<Vec4f>)>>(
          'std_VecVec4f_new_2');
  late final _std_VecVec4f_new_2 =
      _std_VecVec4f_new_2Ptr.asFunction<ffi.Pointer<VecVec4f> Function(int, ffi.Pointer<Vec4f>)>();

  void std_VecVec4f_push_back(
    ffi.Pointer<VecVec4f> self,
    Vec4f val,
  ) {
    return _std_VecVec4f_push_back(
      self,
      val,
    );
  }

  late final _std_VecVec4f_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4f>, Vec4f)>>('std_VecVec4f_push_back');
  late final _std_VecVec4f_push_back =
      _std_VecVec4f_push_backPtr.asFunction<void Function(ffi.Pointer<VecVec4f>, Vec4f)>();

  void std_VecVec4f_reserve(
    ffi.Pointer<VecVec4f> self,
    int new_len,
  ) {
    return _std_VecVec4f_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecVec4f_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4f>, ffi.Size)>>('std_VecVec4f_reserve');
  late final _std_VecVec4f_reserve =
      _std_VecVec4f_reservePtr.asFunction<void Function(ffi.Pointer<VecVec4f>, int)>();

  void std_VecVec4f_resize(
    ffi.Pointer<VecVec4f> self,
    int new_len,
  ) {
    return _std_VecVec4f_resize(
      self,
      new_len,
    );
  }

  late final _std_VecVec4f_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4f>, ffi.Size)>>('std_VecVec4f_resize');
  late final _std_VecVec4f_resize =
      _std_VecVec4f_resizePtr.asFunction<void Function(ffi.Pointer<VecVec4f>, int)>();

  void std_VecVec4f_set(
    ffi.Pointer<VecVec4f> self,
    int index,
    Vec4f val,
  ) {
    return _std_VecVec4f_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVec4f_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4f>, ffi.Size, Vec4f)>>(
          'std_VecVec4f_set');
  late final _std_VecVec4f_set =
      _std_VecVec4f_setPtr.asFunction<void Function(ffi.Pointer<VecVec4f>, int, Vec4f)>();

  void std_VecVec4f_shrink_to_fit(
    ffi.Pointer<VecVec4f> self,
  ) {
    return _std_VecVec4f_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVec4f_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4f>)>>('std_VecVec4f_shrink_to_fit');
  late final _std_VecVec4f_shrink_to_fit =
      _std_VecVec4f_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVec4f>)>();

  void std_VecVec4i_clear(
    ffi.Pointer<VecVec4i> self,
  ) {
    return _std_VecVec4i_clear(
      self,
    );
  }

  late final _std_VecVec4i_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4i>)>>('std_VecVec4i_clear');
  late final _std_VecVec4i_clear = _std_VecVec4i_clearPtr.asFunction<void Function(ffi.Pointer<VecVec4i>)>();

  ffi.Pointer<Vec4i> std_VecVec4i_data(
    ffi.Pointer<VecVec4i> self,
  ) {
    return _std_VecVec4i_data(
      self,
    );
  }

  late final _std_VecVec4i_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4i> Function(ffi.Pointer<VecVec4i>)>>('std_VecVec4i_data');
  late final _std_VecVec4i_data =
      _std_VecVec4i_dataPtr.asFunction<ffi.Pointer<Vec4i> Function(ffi.Pointer<VecVec4i>)>();

  void std_VecVec4i_extend(
    ffi.Pointer<VecVec4i> self,
    ffi.Pointer<VecVec4i> other,
  ) {
    return _std_VecVec4i_extend(
      self,
      other,
    );
  }

  late final _std_VecVec4i_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4i>, ffi.Pointer<VecVec4i>)>>(
          'std_VecVec4i_extend');
  late final _std_VecVec4i_extend =
      _std_VecVec4i_extendPtr.asFunction<void Function(ffi.Pointer<VecVec4i>, ffi.Pointer<VecVec4i>)>();

  void std_VecVec4i_free(
    imp1.VecVec4iPtr self,
  ) {
    return _std_VecVec4i_free(
      self,
    );
  }

  late final _std_VecVec4i_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecVec4iPtr)>>('std_VecVec4i_free');
  late final _std_VecVec4i_free = _std_VecVec4i_freePtr.asFunction<void Function(imp1.VecVec4iPtr)>();

  Vec4i std_VecVec4i_get(
    ffi.Pointer<VecVec4i> self,
    int index,
  ) {
    return _std_VecVec4i_get(
      self,
      index,
    );
  }

  late final _std_VecVec4i_getPtr =
      _lookup<ffi.NativeFunction<Vec4i Function(ffi.Pointer<VecVec4i>, ffi.Size)>>('std_VecVec4i_get');
  late final _std_VecVec4i_get =
      _std_VecVec4i_getPtr.asFunction<Vec4i Function(ffi.Pointer<VecVec4i>, int)>();

  ffi.Pointer<Vec4i> std_VecVec4i_get_p(
    ffi.Pointer<VecVec4i> self,
    int index,
  ) {
    return _std_VecVec4i_get_p(
      self,
      index,
    );
  }

  late final _std_VecVec4i_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec4i> Function(ffi.Pointer<VecVec4i>, ffi.Int)>>(
          'std_VecVec4i_get_p');
  late final _std_VecVec4i_get_p =
      _std_VecVec4i_get_pPtr.asFunction<ffi.Pointer<Vec4i> Function(ffi.Pointer<VecVec4i>, int)>();

  int std_VecVec4i_length(
    ffi.Pointer<VecVec4i> self,
  ) {
    return _std_VecVec4i_length(
      self,
    );
  }

  late final _std_VecVec4i_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVec4i>)>>('std_VecVec4i_length');
  late final _std_VecVec4i_length = _std_VecVec4i_lengthPtr.asFunction<int Function(ffi.Pointer<VecVec4i>)>();

  ffi.Pointer<VecVec4i> std_VecVec4i_new(
    int length,
  ) {
    return _std_VecVec4i_new(
      length,
    );
  }

  late final _std_VecVec4i_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec4i> Function(ffi.Size)>>('std_VecVec4i_new');
  late final _std_VecVec4i_new = _std_VecVec4i_newPtr.asFunction<ffi.Pointer<VecVec4i> Function(int)>();

  ffi.Pointer<VecVec4i> std_VecVec4i_new_1(
    int length,
    Vec4i val,
  ) {
    return _std_VecVec4i_new_1(
      length,
      val,
    );
  }

  late final _std_VecVec4i_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec4i> Function(ffi.Size, Vec4i)>>('std_VecVec4i_new_1');
  late final _std_VecVec4i_new_1 =
      _std_VecVec4i_new_1Ptr.asFunction<ffi.Pointer<VecVec4i> Function(int, Vec4i)>();

  ffi.Pointer<VecVec4i> std_VecVec4i_new_2(
    int length,
    ffi.Pointer<Vec4i> val_ptr,
  ) {
    return _std_VecVec4i_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecVec4i_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec4i> Function(ffi.Size, ffi.Pointer<Vec4i>)>>(
          'std_VecVec4i_new_2');
  late final _std_VecVec4i_new_2 =
      _std_VecVec4i_new_2Ptr.asFunction<ffi.Pointer<VecVec4i> Function(int, ffi.Pointer<Vec4i>)>();

  void std_VecVec4i_push_back(
    ffi.Pointer<VecVec4i> self,
    Vec4i val,
  ) {
    return _std_VecVec4i_push_back(
      self,
      val,
    );
  }

  late final _std_VecVec4i_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4i>, Vec4i)>>('std_VecVec4i_push_back');
  late final _std_VecVec4i_push_back =
      _std_VecVec4i_push_backPtr.asFunction<void Function(ffi.Pointer<VecVec4i>, Vec4i)>();

  void std_VecVec4i_reserve(
    ffi.Pointer<VecVec4i> self,
    int new_len,
  ) {
    return _std_VecVec4i_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecVec4i_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4i>, ffi.Size)>>('std_VecVec4i_reserve');
  late final _std_VecVec4i_reserve =
      _std_VecVec4i_reservePtr.asFunction<void Function(ffi.Pointer<VecVec4i>, int)>();

  void std_VecVec4i_resize(
    ffi.Pointer<VecVec4i> self,
    int new_len,
  ) {
    return _std_VecVec4i_resize(
      self,
      new_len,
    );
  }

  late final _std_VecVec4i_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4i>, ffi.Size)>>('std_VecVec4i_resize');
  late final _std_VecVec4i_resize =
      _std_VecVec4i_resizePtr.asFunction<void Function(ffi.Pointer<VecVec4i>, int)>();

  void std_VecVec4i_set(
    ffi.Pointer<VecVec4i> self,
    int index,
    Vec4i val,
  ) {
    return _std_VecVec4i_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVec4i_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4i>, ffi.Size, Vec4i)>>(
          'std_VecVec4i_set');
  late final _std_VecVec4i_set =
      _std_VecVec4i_setPtr.asFunction<void Function(ffi.Pointer<VecVec4i>, int, Vec4i)>();

  void std_VecVec4i_shrink_to_fit(
    ffi.Pointer<VecVec4i> self,
  ) {
    return _std_VecVec4i_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVec4i_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec4i>)>>('std_VecVec4i_shrink_to_fit');
  late final _std_VecVec4i_shrink_to_fit =
      _std_VecVec4i_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVec4i>)>();

  void std_VecVec6f_clear(
    ffi.Pointer<VecVec6f> self,
  ) {
    return _std_VecVec6f_clear(
      self,
    );
  }

  late final _std_VecVec6f_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec6f>)>>('std_VecVec6f_clear');
  late final _std_VecVec6f_clear = _std_VecVec6f_clearPtr.asFunction<void Function(ffi.Pointer<VecVec6f>)>();

  ffi.Pointer<Vec6f> std_VecVec6f_data(
    ffi.Pointer<VecVec6f> self,
  ) {
    return _std_VecVec6f_data(
      self,
    );
  }

  late final _std_VecVec6f_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec6f> Function(ffi.Pointer<VecVec6f>)>>('std_VecVec6f_data');
  late final _std_VecVec6f_data =
      _std_VecVec6f_dataPtr.asFunction<ffi.Pointer<Vec6f> Function(ffi.Pointer<VecVec6f>)>();

  void std_VecVec6f_extend(
    ffi.Pointer<VecVec6f> self,
    ffi.Pointer<VecVec6f> other,
  ) {
    return _std_VecVec6f_extend(
      self,
      other,
    );
  }

  late final _std_VecVec6f_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec6f>, ffi.Pointer<VecVec6f>)>>(
          'std_VecVec6f_extend');
  late final _std_VecVec6f_extend =
      _std_VecVec6f_extendPtr.asFunction<void Function(ffi.Pointer<VecVec6f>, ffi.Pointer<VecVec6f>)>();

  void std_VecVec6f_free(
    imp1.VecVec6fPtr self,
  ) {
    return _std_VecVec6f_free(
      self,
    );
  }

  late final _std_VecVec6f_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecVec6fPtr)>>('std_VecVec6f_free');
  late final _std_VecVec6f_free = _std_VecVec6f_freePtr.asFunction<void Function(imp1.VecVec6fPtr)>();

  Vec6f std_VecVec6f_get(
    ffi.Pointer<VecVec6f> self,
    int index,
  ) {
    return _std_VecVec6f_get(
      self,
      index,
    );
  }

  late final _std_VecVec6f_getPtr =
      _lookup<ffi.NativeFunction<Vec6f Function(ffi.Pointer<VecVec6f>, ffi.Size)>>('std_VecVec6f_get');
  late final _std_VecVec6f_get =
      _std_VecVec6f_getPtr.asFunction<Vec6f Function(ffi.Pointer<VecVec6f>, int)>();

  ffi.Pointer<Vec6f> std_VecVec6f_get_p(
    ffi.Pointer<VecVec6f> self,
    int index,
  ) {
    return _std_VecVec6f_get_p(
      self,
      index,
    );
  }

  late final _std_VecVec6f_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Vec6f> Function(ffi.Pointer<VecVec6f>, ffi.Int)>>(
          'std_VecVec6f_get_p');
  late final _std_VecVec6f_get_p =
      _std_VecVec6f_get_pPtr.asFunction<ffi.Pointer<Vec6f> Function(ffi.Pointer<VecVec6f>, int)>();

  int std_VecVec6f_length(
    ffi.Pointer<VecVec6f> self,
  ) {
    return _std_VecVec6f_length(
      self,
    );
  }

  late final _std_VecVec6f_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVec6f>)>>('std_VecVec6f_length');
  late final _std_VecVec6f_length = _std_VecVec6f_lengthPtr.asFunction<int Function(ffi.Pointer<VecVec6f>)>();

  ffi.Pointer<VecVec6f> std_VecVec6f_new(
    int length,
  ) {
    return _std_VecVec6f_new(
      length,
    );
  }

  late final _std_VecVec6f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec6f> Function(ffi.Size)>>('std_VecVec6f_new');
  late final _std_VecVec6f_new = _std_VecVec6f_newPtr.asFunction<ffi.Pointer<VecVec6f> Function(int)>();

  ffi.Pointer<VecVec6f> std_VecVec6f_new_1(
    int length,
    Vec6f val,
  ) {
    return _std_VecVec6f_new_1(
      length,
      val,
    );
  }

  late final _std_VecVec6f_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec6f> Function(ffi.Size, Vec6f)>>('std_VecVec6f_new_1');
  late final _std_VecVec6f_new_1 =
      _std_VecVec6f_new_1Ptr.asFunction<ffi.Pointer<VecVec6f> Function(int, Vec6f)>();

  ffi.Pointer<VecVec6f> std_VecVec6f_new_2(
    int length,
    ffi.Pointer<Vec6f> val_ptr,
  ) {
    return _std_VecVec6f_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecVec6f_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVec6f> Function(ffi.Size, ffi.Pointer<Vec6f>)>>(
          'std_VecVec6f_new_2');
  late final _std_VecVec6f_new_2 =
      _std_VecVec6f_new_2Ptr.asFunction<ffi.Pointer<VecVec6f> Function(int, ffi.Pointer<Vec6f>)>();

  void std_VecVec6f_push_back(
    ffi.Pointer<VecVec6f> self,
    Vec6f val,
  ) {
    return _std_VecVec6f_push_back(
      self,
      val,
    );
  }

  late final _std_VecVec6f_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec6f>, Vec6f)>>('std_VecVec6f_push_back');
  late final _std_VecVec6f_push_back =
      _std_VecVec6f_push_backPtr.asFunction<void Function(ffi.Pointer<VecVec6f>, Vec6f)>();

  void std_VecVec6f_reserve(
    ffi.Pointer<VecVec6f> self,
    int new_len,
  ) {
    return _std_VecVec6f_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecVec6f_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec6f>, ffi.Size)>>('std_VecVec6f_reserve');
  late final _std_VecVec6f_reserve =
      _std_VecVec6f_reservePtr.asFunction<void Function(ffi.Pointer<VecVec6f>, int)>();

  void std_VecVec6f_resize(
    ffi.Pointer<VecVec6f> self,
    int new_len,
  ) {
    return _std_VecVec6f_resize(
      self,
      new_len,
    );
  }

  late final _std_VecVec6f_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec6f>, ffi.Size)>>('std_VecVec6f_resize');
  late final _std_VecVec6f_resize =
      _std_VecVec6f_resizePtr.asFunction<void Function(ffi.Pointer<VecVec6f>, int)>();

  void std_VecVec6f_set(
    ffi.Pointer<VecVec6f> self,
    int index,
    Vec6f val,
  ) {
    return _std_VecVec6f_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVec6f_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec6f>, ffi.Size, Vec6f)>>(
          'std_VecVec6f_set');
  late final _std_VecVec6f_set =
      _std_VecVec6f_setPtr.asFunction<void Function(ffi.Pointer<VecVec6f>, int, Vec6f)>();

  void std_VecVec6f_shrink_to_fit(
    ffi.Pointer<VecVec6f> self,
  ) {
    return _std_VecVec6f_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVec6f_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVec6f>)>>('std_VecVec6f_shrink_to_fit');
  late final _std_VecVec6f_shrink_to_fit =
      _std_VecVec6f_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVec6f>)>();

  void std_VecVecChar_clear(
    ffi.Pointer<VecVecChar> self,
  ) {
    return _std_VecVecChar_clear(
      self,
    );
  }

  late final _std_VecVecChar_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>)>>('std_VecVecChar_clear');
  late final _std_VecVecChar_clear =
      _std_VecVecChar_clearPtr.asFunction<void Function(ffi.Pointer<VecVecChar>)>();

  ffi.Pointer<VecVecChar> std_VecVecChar_clone(
    ffi.Pointer<VecVecChar> self,
  ) {
    return _std_VecVecChar_clone(
      self,
    );
  }

  late final _std_VecVecChar_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecChar> Function(ffi.Pointer<VecVecChar>)>>(
          'std_VecVecChar_clone');
  late final _std_VecVecChar_clone =
      _std_VecVecChar_clonePtr.asFunction<ffi.Pointer<VecVecChar> Function(ffi.Pointer<VecVecChar>)>();

  ffi.Pointer<VecChar> std_VecVecChar_data(
    ffi.Pointer<VecVecChar> self,
  ) {
    return _std_VecVecChar_data(
      self,
    );
  }

  late final _std_VecVecChar_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecChar> Function(ffi.Pointer<VecVecChar>)>>(
          'std_VecVecChar_data');
  late final _std_VecVecChar_data =
      _std_VecVecChar_dataPtr.asFunction<ffi.Pointer<VecChar> Function(ffi.Pointer<VecVecChar>)>();

  void std_VecVecChar_free(
    ffi.Pointer<VecVecChar> self,
  ) {
    return _std_VecVecChar_free(
      self,
    );
  }

  late final _std_VecVecChar_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>)>>('std_VecVecChar_free');
  late final _std_VecVecChar_free =
      _std_VecVecChar_freePtr.asFunction<void Function(ffi.Pointer<VecVecChar>)>();

  ffi.Pointer<VecChar> std_VecVecChar_get(
    ffi.Pointer<VecVecChar> self,
    int index,
  ) {
    return _std_VecVecChar_get(
      self,
      index,
    );
  }

  late final _std_VecVecChar_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecChar> Function(ffi.Pointer<VecVecChar>, ffi.Int)>>(
          'std_VecVecChar_get');
  late final _std_VecVecChar_get =
      _std_VecVecChar_getPtr.asFunction<ffi.Pointer<VecChar> Function(ffi.Pointer<VecVecChar>, int)>();

  int std_VecVecChar_length(
    ffi.Pointer<VecVecChar> self,
  ) {
    return _std_VecVecChar_length(
      self,
    );
  }

  late final _std_VecVecChar_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecChar>)>>('std_VecVecChar_length');
  late final _std_VecVecChar_length =
      _std_VecVecChar_lengthPtr.asFunction<int Function(ffi.Pointer<VecVecChar>)>();

  ffi.Pointer<VecVecChar> std_VecVecChar_new(
    int length,
  ) {
    return _std_VecVecChar_new(
      length,
    );
  }

  late final _std_VecVecChar_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecChar> Function(ffi.Size)>>('std_VecVecChar_new');
  late final _std_VecVecChar_new = _std_VecVecChar_newPtr.asFunction<ffi.Pointer<VecVecChar> Function(int)>();

  ffi.Pointer<VecVecChar> std_VecVecChar_new_1(
    int length,
    ffi.Pointer<VecChar> val,
  ) {
    return _std_VecVecChar_new_1(
      length,
      val,
    );
  }

  late final _std_VecVecChar_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecChar> Function(ffi.Size, ffi.Pointer<VecChar>)>>(
          'std_VecVecChar_new_1');
  late final _std_VecVecChar_new_1 =
      _std_VecVecChar_new_1Ptr.asFunction<ffi.Pointer<VecVecChar> Function(int, ffi.Pointer<VecChar>)>();

  ffi.Pointer<VecVecChar> std_VecVecChar_new_2(
    ffi.Pointer<VecVecChar> val_ptr,
  ) {
    return _std_VecVecChar_new_2(
      val_ptr,
    );
  }

  late final _std_VecVecChar_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecChar> Function(ffi.Pointer<VecVecChar>)>>(
          'std_VecVecChar_new_2');
  late final _std_VecVecChar_new_2 =
      _std_VecVecChar_new_2Ptr.asFunction<ffi.Pointer<VecVecChar> Function(ffi.Pointer<VecVecChar>)>();

  ffi.Pointer<VecVecChar> std_VecVecChar_new_3(
    ffi.Pointer<ffi.Pointer<ffi.Char>> val,
    VecI32 sizes,
  ) {
    return _std_VecVecChar_new_3(
      val,
      sizes,
    );
  }

  late final _std_VecVecChar_new_3Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<VecVecChar> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, VecI32)>>(
      'std_VecVecChar_new_3');
  late final _std_VecVecChar_new_3 = _std_VecVecChar_new_3Ptr
      .asFunction<ffi.Pointer<VecVecChar> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, VecI32)>();

  void std_VecVecChar_push_back(
    ffi.Pointer<VecVecChar> self,
    VecChar val,
  ) {
    return _std_VecVecChar_push_back(
      self,
      val,
    );
  }

  late final _std_VecVecChar_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>, VecChar)>>(
          'std_VecVecChar_push_back');
  late final _std_VecVecChar_push_back =
      _std_VecVecChar_push_backPtr.asFunction<void Function(ffi.Pointer<VecVecChar>, VecChar)>();

  void std_VecVecChar_reserve(
    ffi.Pointer<VecVecChar> self,
    int size,
  ) {
    return _std_VecVecChar_reserve(
      self,
      size,
    );
  }

  late final _std_VecVecChar_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>, ffi.Size)>>(
          'std_VecVecChar_reserve');
  late final _std_VecVecChar_reserve =
      _std_VecVecChar_reservePtr.asFunction<void Function(ffi.Pointer<VecVecChar>, int)>();

  void std_VecVecChar_resize(
    ffi.Pointer<VecVecChar> self,
    int size,
  ) {
    return _std_VecVecChar_resize(
      self,
      size,
    );
  }

  late final _std_VecVecChar_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>, ffi.Size)>>(
          'std_VecVecChar_resize');
  late final _std_VecVecChar_resize =
      _std_VecVecChar_resizePtr.asFunction<void Function(ffi.Pointer<VecVecChar>, int)>();

  void std_VecVecChar_set(
    ffi.Pointer<VecVecChar> self,
    int index,
    ffi.Pointer<VecChar> val,
  ) {
    return _std_VecVecChar_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVecChar_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>, ffi.Int, ffi.Pointer<VecChar>)>>(
          'std_VecVecChar_set');
  late final _std_VecVecChar_set =
      _std_VecVecChar_setPtr.asFunction<void Function(ffi.Pointer<VecVecChar>, int, ffi.Pointer<VecChar>)>();

  void std_VecVecChar_shrink_to_fit(
    ffi.Pointer<VecVecChar> self,
  ) {
    return _std_VecVecChar_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVecChar_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>)>>('std_VecVecChar_shrink_to_fit');
  late final _std_VecVecChar_shrink_to_fit =
      _std_VecVecChar_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVecChar>)>();

  void std_VecVecDMatch_clear(
    ffi.Pointer<VecVecDMatch> self,
  ) {
    return _std_VecVecDMatch_clear(
      self,
    );
  }

  late final _std_VecVecDMatch_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecDMatch>)>>('std_VecVecDMatch_clear');
  late final _std_VecVecDMatch_clear =
      _std_VecVecDMatch_clearPtr.asFunction<void Function(ffi.Pointer<VecVecDMatch>)>();

  ffi.Pointer<VecVecDMatch> std_VecVecDMatch_clone(
    ffi.Pointer<VecVecDMatch> self,
  ) {
    return _std_VecVecDMatch_clone(
      self,
    );
  }

  late final _std_VecVecDMatch_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecDMatch> Function(ffi.Pointer<VecVecDMatch>)>>(
          'std_VecVecDMatch_clone');
  late final _std_VecVecDMatch_clone =
      _std_VecVecDMatch_clonePtr.asFunction<ffi.Pointer<VecVecDMatch> Function(ffi.Pointer<VecVecDMatch>)>();

  ffi.Pointer<VecDMatch> std_VecVecDMatch_data(
    ffi.Pointer<VecVecDMatch> self,
  ) {
    return _std_VecVecDMatch_data(
      self,
    );
  }

  late final _std_VecVecDMatch_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecDMatch> Function(ffi.Pointer<VecVecDMatch>)>>(
          'std_VecVecDMatch_data');
  late final _std_VecVecDMatch_data =
      _std_VecVecDMatch_dataPtr.asFunction<ffi.Pointer<VecDMatch> Function(ffi.Pointer<VecVecDMatch>)>();

  void std_VecVecDMatch_extend(
    ffi.Pointer<VecVecDMatch> self,
    ffi.Pointer<VecVecDMatch> other,
  ) {
    return _std_VecVecDMatch_extend(
      self,
      other,
    );
  }

  late final _std_VecVecDMatch_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecDMatch>, ffi.Pointer<VecVecDMatch>)>>(
          'std_VecVecDMatch_extend');
  late final _std_VecVecDMatch_extend = _std_VecVecDMatch_extendPtr
      .asFunction<void Function(ffi.Pointer<VecVecDMatch>, ffi.Pointer<VecVecDMatch>)>();

  void std_VecVecDMatch_free(
    imp1.VecVecDMatchPtr self,
  ) {
    return _std_VecVecDMatch_free(
      self,
    );
  }

  late final _std_VecVecDMatch_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecVecDMatchPtr)>>('std_VecVecDMatch_free');
  late final _std_VecVecDMatch_free =
      _std_VecVecDMatch_freePtr.asFunction<void Function(imp1.VecVecDMatchPtr)>();

  VecDMatch std_VecVecDMatch_get(
    ffi.Pointer<VecVecDMatch> self,
    int index,
  ) {
    return _std_VecVecDMatch_get(
      self,
      index,
    );
  }

  late final _std_VecVecDMatch_getPtr =
      _lookup<ffi.NativeFunction<VecDMatch Function(ffi.Pointer<VecVecDMatch>, ffi.Size)>>(
          'std_VecVecDMatch_get');
  late final _std_VecVecDMatch_get =
      _std_VecVecDMatch_getPtr.asFunction<VecDMatch Function(ffi.Pointer<VecVecDMatch>, int)>();

  ffi.Pointer<DMatch> std_VecVecDMatch_get_ij(
    ffi.Pointer<VecVecDMatch> self,
    int i,
    int j,
  ) {
    return _std_VecVecDMatch_get_ij(
      self,
      i,
      j,
    );
  }

  late final _std_VecVecDMatch_get_ijPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<DMatch> Function(ffi.Pointer<VecVecDMatch>, ffi.Size, ffi.Size)>>(
      'std_VecVecDMatch_get_ij');
  late final _std_VecVecDMatch_get_ij = _std_VecVecDMatch_get_ijPtr
      .asFunction<ffi.Pointer<DMatch> Function(ffi.Pointer<VecVecDMatch>, int, int)>();

  ffi.Pointer<VecDMatch> std_VecVecDMatch_get_p(
    ffi.Pointer<VecVecDMatch> self,
    int index,
  ) {
    return _std_VecVecDMatch_get_p(
      self,
      index,
    );
  }

  late final _std_VecVecDMatch_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecDMatch> Function(ffi.Pointer<VecVecDMatch>, ffi.Int)>>(
          'std_VecVecDMatch_get_p');
  late final _std_VecVecDMatch_get_p = _std_VecVecDMatch_get_pPtr
      .asFunction<ffi.Pointer<VecDMatch> Function(ffi.Pointer<VecVecDMatch>, int)>();

  int std_VecVecDMatch_length(
    ffi.Pointer<VecVecDMatch> self,
  ) {
    return _std_VecVecDMatch_length(
      self,
    );
  }

  late final _std_VecVecDMatch_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecDMatch>)>>('std_VecVecDMatch_length');
  late final _std_VecVecDMatch_length =
      _std_VecVecDMatch_lengthPtr.asFunction<int Function(ffi.Pointer<VecVecDMatch>)>();

  int std_VecVecDMatch_length_i(
    ffi.Pointer<VecVecDMatch> self,
    int i,
  ) {
    return _std_VecVecDMatch_length_i(
      self,
      i,
    );
  }

  late final _std_VecVecDMatch_length_iPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecDMatch>, ffi.Size)>>(
          'std_VecVecDMatch_length_i');
  late final _std_VecVecDMatch_length_i =
      _std_VecVecDMatch_length_iPtr.asFunction<int Function(ffi.Pointer<VecVecDMatch>, int)>();

  ffi.Pointer<VecVecDMatch> std_VecVecDMatch_new(
    int length,
  ) {
    return _std_VecVecDMatch_new(
      length,
    );
  }

  late final _std_VecVecDMatch_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecDMatch> Function(ffi.Size)>>('std_VecVecDMatch_new');
  late final _std_VecVecDMatch_new =
      _std_VecVecDMatch_newPtr.asFunction<ffi.Pointer<VecVecDMatch> Function(int)>();

  ffi.Pointer<VecVecDMatch> std_VecVecDMatch_new_1(
    int length,
    VecDMatch val,
  ) {
    return _std_VecVecDMatch_new_1(
      length,
      val,
    );
  }

  late final _std_VecVecDMatch_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecDMatch> Function(ffi.Size, VecDMatch)>>(
          'std_VecVecDMatch_new_1');
  late final _std_VecVecDMatch_new_1 =
      _std_VecVecDMatch_new_1Ptr.asFunction<ffi.Pointer<VecVecDMatch> Function(int, VecDMatch)>();

  ffi.Pointer<VecVecDMatch> std_VecVecDMatch_new_2(
    int length,
    ffi.Pointer<VecDMatch> val_ptr,
  ) {
    return _std_VecVecDMatch_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecVecDMatch_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecDMatch> Function(ffi.Size, ffi.Pointer<VecDMatch>)>>(
          'std_VecVecDMatch_new_2');
  late final _std_VecVecDMatch_new_2 = _std_VecVecDMatch_new_2Ptr
      .asFunction<ffi.Pointer<VecVecDMatch> Function(int, ffi.Pointer<VecDMatch>)>();

  void std_VecVecDMatch_push_back(
    ffi.Pointer<VecVecDMatch> self,
    VecDMatch val,
  ) {
    return _std_VecVecDMatch_push_back(
      self,
      val,
    );
  }

  late final _std_VecVecDMatch_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecDMatch>, VecDMatch)>>(
          'std_VecVecDMatch_push_back');
  late final _std_VecVecDMatch_push_back =
      _std_VecVecDMatch_push_backPtr.asFunction<void Function(ffi.Pointer<VecVecDMatch>, VecDMatch)>();

  void std_VecVecDMatch_reserve(
    ffi.Pointer<VecVecDMatch> self,
    int new_len,
  ) {
    return _std_VecVecDMatch_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecVecDMatch_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecDMatch>, ffi.Size)>>(
          'std_VecVecDMatch_reserve');
  late final _std_VecVecDMatch_reserve =
      _std_VecVecDMatch_reservePtr.asFunction<void Function(ffi.Pointer<VecVecDMatch>, int)>();

  void std_VecVecDMatch_resize(
    ffi.Pointer<VecVecDMatch> self,
    int new_len,
  ) {
    return _std_VecVecDMatch_resize(
      self,
      new_len,
    );
  }

  late final _std_VecVecDMatch_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecDMatch>, ffi.Size)>>(
          'std_VecVecDMatch_resize');
  late final _std_VecVecDMatch_resize =
      _std_VecVecDMatch_resizePtr.asFunction<void Function(ffi.Pointer<VecVecDMatch>, int)>();

  void std_VecVecDMatch_set(
    ffi.Pointer<VecVecDMatch> self,
    int index,
    VecDMatch val,
  ) {
    return _std_VecVecDMatch_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVecDMatch_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecDMatch>, ffi.Size, VecDMatch)>>(
          'std_VecVecDMatch_set');
  late final _std_VecVecDMatch_set =
      _std_VecVecDMatch_setPtr.asFunction<void Function(ffi.Pointer<VecVecDMatch>, int, VecDMatch)>();

  void std_VecVecDMatch_shrink_to_fit(
    ffi.Pointer<VecVecDMatch> self,
  ) {
    return _std_VecVecDMatch_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVecDMatch_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecDMatch>)>>(
          'std_VecVecDMatch_shrink_to_fit');
  late final _std_VecVecDMatch_shrink_to_fit =
      _std_VecVecDMatch_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVecDMatch>)>();

  void std_VecVecPoint2f_clear(
    ffi.Pointer<VecVecPoint2f> self,
  ) {
    return _std_VecVecPoint2f_clear(
      self,
    );
  }

  late final _std_VecVecPoint2f_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint2f>)>>('std_VecVecPoint2f_clear');
  late final _std_VecVecPoint2f_clear =
      _std_VecVecPoint2f_clearPtr.asFunction<void Function(ffi.Pointer<VecVecPoint2f>)>();

  ffi.Pointer<VecPoint2f> std_VecVecPoint2f_data(
    ffi.Pointer<VecVecPoint2f> self,
  ) {
    return _std_VecVecPoint2f_data(
      self,
    );
  }

  late final _std_VecVecPoint2f_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint2f> Function(ffi.Pointer<VecVecPoint2f>)>>(
          'std_VecVecPoint2f_data');
  late final _std_VecVecPoint2f_data =
      _std_VecVecPoint2f_dataPtr.asFunction<ffi.Pointer<VecPoint2f> Function(ffi.Pointer<VecVecPoint2f>)>();

  void std_VecVecPoint2f_extend(
    ffi.Pointer<VecVecPoint2f> self,
    ffi.Pointer<VecVecPoint2f> other,
  ) {
    return _std_VecVecPoint2f_extend(
      self,
      other,
    );
  }

  late final _std_VecVecPoint2f_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint2f>, ffi.Pointer<VecVecPoint2f>)>>(
          'std_VecVecPoint2f_extend');
  late final _std_VecVecPoint2f_extend = _std_VecVecPoint2f_extendPtr
      .asFunction<void Function(ffi.Pointer<VecVecPoint2f>, ffi.Pointer<VecVecPoint2f>)>();

  void std_VecVecPoint2f_free(
    imp1.VecVecPoint2fPtr self,
  ) {
    return _std_VecVecPoint2f_free(
      self,
    );
  }

  late final _std_VecVecPoint2f_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecVecPoint2fPtr)>>('std_VecVecPoint2f_free');
  late final _std_VecVecPoint2f_free =
      _std_VecVecPoint2f_freePtr.asFunction<void Function(imp1.VecVecPoint2fPtr)>();

  VecPoint2f std_VecVecPoint2f_get(
    ffi.Pointer<VecVecPoint2f> self,
    int index,
  ) {
    return _std_VecVecPoint2f_get(
      self,
      index,
    );
  }

  late final _std_VecVecPoint2f_getPtr =
      _lookup<ffi.NativeFunction<VecPoint2f Function(ffi.Pointer<VecVecPoint2f>, ffi.Size)>>(
          'std_VecVecPoint2f_get');
  late final _std_VecVecPoint2f_get =
      _std_VecVecPoint2f_getPtr.asFunction<VecPoint2f Function(ffi.Pointer<VecVecPoint2f>, int)>();

  ffi.Pointer<CvPoint2f> std_VecVecPoint2f_get_ij(
    ffi.Pointer<VecVecPoint2f> self,
    int i,
    int j,
  ) {
    return _std_VecVecPoint2f_get_ij(
      self,
      i,
      j,
    );
  }

  late final _std_VecVecPoint2f_get_ijPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvPoint2f> Function(ffi.Pointer<VecVecPoint2f>, ffi.Size, ffi.Size)>>(
      'std_VecVecPoint2f_get_ij');
  late final _std_VecVecPoint2f_get_ij = _std_VecVecPoint2f_get_ijPtr
      .asFunction<ffi.Pointer<CvPoint2f> Function(ffi.Pointer<VecVecPoint2f>, int, int)>();

  ffi.Pointer<VecPoint2f> std_VecVecPoint2f_get_p(
    ffi.Pointer<VecVecPoint2f> self,
    int index,
  ) {
    return _std_VecVecPoint2f_get_p(
      self,
      index,
    );
  }

  late final _std_VecVecPoint2f_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint2f> Function(ffi.Pointer<VecVecPoint2f>, ffi.Int)>>(
          'std_VecVecPoint2f_get_p');
  late final _std_VecVecPoint2f_get_p = _std_VecVecPoint2f_get_pPtr
      .asFunction<ffi.Pointer<VecPoint2f> Function(ffi.Pointer<VecVecPoint2f>, int)>();

  int std_VecVecPoint2f_length(
    ffi.Pointer<VecVecPoint2f> self,
  ) {
    return _std_VecVecPoint2f_length(
      self,
    );
  }

  late final _std_VecVecPoint2f_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecPoint2f>)>>('std_VecVecPoint2f_length');
  late final _std_VecVecPoint2f_length =
      _std_VecVecPoint2f_lengthPtr.asFunction<int Function(ffi.Pointer<VecVecPoint2f>)>();

  int std_VecVecPoint2f_length_i(
    ffi.Pointer<VecVecPoint2f> self,
    int i,
  ) {
    return _std_VecVecPoint2f_length_i(
      self,
      i,
    );
  }

  late final _std_VecVecPoint2f_length_iPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecPoint2f>, ffi.Size)>>(
          'std_VecVecPoint2f_length_i');
  late final _std_VecVecPoint2f_length_i =
      _std_VecVecPoint2f_length_iPtr.asFunction<int Function(ffi.Pointer<VecVecPoint2f>, int)>();

  ffi.Pointer<VecVecPoint2f> std_VecVecPoint2f_new(
    int length,
  ) {
    return _std_VecVecPoint2f_new(
      length,
    );
  }

  late final _std_VecVecPoint2f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint2f> Function(ffi.Size)>>('std_VecVecPoint2f_new');
  late final _std_VecVecPoint2f_new =
      _std_VecVecPoint2f_newPtr.asFunction<ffi.Pointer<VecVecPoint2f> Function(int)>();

  ffi.Pointer<VecVecPoint2f> std_VecVecPoint2f_new_1(
    int length,
    VecPoint2f val,
  ) {
    return _std_VecVecPoint2f_new_1(
      length,
      val,
    );
  }

  late final _std_VecVecPoint2f_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint2f> Function(ffi.Size, VecPoint2f)>>(
          'std_VecVecPoint2f_new_1');
  late final _std_VecVecPoint2f_new_1 =
      _std_VecVecPoint2f_new_1Ptr.asFunction<ffi.Pointer<VecVecPoint2f> Function(int, VecPoint2f)>();

  ffi.Pointer<VecVecPoint2f> std_VecVecPoint2f_new_2(
    int length,
    ffi.Pointer<VecPoint2f> val_ptr,
  ) {
    return _std_VecVecPoint2f_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecVecPoint2f_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint2f> Function(ffi.Size, ffi.Pointer<VecPoint2f>)>>(
          'std_VecVecPoint2f_new_2');
  late final _std_VecVecPoint2f_new_2 = _std_VecVecPoint2f_new_2Ptr
      .asFunction<ffi.Pointer<VecVecPoint2f> Function(int, ffi.Pointer<VecPoint2f>)>();

  void std_VecVecPoint2f_push_back(
    ffi.Pointer<VecVecPoint2f> self,
    VecPoint2f val,
  ) {
    return _std_VecVecPoint2f_push_back(
      self,
      val,
    );
  }

  late final _std_VecVecPoint2f_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint2f>, VecPoint2f)>>(
          'std_VecVecPoint2f_push_back');
  late final _std_VecVecPoint2f_push_back =
      _std_VecVecPoint2f_push_backPtr.asFunction<void Function(ffi.Pointer<VecVecPoint2f>, VecPoint2f)>();

  void std_VecVecPoint2f_reserve(
    ffi.Pointer<VecVecPoint2f> self,
    int new_len,
  ) {
    return _std_VecVecPoint2f_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecVecPoint2f_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint2f>, ffi.Size)>>(
          'std_VecVecPoint2f_reserve');
  late final _std_VecVecPoint2f_reserve =
      _std_VecVecPoint2f_reservePtr.asFunction<void Function(ffi.Pointer<VecVecPoint2f>, int)>();

  void std_VecVecPoint2f_resize(
    ffi.Pointer<VecVecPoint2f> self,
    int new_len,
  ) {
    return _std_VecVecPoint2f_resize(
      self,
      new_len,
    );
  }

  late final _std_VecVecPoint2f_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint2f>, ffi.Size)>>(
          'std_VecVecPoint2f_resize');
  late final _std_VecVecPoint2f_resize =
      _std_VecVecPoint2f_resizePtr.asFunction<void Function(ffi.Pointer<VecVecPoint2f>, int)>();

  void std_VecVecPoint2f_set(
    ffi.Pointer<VecVecPoint2f> self,
    int index,
    VecPoint2f val,
  ) {
    return _std_VecVecPoint2f_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVecPoint2f_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint2f>, ffi.Size, VecPoint2f)>>(
          'std_VecVecPoint2f_set');
  late final _std_VecVecPoint2f_set =
      _std_VecVecPoint2f_setPtr.asFunction<void Function(ffi.Pointer<VecVecPoint2f>, int, VecPoint2f)>();

  void std_VecVecPoint2f_shrink_to_fit(
    ffi.Pointer<VecVecPoint2f> self,
  ) {
    return _std_VecVecPoint2f_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVecPoint2f_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint2f>)>>(
          'std_VecVecPoint2f_shrink_to_fit');
  late final _std_VecVecPoint2f_shrink_to_fit =
      _std_VecVecPoint2f_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVecPoint2f>)>();

  void std_VecVecPoint3f_clear(
    ffi.Pointer<VecVecPoint3f> self,
  ) {
    return _std_VecVecPoint3f_clear(
      self,
    );
  }

  late final _std_VecVecPoint3f_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3f>)>>('std_VecVecPoint3f_clear');
  late final _std_VecVecPoint3f_clear =
      _std_VecVecPoint3f_clearPtr.asFunction<void Function(ffi.Pointer<VecVecPoint3f>)>();

  ffi.Pointer<VecPoint3f> std_VecVecPoint3f_data(
    ffi.Pointer<VecVecPoint3f> self,
  ) {
    return _std_VecVecPoint3f_data(
      self,
    );
  }

  late final _std_VecVecPoint3f_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3f> Function(ffi.Pointer<VecVecPoint3f>)>>(
          'std_VecVecPoint3f_data');
  late final _std_VecVecPoint3f_data =
      _std_VecVecPoint3f_dataPtr.asFunction<ffi.Pointer<VecPoint3f> Function(ffi.Pointer<VecVecPoint3f>)>();

  void std_VecVecPoint3f_extend(
    ffi.Pointer<VecVecPoint3f> self,
    ffi.Pointer<VecVecPoint3f> other,
  ) {
    return _std_VecVecPoint3f_extend(
      self,
      other,
    );
  }

  late final _std_VecVecPoint3f_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3f>, ffi.Pointer<VecVecPoint3f>)>>(
          'std_VecVecPoint3f_extend');
  late final _std_VecVecPoint3f_extend = _std_VecVecPoint3f_extendPtr
      .asFunction<void Function(ffi.Pointer<VecVecPoint3f>, ffi.Pointer<VecVecPoint3f>)>();

  void std_VecVecPoint3f_free(
    imp1.VecVecPoint3fPtr self,
  ) {
    return _std_VecVecPoint3f_free(
      self,
    );
  }

  late final _std_VecVecPoint3f_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecVecPoint3fPtr)>>('std_VecVecPoint3f_free');
  late final _std_VecVecPoint3f_free =
      _std_VecVecPoint3f_freePtr.asFunction<void Function(imp1.VecVecPoint3fPtr)>();

  VecPoint3f std_VecVecPoint3f_get(
    ffi.Pointer<VecVecPoint3f> self,
    int index,
  ) {
    return _std_VecVecPoint3f_get(
      self,
      index,
    );
  }

  late final _std_VecVecPoint3f_getPtr =
      _lookup<ffi.NativeFunction<VecPoint3f Function(ffi.Pointer<VecVecPoint3f>, ffi.Size)>>(
          'std_VecVecPoint3f_get');
  late final _std_VecVecPoint3f_get =
      _std_VecVecPoint3f_getPtr.asFunction<VecPoint3f Function(ffi.Pointer<VecVecPoint3f>, int)>();

  ffi.Pointer<CvPoint3f> std_VecVecPoint3f_get_ij(
    ffi.Pointer<VecVecPoint3f> self,
    int i,
    int j,
  ) {
    return _std_VecVecPoint3f_get_ij(
      self,
      i,
      j,
    );
  }

  late final _std_VecVecPoint3f_get_ijPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvPoint3f> Function(ffi.Pointer<VecVecPoint3f>, ffi.Size, ffi.Size)>>(
      'std_VecVecPoint3f_get_ij');
  late final _std_VecVecPoint3f_get_ij = _std_VecVecPoint3f_get_ijPtr
      .asFunction<ffi.Pointer<CvPoint3f> Function(ffi.Pointer<VecVecPoint3f>, int, int)>();

  ffi.Pointer<VecPoint3f> std_VecVecPoint3f_get_p(
    ffi.Pointer<VecVecPoint3f> self,
    int index,
  ) {
    return _std_VecVecPoint3f_get_p(
      self,
      index,
    );
  }

  late final _std_VecVecPoint3f_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3f> Function(ffi.Pointer<VecVecPoint3f>, ffi.Int)>>(
          'std_VecVecPoint3f_get_p');
  late final _std_VecVecPoint3f_get_p = _std_VecVecPoint3f_get_pPtr
      .asFunction<ffi.Pointer<VecPoint3f> Function(ffi.Pointer<VecVecPoint3f>, int)>();

  int std_VecVecPoint3f_length(
    ffi.Pointer<VecVecPoint3f> self,
  ) {
    return _std_VecVecPoint3f_length(
      self,
    );
  }

  late final _std_VecVecPoint3f_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecPoint3f>)>>('std_VecVecPoint3f_length');
  late final _std_VecVecPoint3f_length =
      _std_VecVecPoint3f_lengthPtr.asFunction<int Function(ffi.Pointer<VecVecPoint3f>)>();

  int std_VecVecPoint3f_length_i(
    ffi.Pointer<VecVecPoint3f> self,
    int i,
  ) {
    return _std_VecVecPoint3f_length_i(
      self,
      i,
    );
  }

  late final _std_VecVecPoint3f_length_iPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecPoint3f>, ffi.Size)>>(
          'std_VecVecPoint3f_length_i');
  late final _std_VecVecPoint3f_length_i =
      _std_VecVecPoint3f_length_iPtr.asFunction<int Function(ffi.Pointer<VecVecPoint3f>, int)>();

  ffi.Pointer<VecVecPoint3f> std_VecVecPoint3f_new(
    int length,
  ) {
    return _std_VecVecPoint3f_new(
      length,
    );
  }

  late final _std_VecVecPoint3f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint3f> Function(ffi.Size)>>('std_VecVecPoint3f_new');
  late final _std_VecVecPoint3f_new =
      _std_VecVecPoint3f_newPtr.asFunction<ffi.Pointer<VecVecPoint3f> Function(int)>();

  ffi.Pointer<VecVecPoint3f> std_VecVecPoint3f_new_1(
    int length,
    VecPoint3f val,
  ) {
    return _std_VecVecPoint3f_new_1(
      length,
      val,
    );
  }

  late final _std_VecVecPoint3f_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint3f> Function(ffi.Size, VecPoint3f)>>(
          'std_VecVecPoint3f_new_1');
  late final _std_VecVecPoint3f_new_1 =
      _std_VecVecPoint3f_new_1Ptr.asFunction<ffi.Pointer<VecVecPoint3f> Function(int, VecPoint3f)>();

  ffi.Pointer<VecVecPoint3f> std_VecVecPoint3f_new_2(
    int length,
    ffi.Pointer<VecPoint3f> val_ptr,
  ) {
    return _std_VecVecPoint3f_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecVecPoint3f_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint3f> Function(ffi.Size, ffi.Pointer<VecPoint3f>)>>(
          'std_VecVecPoint3f_new_2');
  late final _std_VecVecPoint3f_new_2 = _std_VecVecPoint3f_new_2Ptr
      .asFunction<ffi.Pointer<VecVecPoint3f> Function(int, ffi.Pointer<VecPoint3f>)>();

  void std_VecVecPoint3f_push_back(
    ffi.Pointer<VecVecPoint3f> self,
    VecPoint3f val,
  ) {
    return _std_VecVecPoint3f_push_back(
      self,
      val,
    );
  }

  late final _std_VecVecPoint3f_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3f>, VecPoint3f)>>(
          'std_VecVecPoint3f_push_back');
  late final _std_VecVecPoint3f_push_back =
      _std_VecVecPoint3f_push_backPtr.asFunction<void Function(ffi.Pointer<VecVecPoint3f>, VecPoint3f)>();

  void std_VecVecPoint3f_reserve(
    ffi.Pointer<VecVecPoint3f> self,
    int new_len,
  ) {
    return _std_VecVecPoint3f_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecVecPoint3f_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3f>, ffi.Size)>>(
          'std_VecVecPoint3f_reserve');
  late final _std_VecVecPoint3f_reserve =
      _std_VecVecPoint3f_reservePtr.asFunction<void Function(ffi.Pointer<VecVecPoint3f>, int)>();

  void std_VecVecPoint3f_resize(
    ffi.Pointer<VecVecPoint3f> self,
    int new_len,
  ) {
    return _std_VecVecPoint3f_resize(
      self,
      new_len,
    );
  }

  late final _std_VecVecPoint3f_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3f>, ffi.Size)>>(
          'std_VecVecPoint3f_resize');
  late final _std_VecVecPoint3f_resize =
      _std_VecVecPoint3f_resizePtr.asFunction<void Function(ffi.Pointer<VecVecPoint3f>, int)>();

  void std_VecVecPoint3f_set(
    ffi.Pointer<VecVecPoint3f> self,
    int index,
    VecPoint3f val,
  ) {
    return _std_VecVecPoint3f_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVecPoint3f_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3f>, ffi.Size, VecPoint3f)>>(
          'std_VecVecPoint3f_set');
  late final _std_VecVecPoint3f_set =
      _std_VecVecPoint3f_setPtr.asFunction<void Function(ffi.Pointer<VecVecPoint3f>, int, VecPoint3f)>();

  void std_VecVecPoint3f_shrink_to_fit(
    ffi.Pointer<VecVecPoint3f> self,
  ) {
    return _std_VecVecPoint3f_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVecPoint3f_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3f>)>>(
          'std_VecVecPoint3f_shrink_to_fit');
  late final _std_VecVecPoint3f_shrink_to_fit =
      _std_VecVecPoint3f_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVecPoint3f>)>();

  void std_VecVecPoint3i_clear(
    ffi.Pointer<VecVecPoint3i> self,
  ) {
    return _std_VecVecPoint3i_clear(
      self,
    );
  }

  late final _std_VecVecPoint3i_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3i>)>>('std_VecVecPoint3i_clear');
  late final _std_VecVecPoint3i_clear =
      _std_VecVecPoint3i_clearPtr.asFunction<void Function(ffi.Pointer<VecVecPoint3i>)>();

  ffi.Pointer<VecPoint3i> std_VecVecPoint3i_data(
    ffi.Pointer<VecVecPoint3i> self,
  ) {
    return _std_VecVecPoint3i_data(
      self,
    );
  }

  late final _std_VecVecPoint3i_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3i> Function(ffi.Pointer<VecVecPoint3i>)>>(
          'std_VecVecPoint3i_data');
  late final _std_VecVecPoint3i_data =
      _std_VecVecPoint3i_dataPtr.asFunction<ffi.Pointer<VecPoint3i> Function(ffi.Pointer<VecVecPoint3i>)>();

  void std_VecVecPoint3i_extend(
    ffi.Pointer<VecVecPoint3i> self,
    ffi.Pointer<VecVecPoint3i> other,
  ) {
    return _std_VecVecPoint3i_extend(
      self,
      other,
    );
  }

  late final _std_VecVecPoint3i_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3i>, ffi.Pointer<VecVecPoint3i>)>>(
          'std_VecVecPoint3i_extend');
  late final _std_VecVecPoint3i_extend = _std_VecVecPoint3i_extendPtr
      .asFunction<void Function(ffi.Pointer<VecVecPoint3i>, ffi.Pointer<VecVecPoint3i>)>();

  void std_VecVecPoint3i_free(
    imp1.VecVecPoint3iPtr self,
  ) {
    return _std_VecVecPoint3i_free(
      self,
    );
  }

  late final _std_VecVecPoint3i_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecVecPoint3iPtr)>>('std_VecVecPoint3i_free');
  late final _std_VecVecPoint3i_free =
      _std_VecVecPoint3i_freePtr.asFunction<void Function(imp1.VecVecPoint3iPtr)>();

  VecPoint3i std_VecVecPoint3i_get(
    ffi.Pointer<VecVecPoint3i> self,
    int index,
  ) {
    return _std_VecVecPoint3i_get(
      self,
      index,
    );
  }

  late final _std_VecVecPoint3i_getPtr =
      _lookup<ffi.NativeFunction<VecPoint3i Function(ffi.Pointer<VecVecPoint3i>, ffi.Size)>>(
          'std_VecVecPoint3i_get');
  late final _std_VecVecPoint3i_get =
      _std_VecVecPoint3i_getPtr.asFunction<VecPoint3i Function(ffi.Pointer<VecVecPoint3i>, int)>();

  ffi.Pointer<CvPoint3i> std_VecVecPoint3i_get_ij(
    ffi.Pointer<VecVecPoint3i> self,
    int i,
    int j,
  ) {
    return _std_VecVecPoint3i_get_ij(
      self,
      i,
      j,
    );
  }

  late final _std_VecVecPoint3i_get_ijPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvPoint3i> Function(ffi.Pointer<VecVecPoint3i>, ffi.Size, ffi.Size)>>(
      'std_VecVecPoint3i_get_ij');
  late final _std_VecVecPoint3i_get_ij = _std_VecVecPoint3i_get_ijPtr
      .asFunction<ffi.Pointer<CvPoint3i> Function(ffi.Pointer<VecVecPoint3i>, int, int)>();

  ffi.Pointer<VecPoint3i> std_VecVecPoint3i_get_p(
    ffi.Pointer<VecVecPoint3i> self,
    int index,
  ) {
    return _std_VecVecPoint3i_get_p(
      self,
      index,
    );
  }

  late final _std_VecVecPoint3i_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint3i> Function(ffi.Pointer<VecVecPoint3i>, ffi.Int)>>(
          'std_VecVecPoint3i_get_p');
  late final _std_VecVecPoint3i_get_p = _std_VecVecPoint3i_get_pPtr
      .asFunction<ffi.Pointer<VecPoint3i> Function(ffi.Pointer<VecVecPoint3i>, int)>();

  int std_VecVecPoint3i_length(
    ffi.Pointer<VecVecPoint3i> self,
  ) {
    return _std_VecVecPoint3i_length(
      self,
    );
  }

  late final _std_VecVecPoint3i_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecPoint3i>)>>('std_VecVecPoint3i_length');
  late final _std_VecVecPoint3i_length =
      _std_VecVecPoint3i_lengthPtr.asFunction<int Function(ffi.Pointer<VecVecPoint3i>)>();

  int std_VecVecPoint3i_length_i(
    ffi.Pointer<VecVecPoint3i> self,
    int i,
  ) {
    return _std_VecVecPoint3i_length_i(
      self,
      i,
    );
  }

  late final _std_VecVecPoint3i_length_iPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecPoint3i>, ffi.Size)>>(
          'std_VecVecPoint3i_length_i');
  late final _std_VecVecPoint3i_length_i =
      _std_VecVecPoint3i_length_iPtr.asFunction<int Function(ffi.Pointer<VecVecPoint3i>, int)>();

  ffi.Pointer<VecVecPoint3i> std_VecVecPoint3i_new(
    int length,
  ) {
    return _std_VecVecPoint3i_new(
      length,
    );
  }

  late final _std_VecVecPoint3i_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint3i> Function(ffi.Size)>>('std_VecVecPoint3i_new');
  late final _std_VecVecPoint3i_new =
      _std_VecVecPoint3i_newPtr.asFunction<ffi.Pointer<VecVecPoint3i> Function(int)>();

  ffi.Pointer<VecVecPoint3i> std_VecVecPoint3i_new_1(
    int length,
    VecPoint3i val,
  ) {
    return _std_VecVecPoint3i_new_1(
      length,
      val,
    );
  }

  late final _std_VecVecPoint3i_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint3i> Function(ffi.Size, VecPoint3i)>>(
          'std_VecVecPoint3i_new_1');
  late final _std_VecVecPoint3i_new_1 =
      _std_VecVecPoint3i_new_1Ptr.asFunction<ffi.Pointer<VecVecPoint3i> Function(int, VecPoint3i)>();

  ffi.Pointer<VecVecPoint3i> std_VecVecPoint3i_new_2(
    int length,
    ffi.Pointer<VecPoint3i> val_ptr,
  ) {
    return _std_VecVecPoint3i_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecVecPoint3i_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint3i> Function(ffi.Size, ffi.Pointer<VecPoint3i>)>>(
          'std_VecVecPoint3i_new_2');
  late final _std_VecVecPoint3i_new_2 = _std_VecVecPoint3i_new_2Ptr
      .asFunction<ffi.Pointer<VecVecPoint3i> Function(int, ffi.Pointer<VecPoint3i>)>();

  void std_VecVecPoint3i_push_back(
    ffi.Pointer<VecVecPoint3i> self,
    VecPoint3i val,
  ) {
    return _std_VecVecPoint3i_push_back(
      self,
      val,
    );
  }

  late final _std_VecVecPoint3i_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3i>, VecPoint3i)>>(
          'std_VecVecPoint3i_push_back');
  late final _std_VecVecPoint3i_push_back =
      _std_VecVecPoint3i_push_backPtr.asFunction<void Function(ffi.Pointer<VecVecPoint3i>, VecPoint3i)>();

  void std_VecVecPoint3i_reserve(
    ffi.Pointer<VecVecPoint3i> self,
    int new_len,
  ) {
    return _std_VecVecPoint3i_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecVecPoint3i_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3i>, ffi.Size)>>(
          'std_VecVecPoint3i_reserve');
  late final _std_VecVecPoint3i_reserve =
      _std_VecVecPoint3i_reservePtr.asFunction<void Function(ffi.Pointer<VecVecPoint3i>, int)>();

  void std_VecVecPoint3i_resize(
    ffi.Pointer<VecVecPoint3i> self,
    int new_len,
  ) {
    return _std_VecVecPoint3i_resize(
      self,
      new_len,
    );
  }

  late final _std_VecVecPoint3i_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3i>, ffi.Size)>>(
          'std_VecVecPoint3i_resize');
  late final _std_VecVecPoint3i_resize =
      _std_VecVecPoint3i_resizePtr.asFunction<void Function(ffi.Pointer<VecVecPoint3i>, int)>();

  void std_VecVecPoint3i_set(
    ffi.Pointer<VecVecPoint3i> self,
    int index,
    VecPoint3i val,
  ) {
    return _std_VecVecPoint3i_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVecPoint3i_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3i>, ffi.Size, VecPoint3i)>>(
          'std_VecVecPoint3i_set');
  late final _std_VecVecPoint3i_set =
      _std_VecVecPoint3i_setPtr.asFunction<void Function(ffi.Pointer<VecVecPoint3i>, int, VecPoint3i)>();

  void std_VecVecPoint3i_shrink_to_fit(
    ffi.Pointer<VecVecPoint3i> self,
  ) {
    return _std_VecVecPoint3i_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVecPoint3i_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint3i>)>>(
          'std_VecVecPoint3i_shrink_to_fit');
  late final _std_VecVecPoint3i_shrink_to_fit =
      _std_VecVecPoint3i_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVecPoint3i>)>();

  void std_VecVecPoint_clear(
    ffi.Pointer<VecVecPoint> self,
  ) {
    return _std_VecVecPoint_clear(
      self,
    );
  }

  late final _std_VecVecPoint_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint>)>>('std_VecVecPoint_clear');
  late final _std_VecVecPoint_clear =
      _std_VecVecPoint_clearPtr.asFunction<void Function(ffi.Pointer<VecVecPoint>)>();

  ffi.Pointer<VecPoint> std_VecVecPoint_data(
    ffi.Pointer<VecVecPoint> self,
  ) {
    return _std_VecVecPoint_data(
      self,
    );
  }

  late final _std_VecVecPoint_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint> Function(ffi.Pointer<VecVecPoint>)>>(
          'std_VecVecPoint_data');
  late final _std_VecVecPoint_data =
      _std_VecVecPoint_dataPtr.asFunction<ffi.Pointer<VecPoint> Function(ffi.Pointer<VecVecPoint>)>();

  void std_VecVecPoint_extend(
    ffi.Pointer<VecVecPoint> self,
    ffi.Pointer<VecVecPoint> other,
  ) {
    return _std_VecVecPoint_extend(
      self,
      other,
    );
  }

  late final _std_VecVecPoint_extendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint>, ffi.Pointer<VecVecPoint>)>>(
          'std_VecVecPoint_extend');
  late final _std_VecVecPoint_extend = _std_VecVecPoint_extendPtr
      .asFunction<void Function(ffi.Pointer<VecVecPoint>, ffi.Pointer<VecVecPoint>)>();

  void std_VecVecPoint_free(
    imp1.VecVecPointPtr self,
  ) {
    return _std_VecVecPoint_free(
      self,
    );
  }

  late final _std_VecVecPoint_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(imp1.VecVecPointPtr)>>('std_VecVecPoint_free');
  late final _std_VecVecPoint_free =
      _std_VecVecPoint_freePtr.asFunction<void Function(imp1.VecVecPointPtr)>();

  VecPoint std_VecVecPoint_get(
    ffi.Pointer<VecVecPoint> self,
    int index,
  ) {
    return _std_VecVecPoint_get(
      self,
      index,
    );
  }

  late final _std_VecVecPoint_getPtr =
      _lookup<ffi.NativeFunction<VecPoint Function(ffi.Pointer<VecVecPoint>, ffi.Size)>>(
          'std_VecVecPoint_get');
  late final _std_VecVecPoint_get =
      _std_VecVecPoint_getPtr.asFunction<VecPoint Function(ffi.Pointer<VecVecPoint>, int)>();

  ffi.Pointer<CvPoint> std_VecVecPoint_get_ij(
    ffi.Pointer<VecVecPoint> self,
    int i,
    int j,
  ) {
    return _std_VecVecPoint_get_ij(
      self,
      i,
      j,
    );
  }

  late final _std_VecVecPoint_get_ijPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvPoint> Function(ffi.Pointer<VecVecPoint>, ffi.Size, ffi.Size)>>(
      'std_VecVecPoint_get_ij');
  late final _std_VecVecPoint_get_ij = _std_VecVecPoint_get_ijPtr
      .asFunction<ffi.Pointer<CvPoint> Function(ffi.Pointer<VecVecPoint>, int, int)>();

  ffi.Pointer<VecPoint> std_VecVecPoint_get_p(
    ffi.Pointer<VecVecPoint> self,
    int index,
  ) {
    return _std_VecVecPoint_get_p(
      self,
      index,
    );
  }

  late final _std_VecVecPoint_get_pPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecPoint> Function(ffi.Pointer<VecVecPoint>, ffi.Int)>>(
          'std_VecVecPoint_get_p');
  late final _std_VecVecPoint_get_p =
      _std_VecVecPoint_get_pPtr.asFunction<ffi.Pointer<VecPoint> Function(ffi.Pointer<VecVecPoint>, int)>();

  int std_VecVecPoint_length(
    ffi.Pointer<VecVecPoint> self,
  ) {
    return _std_VecVecPoint_length(
      self,
    );
  }

  late final _std_VecVecPoint_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecPoint>)>>('std_VecVecPoint_length');
  late final _std_VecVecPoint_length =
      _std_VecVecPoint_lengthPtr.asFunction<int Function(ffi.Pointer<VecVecPoint>)>();

  int std_VecVecPoint_length_i(
    ffi.Pointer<VecVecPoint> self,
    int i,
  ) {
    return _std_VecVecPoint_length_i(
      self,
      i,
    );
  }

  late final _std_VecVecPoint_length_iPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<VecVecPoint>, ffi.Size)>>(
          'std_VecVecPoint_length_i');
  late final _std_VecVecPoint_length_i =
      _std_VecVecPoint_length_iPtr.asFunction<int Function(ffi.Pointer<VecVecPoint>, int)>();

  ffi.Pointer<VecVecPoint> std_VecVecPoint_new(
    int length,
  ) {
    return _std_VecVecPoint_new(
      length,
    );
  }

  late final _std_VecVecPoint_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint> Function(ffi.Size)>>('std_VecVecPoint_new');
  late final _std_VecVecPoint_new =
      _std_VecVecPoint_newPtr.asFunction<ffi.Pointer<VecVecPoint> Function(int)>();

  ffi.Pointer<VecVecPoint> std_VecVecPoint_new_1(
    int length,
    VecPoint val,
  ) {
    return _std_VecVecPoint_new_1(
      length,
      val,
    );
  }

  late final _std_VecVecPoint_new_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint> Function(ffi.Size, VecPoint)>>(
          'std_VecVecPoint_new_1');
  late final _std_VecVecPoint_new_1 =
      _std_VecVecPoint_new_1Ptr.asFunction<ffi.Pointer<VecVecPoint> Function(int, VecPoint)>();

  ffi.Pointer<VecVecPoint> std_VecVecPoint_new_2(
    int length,
    ffi.Pointer<VecPoint> val_ptr,
  ) {
    return _std_VecVecPoint_new_2(
      length,
      val_ptr,
    );
  }

  late final _std_VecVecPoint_new_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<VecVecPoint> Function(ffi.Size, ffi.Pointer<VecPoint>)>>(
          'std_VecVecPoint_new_2');
  late final _std_VecVecPoint_new_2 =
      _std_VecVecPoint_new_2Ptr.asFunction<ffi.Pointer<VecVecPoint> Function(int, ffi.Pointer<VecPoint>)>();

  void std_VecVecPoint_push_back(
    ffi.Pointer<VecVecPoint> self,
    VecPoint val,
  ) {
    return _std_VecVecPoint_push_back(
      self,
      val,
    );
  }

  late final _std_VecVecPoint_push_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint>, VecPoint)>>(
          'std_VecVecPoint_push_back');
  late final _std_VecVecPoint_push_back =
      _std_VecVecPoint_push_backPtr.asFunction<void Function(ffi.Pointer<VecVecPoint>, VecPoint)>();

  void std_VecVecPoint_reserve(
    ffi.Pointer<VecVecPoint> self,
    int new_len,
  ) {
    return _std_VecVecPoint_reserve(
      self,
      new_len,
    );
  }

  late final _std_VecVecPoint_reservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint>, ffi.Size)>>(
          'std_VecVecPoint_reserve');
  late final _std_VecVecPoint_reserve =
      _std_VecVecPoint_reservePtr.asFunction<void Function(ffi.Pointer<VecVecPoint>, int)>();

  void std_VecVecPoint_resize(
    ffi.Pointer<VecVecPoint> self,
    int new_len,
  ) {
    return _std_VecVecPoint_resize(
      self,
      new_len,
    );
  }

  late final _std_VecVecPoint_resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint>, ffi.Size)>>(
          'std_VecVecPoint_resize');
  late final _std_VecVecPoint_resize =
      _std_VecVecPoint_resizePtr.asFunction<void Function(ffi.Pointer<VecVecPoint>, int)>();

  void std_VecVecPoint_set(
    ffi.Pointer<VecVecPoint> self,
    int index,
    VecPoint val,
  ) {
    return _std_VecVecPoint_set(
      self,
      index,
      val,
    );
  }

  late final _std_VecVecPoint_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint>, ffi.Size, VecPoint)>>(
          'std_VecVecPoint_set');
  late final _std_VecVecPoint_set =
      _std_VecVecPoint_setPtr.asFunction<void Function(ffi.Pointer<VecVecPoint>, int, VecPoint)>();

  void std_VecVecPoint_shrink_to_fit(
    ffi.Pointer<VecVecPoint> self,
  ) {
    return _std_VecVecPoint_shrink_to_fit(
      self,
    );
  }

  late final _std_VecVecPoint_shrink_to_fitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecPoint>)>>(
          'std_VecVecPoint_shrink_to_fit');
  late final _std_VecVecPoint_shrink_to_fit =
      _std_VecVecPoint_shrink_to_fitPtr.asFunction<void Function(ffi.Pointer<VecVecPoint>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeCore _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CvStatus>)>> get CvStatus_close =>
      _library._CvStatus_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.MatPtr)>> get cv_Mat_close =>
      _library._cv_Mat_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>> get cv_Mat_closeVoid =>
      _library._cv_Mat_closeVoidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.RNGPtr)>> get cv_RNG_close =>
      _library._cv_RNG_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecCharPtr)>> get std_VecChar_free =>
      _library._std_VecChar_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecDMatchPtr)>> get std_VecDMatch_free =>
      _library._std_VecDMatch_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecF16Ptr)>> get std_VecF16_free =>
      _library._std_VecF16_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecF32Ptr)>> get std_VecF32_free =>
      _library._std_VecF32_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecF64Ptr)>> get std_VecF64_free =>
      _library._std_VecF64_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecI16Ptr)>> get std_VecI16_free =>
      _library._std_VecI16_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecI32Ptr)>> get std_VecI32_free =>
      _library._std_VecI32_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecI64Ptr)>> get std_VecI64_free =>
      _library._std_VecI64_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecI8Ptr)>> get std_VecI8_free =>
      _library._std_VecI8_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecKeyPointPtr)>> get std_VecKeyPoint_free =>
      _library._std_VecKeyPoint_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecMatPtr)>> get std_VecMat_free =>
      _library._std_VecMat_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecPoint2fPtr)>> get std_VecPoint2f_free =>
      _library._std_VecPoint2f_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecPoint3fPtr)>> get std_VecPoint3f_free =>
      _library._std_VecPoint3f_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecPoint3iPtr)>> get std_VecPoint3i_free =>
      _library._std_VecPoint3i_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecPointPtr)>> get std_VecPoint_free =>
      _library._std_VecPoint_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecRect2fPtr)>> get std_VecRect2f_free =>
      _library._std_VecRect2f_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecRectPtr)>> get std_VecRect_free =>
      _library._std_VecRect_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecRotatedRectPtr)>> get std_VecRotatedRect_free =>
      _library._std_VecRotatedRect_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecU16Ptr)>> get std_VecU16_free =>
      _library._std_VecU16_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecU32Ptr)>> get std_VecU32_free =>
      _library._std_VecU32_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecU64Ptr)>> get std_VecU64_free =>
      _library._std_VecU64_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecU8Ptr)>> get std_VecU8_free =>
      _library._std_VecU8_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecUCharPtr)>> get std_VecUChar_free =>
      _library._std_VecUChar_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecVec4fPtr)>> get std_VecVec4f_free =>
      _library._std_VecVec4f_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecVec4iPtr)>> get std_VecVec4i_free =>
      _library._std_VecVec4i_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecVec6fPtr)>> get std_VecVec6f_free =>
      _library._std_VecVec6f_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<VecVecChar>)>> get std_VecVecChar_free =>
      _library._std_VecVecChar_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecVecDMatchPtr)>> get std_VecVecDMatch_free =>
      _library._std_VecVecDMatch_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecVecPoint2fPtr)>> get std_VecVecPoint2f_free =>
      _library._std_VecVecPoint2f_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecVecPoint3fPtr)>> get std_VecVecPoint3f_free =>
      _library._std_VecVecPoint3f_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecVecPoint3iPtr)>> get std_VecVecPoint3i_free =>
      _library._std_VecVecPoint3i_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.VecVecPointPtr)>> get std_VecVecPoint_free =>
      _library._std_VecVecPoint_freePtr;
}

typedef CvPoint = imp1.CvPoint;
typedef CvPoint2f = imp1.CvPoint2f;
typedef CvPoint3f = imp1.CvPoint3f;
typedef CvPoint3i = imp1.CvPoint3i;
typedef CvRect = imp1.CvRect;
typedef CvRect2f = imp1.CvRect2f;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;
typedef DMatch = imp1.DMatch;
typedef ErrorCallback = ffi.Pointer<ffi.NativeFunction<ErrorCallbackFunction>>;
typedef ErrorCallbackFunction = ffi.Void Function(
    ffi.Int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    ffi.Int line,
    ffi.Pointer<ffi.Void> userdata);
typedef DartErrorCallbackFunction = void Function(int status, ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg, ffi.Pointer<ffi.Char> file_name, int line, ffi.Pointer<ffi.Void> userdata);
typedef KeyPoint = imp1.KeyPoint;
typedef Mat = imp1.Mat;
typedef MatStep = imp1.MatStep;
typedef RNG = imp1.RNG;
typedef RotatedRect = imp1.RotatedRect;
typedef Scalar = imp1.Scalar;
typedef TermCriteria = imp1.TermCriteria;
typedef Vec2b = imp1.Vec2b;
typedef Vec2d = imp1.Vec2d;
typedef Vec2f = imp1.Vec2f;
typedef Vec2i = imp1.Vec2i;
typedef Vec2s = imp1.Vec2s;
typedef Vec2w = imp1.Vec2w;
typedef Vec3b = imp1.Vec3b;
typedef Vec3d = imp1.Vec3d;
typedef Vec3f = imp1.Vec3f;
typedef Vec3i = imp1.Vec3i;
typedef Vec3s = imp1.Vec3s;
typedef Vec3w = imp1.Vec3w;
typedef Vec4b = imp1.Vec4b;
typedef Vec4d = imp1.Vec4d;
typedef Vec4f = imp1.Vec4f;
typedef Vec4i = imp1.Vec4i;
typedef Vec4s = imp1.Vec4s;
typedef Vec4w = imp1.Vec4w;
typedef Vec6d = imp1.Vec6d;
typedef Vec6f = imp1.Vec6f;
typedef Vec6i = imp1.Vec6i;
typedef Vec8i = imp1.Vec8i;
typedef VecChar = imp1.VecChar;
typedef VecDMatch = imp1.VecDMatch;
typedef VecF16 = imp1.VecF16;
typedef VecF32 = imp1.VecF32;
typedef VecF64 = imp1.VecF64;
typedef VecI16 = imp1.VecI16;
typedef VecI32 = imp1.VecI32;
typedef VecI64 = imp1.VecI64;
typedef VecI8 = imp1.VecI8;
typedef VecKeyPoint = imp1.VecKeyPoint;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecPoint3f = imp1.VecPoint3f;
typedef VecPoint3i = imp1.VecPoint3i;
typedef VecRect = imp1.VecRect;
typedef VecRect2f = imp1.VecRect2f;
typedef VecRotatedRect = imp1.VecRotatedRect;
typedef VecU16 = imp1.VecU16;
typedef VecU32 = imp1.VecU32;
typedef VecU64 = imp1.VecU64;
typedef VecU8 = imp1.VecU8;
typedef VecUChar = imp1.VecUChar;
typedef VecVec4f = imp1.VecVec4f;
typedef VecVec4i = imp1.VecVec4i;
typedef VecVec6f = imp1.VecVec6f;
typedef VecVecChar = imp1.VecVecChar;
typedef VecVecDMatch = imp1.VecVecDMatch;
typedef VecVecPoint = imp1.VecVecPoint;
typedef VecVecPoint2f = imp1.VecVecPoint2f;
typedef VecVecPoint3f = imp1.VecVecPoint3f;
typedef VecVecPoint3i = imp1.VecVecPoint3i;
typedef double_t = ffi.Double;
typedef Dartdouble_t = double;
typedef float_t = ffi.Float;
typedef Dartfloat_t = double;
