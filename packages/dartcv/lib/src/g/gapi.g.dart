// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Gapi
///
class CvNativeGapi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeGapi(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeGapi.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  ffi.Pointer<CvStatus> GArrayGArrayPoint_FromVec(
    VecVecPoint points,
    ffi.Pointer<GArrayGArrayPoint> rval,
  ) {
    return _GArrayGArrayPoint_FromVec(
      points,
      rval,
    );
  }

  late final _GArrayGArrayPoint_FromVecPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecVecPoint, ffi.Pointer<GArrayGArrayPoint>)>>(
      'GArrayGArrayPoint_FromVec');
  late final _GArrayGArrayPoint_FromVec = _GArrayGArrayPoint_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecVecPoint, ffi.Pointer<GArrayGArrayPoint>)>();

  ffi.Pointer<CvStatus> GArrayPoint2d_FromVec(
    VecPoint v,
    ffi.Pointer<GArrayPoint2d> rval,
  ) {
    return _GArrayPoint2d_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayPoint2d_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint2d>)>>(
          'GArrayPoint2d_FromVec');
  late final _GArrayPoint2d_FromVec = _GArrayPoint2d_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint2d>)>();

  ffi.Pointer<CvStatus> GArrayPoint2f_FromVec(
    VecPoint v,
    ffi.Pointer<GArrayPoint2f> rval,
  ) {
    return _GArrayPoint2f_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayPoint2f_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint2f>)>>(
          'GArrayPoint2f_FromVec');
  late final _GArrayPoint2f_FromVec = _GArrayPoint2f_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint2f>)>();

  ffi.Pointer<CvStatus> GArrayPoint2i_FromVec(
    VecPoint v,
    ffi.Pointer<GArrayPoint2i> rval,
  ) {
    return _GArrayPoint2i_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayPoint2i_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint2i>)>>(
          'GArrayPoint2i_FromVec');
  late final _GArrayPoint2i_FromVec = _GArrayPoint2i_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint2i>)>();

  ffi.Pointer<CvStatus> GArrayPoint3d_FromVec(
    VecPoint v,
    ffi.Pointer<GArrayPoint3d> rval,
  ) {
    return _GArrayPoint3d_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayPoint3d_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint3d>)>>(
          'GArrayPoint3d_FromVec');
  late final _GArrayPoint3d_FromVec = _GArrayPoint3d_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint3d>)>();

  ffi.Pointer<CvStatus> GArrayPoint3f_FromVec(
    VecPoint v,
    ffi.Pointer<GArrayPoint3f> rval,
  ) {
    return _GArrayPoint3f_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayPoint3f_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint3f>)>>(
          'GArrayPoint3f_FromVec');
  late final _GArrayPoint3f_FromVec = _GArrayPoint3f_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint3f>)>();

  ffi.Pointer<CvStatus> GArrayPoint3i_FromVec(
    VecPoint v,
    ffi.Pointer<GArrayPoint3i> rval,
  ) {
    return _GArrayPoint3i_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayPoint3i_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint3i>)>>(
          'GArrayPoint3i_FromVec');
  late final _GArrayPoint3i_FromVec = _GArrayPoint3i_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint3i>)>();

  ffi.Pointer<CvStatus> GArrayPoint_FromVec(
    VecPoint v,
    ffi.Pointer<GArrayPoint> rval,
  ) {
    return _GArrayPoint_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayPoint_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint>)>>(
          'GArrayPoint_FromVec');
  late final _GArrayPoint_FromVec = _GArrayPoint_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<GArrayPoint>)>();

  ffi.Pointer<CvStatus> GArrayPrim_FromVec(
    VecPrim v,
    ffi.Pointer<GArrayPrim> rval,
  ) {
    return _GArrayPrim_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayPrim_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPrim, ffi.Pointer<GArrayPrim>)>>(
          'GArrayPrim_FromVec');
  late final _GArrayPrim_FromVec =
      _GArrayPrim_FromVecPtr.asFunction<ffi.Pointer<CvStatus> Function(VecPrim, ffi.Pointer<GArrayPrim>)>();

  ffi.Pointer<CvStatus> GArrayVec4i_FromVec(
    VecVec4i v,
    ffi.Pointer<GArrayVec4i> rval,
  ) {
    return _GArrayVec4i_FromVec(
      v,
      rval,
    );
  }

  late final _GArrayVec4i_FromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecVec4i, ffi.Pointer<GArrayVec4i>)>>(
          'GArrayVec4i_FromVec');
  late final _GArrayVec4i_FromVec = _GArrayVec4i_FromVecPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecVec4i, ffi.Pointer<GArrayVec4i>)>();

  ffi.Pointer<CvStatus> Prim_from_Circle(
    CvPoint center,
    Scalar color,
    int lt,
    int radius,
    int shift,
    int thick,
    ffi.Pointer<Prim> rval,
  ) {
    return _Prim_from_Circle(
      center,
      color,
      lt,
      radius,
      shift,
      thick,
      rval,
    );
  }

  late final _Prim_from_CirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              CvPoint, Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Prim>)>>('Prim_from_Circle');
  late final _Prim_from_Circle = _Prim_from_CirclePtr.asFunction<
      ffi.Pointer<CvStatus> Function(CvPoint, Scalar, int, int, int, int, ffi.Pointer<Prim>)>();

  ffi.Pointer<CvStatus> Prim_from_FText(
    ffi.Pointer<ffi.Char> text,
    int text_len,
    CvPoint org,
    int fh,
    Scalar color,
    ffi.Pointer<Prim> rval,
  ) {
    return _Prim_from_FText(
      text,
      text_len,
      org,
      fh,
      color,
      rval,
    );
  }

  late final _Prim_from_FTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, CvPoint, ffi.Int, Scalar,
              ffi.Pointer<Prim>)>>('Prim_from_FText');
  late final _Prim_from_FText = _Prim_from_FTextPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, CvPoint, int, Scalar, ffi.Pointer<Prim>)>();

  ffi.Pointer<CvStatus> Prim_from_Image(
    CvPoint org,
    Mat img,
    Mat alpha,
    ffi.Pointer<Prim> rval,
  ) {
    return _Prim_from_Image(
      org,
      img,
      alpha,
      rval,
    );
  }

  late final _Prim_from_ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(CvPoint, Mat, Mat, ffi.Pointer<Prim>)>>(
          'Prim_from_Image');
  late final _Prim_from_Image =
      _Prim_from_ImagePtr.asFunction<ffi.Pointer<CvStatus> Function(CvPoint, Mat, Mat, ffi.Pointer<Prim>)>();

  ffi.Pointer<CvStatus> Prim_from_Line(
    Scalar color,
    int lt,
    CvPoint pt1,
    CvPoint pt2,
    int shift,
    int thick,
    ffi.Pointer<Prim> rval,
  ) {
    return _Prim_from_Line(
      color,
      lt,
      pt1,
      pt2,
      shift,
      thick,
      rval,
    );
  }

  late final _Prim_from_LinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Scalar, ffi.Int, CvPoint, CvPoint, ffi.Int, ffi.Int, ffi.Pointer<Prim>)>>('Prim_from_Line');
  late final _Prim_from_Line = _Prim_from_LinePtr.asFunction<
      ffi.Pointer<CvStatus> Function(Scalar, int, CvPoint, CvPoint, int, int, ffi.Pointer<Prim>)>();

  ffi.Pointer<CvStatus> Prim_from_Mosaic(
    int cellSz,
    int decim,
    CvRect mos,
    ffi.Pointer<Prim> rval,
  ) {
    return _Prim_from_Mosaic(
      cellSz,
      decim,
      mos,
      rval,
    );
  }

  late final _Prim_from_MosaicPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, CvRect, ffi.Pointer<Prim>)>>(
      'Prim_from_Mosaic');
  late final _Prim_from_Mosaic =
      _Prim_from_MosaicPtr.asFunction<ffi.Pointer<CvStatus> Function(int, int, CvRect, ffi.Pointer<Prim>)>();

  ffi.Pointer<CvStatus> Prim_from_Poly(
    VecPoint points,
    Scalar color,
    int thick,
    int lt,
    int shift,
    ffi.Pointer<Prim> rval,
  ) {
    return _Prim_from_Poly(
      points,
      color,
      thick,
      lt,
      shift,
      rval,
    );
  }

  late final _Prim_from_PolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecPoint, Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Prim>)>>('Prim_from_Poly');
  late final _Prim_from_Poly = _Prim_from_PolyPtr.asFunction<
      ffi.Pointer<CvStatus> Function(VecPoint, Scalar, int, int, int, ffi.Pointer<Prim>)>();

  ffi.Pointer<CvStatus> Prim_from_Rect(
    Scalar color,
    int lt,
    CvRect rect,
    int shift,
    int thick,
    ffi.Pointer<Prim> rval,
  ) {
    return _Prim_from_Rect(
      color,
      lt,
      rect,
      shift,
      thick,
      rval,
    );
  }

  late final _Prim_from_RectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Scalar, ffi.Int, CvRect, ffi.Int, ffi.Int, ffi.Pointer<Prim>)>>('Prim_from_Rect');
  late final _Prim_from_Rect = _Prim_from_RectPtr.asFunction<
      ffi.Pointer<CvStatus> Function(Scalar, int, CvRect, int, int, ffi.Pointer<Prim>)>();

  ffi.Pointer<CvStatus> Prim_from_Text(
    bool bottom_left_origin,
    Scalar color,
    int ff,
    double fs,
    int lt,
    CvPoint org,
    ffi.Pointer<ffi.Char> text,
    int text_len,
    int thick,
    ffi.Pointer<Prim> rval,
  ) {
    return _Prim_from_Text(
      bottom_left_origin,
      color,
      ff,
      fs,
      lt,
      org,
      text,
      text_len,
      thick,
      rval,
    );
  }

  late final _Prim_from_TextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Bool, Scalar, ffi.Int, ffi.Double, ffi.Int, CvPoint,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Pointer<Prim>)>>('Prim_from_Text');
  late final _Prim_from_Text = _Prim_from_TextPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          bool, Scalar, int, double, int, CvPoint, ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<Prim>)>();

  ffi.Pointer<CvStatus> VecPrim_Append(
    VecPrim vec,
    Prim p,
  ) {
    return _VecPrim_Append(
      vec,
      p,
    );
  }

  late final _VecPrim_AppendPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPrim, Prim)>>('VecPrim_Append');
  late final _VecPrim_Append = _VecPrim_AppendPtr.asFunction<ffi.Pointer<CvStatus> Function(VecPrim, Prim)>();

  ffi.Pointer<CvStatus> VecPrim_At(
    VecPrim vec,
    int idx,
    ffi.Pointer<Prim> rval,
  ) {
    return _VecPrim_At(
      vec,
      idx,
      rval,
    );
  }

  late final _VecPrim_AtPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPrim, ffi.Int, ffi.Pointer<Prim>)>>(
          'VecPrim_At');
  late final _VecPrim_At =
      _VecPrim_AtPtr.asFunction<ffi.Pointer<CvStatus> Function(VecPrim, int, ffi.Pointer<Prim>)>();

  void VecPrim_Close(
    VecPrimPtr vec,
  ) {
    return _VecPrim_Close(
      vec,
    );
  }

  late final _VecPrim_ClosePtr = _lookup<ffi.NativeFunction<ffi.Void Function(VecPrimPtr)>>('VecPrim_Close');
  late final _VecPrim_Close = _VecPrim_ClosePtr.asFunction<void Function(VecPrimPtr)>();

  ffi.Pointer<CvStatus> VecPrim_New(
    ffi.Pointer<VecPrim> rval,
  ) {
    return _VecPrim_New(
      rval,
    );
  }

  late final _VecPrim_NewPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecPrim>)>>('VecPrim_New');
  late final _VecPrim_New =
      _VecPrim_NewPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecPrim>)>();

  ffi.Pointer<CvStatus> VecPrim_NewFromPointer(
    ffi.Pointer<Prim> points,
    int length,
    ffi.Pointer<VecPrim> rval,
  ) {
    return _VecPrim_NewFromPointer(
      points,
      length,
      rval,
    );
  }

  late final _VecPrim_NewFromPointerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<Prim>, ffi.Int, ffi.Pointer<VecPrim>)>>(
      'VecPrim_NewFromPointer');
  late final _VecPrim_NewFromPointer = _VecPrim_NewFromPointerPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<Prim>, int, ffi.Pointer<VecPrim>)>();

  ffi.Pointer<CvStatus> VecPrim_NewFromVec(
    VecPrim vec,
    ffi.Pointer<VecPrim> rval,
  ) {
    return _VecPrim_NewFromVec(
      vec,
      rval,
    );
  }

  late final _VecPrim_NewFromVecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPrim, ffi.Pointer<VecPrim>)>>(
          'VecPrim_NewFromVec');
  late final _VecPrim_NewFromVec =
      _VecPrim_NewFromVecPtr.asFunction<ffi.Pointer<CvStatus> Function(VecPrim, ffi.Pointer<VecPrim>)>();

  ffi.Pointer<CvStatus> VecPrim_Size(
    VecPrim vec,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _VecPrim_Size(
      vec,
      rval,
    );
  }

  late final _VecPrim_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(VecPrim, ffi.Pointer<ffi.Int>)>>(
          'VecPrim_Size');
  late final _VecPrim_Size =
      _VecPrim_SizePtr.asFunction<ffi.Pointer<CvStatus> Function(VecPrim, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> gapi_BGR2Gray(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_BGR2Gray(
      src,
      rval,
    );
  }

  late final _gapi_BGR2GrayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_BGR2Gray');
  late final _gapi_BGR2Gray =
      _gapi_BGR2GrayPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_BGR2I420(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_BGR2I420(
      src,
      rval,
    );
  }

  late final _gapi_BGR2I420Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_BGR2I420');
  late final _gapi_BGR2I420 =
      _gapi_BGR2I420Ptr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_BGR2LUV(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_BGR2LUV(
      src,
      rval,
    );
  }

  late final _gapi_BGR2LUVPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_BGR2LUV');
  late final _gapi_BGR2LUV =
      _gapi_BGR2LUVPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_BGR2RGB(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_BGR2RGB(
      src,
      rval,
    );
  }

  late final _gapi_BGR2RGBPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_BGR2RGB');
  late final _gapi_BGR2RGB =
      _gapi_BGR2RGBPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_BGR2YUV(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_BGR2YUV(
      src,
      rval,
    );
  }

  late final _gapi_BGR2YUVPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_BGR2YUV');
  late final _gapi_BGR2YUV =
      _gapi_BGR2YUVPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_BayerGR2RGB(
    GMat src_gr,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_BayerGR2RGB(
      src_gr,
      rval,
    );
  }

  late final _gapi_BayerGR2RGBPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>(
          'gapi_BayerGR2RGB');
  late final _gapi_BayerGR2RGB =
      _gapi_BayerGR2RGBPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_Canny(
    GMat image,
    double threshold1,
    double threshold2,
    int apertureSize,
    bool L2gradient,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_Canny(
      image,
      threshold1,
      threshold2,
      apertureSize,
      L2gradient,
      rval,
    );
  }

  late final _gapi_CannyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Double, ffi.Double, ffi.Int, ffi.Bool, ffi.Pointer<GMat>)>>('gapi_Canny');
  late final _gapi_Canny = _gapi_CannyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, double, double, int, bool, ffi.Pointer<GMat>)>();

  void gapi_GComputation_Close(
    GComputationPtr self,
  ) {
    return _gapi_GComputation_Close(
      self,
    );
  }

  late final _gapi_GComputation_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GComputationPtr)>>('gapi_GComputation_Close');
  late final _gapi_GComputation_Close =
      _gapi_GComputation_ClosePtr.asFunction<void Function(GComputationPtr)>();

  ffi.Pointer<CvStatus> gapi_GComputation_New(
    GMat in1,
    GMat out,
    ffi.Pointer<GComputation> rval,
  ) {
    return _gapi_GComputation_New(
      in1,
      out,
      rval,
    );
  }

  late final _gapi_GComputation_NewPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GComputation>)>>(
          'gapi_GComputation_New');
  late final _gapi_GComputation_New = _gapi_GComputation_NewPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GComputation>)>();

  ffi.Pointer<CvStatus> gapi_GComputation_New_1(
    GMat in1,
    GScalar out,
    ffi.Pointer<GComputation> rval,
  ) {
    return _gapi_GComputation_New_1(
      in1,
      out,
      rval,
    );
  }

  late final _gapi_GComputation_New_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, ffi.Pointer<GComputation>)>>(
          'gapi_GComputation_New_1');
  late final _gapi_GComputation_New_1 = _gapi_GComputation_New_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, ffi.Pointer<GComputation>)>();

  ffi.Pointer<CvStatus> gapi_GComputation_New_2(
    GMat in1,
    GMat in2,
    GMat out,
    ffi.Pointer<GComputation> rval,
  ) {
    return _gapi_GComputation_New_2(
      in1,
      in2,
      out,
      rval,
    );
  }

  late final _gapi_GComputation_New_2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, GMat, ffi.Pointer<GComputation>)>>(
      'gapi_GComputation_New_2');
  late final _gapi_GComputation_New_2 = _gapi_GComputation_New_2Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, GMat, ffi.Pointer<GComputation>)>();

  ffi.Pointer<CvStatus> gapi_GComputation_New_3(
    GMat in1,
    GMat in2,
    GScalar out,
    ffi.Pointer<GComputation> rval,
  ) {
    return _gapi_GComputation_New_3(
      in1,
      in2,
      out,
      rval,
    );
  }

  late final _gapi_GComputation_New_3Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, GScalar, ffi.Pointer<GComputation>)>>(
      'gapi_GComputation_New_3');
  late final _gapi_GComputation_New_3 = _gapi_GComputation_New_3Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, GScalar, ffi.Pointer<GComputation>)>();

  ffi.Pointer<CvStatus> gapi_GComputation_apply(
    GComputation self,
    Mat in1,
    imp1.CvCallback_1 callback,
  ) {
    return _gapi_GComputation_apply(
      self,
      in1,
      callback,
    );
  }

  late final _gapi_GComputation_applyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GComputation, Mat, imp1.CvCallback_1)>>(
          'gapi_GComputation_apply');
  late final _gapi_GComputation_apply = _gapi_GComputation_applyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GComputation, Mat, imp1.CvCallback_1)>();

  ffi.Pointer<CvStatus> gapi_GComputation_apply_1(
    GComputation self,
    Mat in1,
    ffi.Pointer<Scalar> out,
  ) {
    return _gapi_GComputation_apply_1(
      self,
      in1,
      out,
    );
  }

  late final _gapi_GComputation_apply_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GComputation, Mat, ffi.Pointer<Scalar>)>>(
          'gapi_GComputation_apply_1');
  late final _gapi_GComputation_apply_1 = _gapi_GComputation_apply_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GComputation, Mat, ffi.Pointer<Scalar>)>();

  ffi.Pointer<CvStatus> gapi_GComputation_apply_2(
    GComputation self,
    Mat in1,
    Mat in2,
    ffi.Pointer<Mat> out,
  ) {
    return _gapi_GComputation_apply_2(
      self,
      in1,
      in2,
      out,
    );
  }

  late final _gapi_GComputation_apply_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GComputation, Mat, Mat, ffi.Pointer<Mat>)>>(
          'gapi_GComputation_apply_2');
  late final _gapi_GComputation_apply_2 = _gapi_GComputation_apply_2Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GComputation, Mat, Mat, ffi.Pointer<Mat>)>();

  ffi.Pointer<CvStatus> gapi_GComputation_apply_3(
    GComputation self,
    Mat in1,
    Mat in2,
    ffi.Pointer<Scalar> out,
  ) {
    return _gapi_GComputation_apply_3(
      self,
      in1,
      in2,
      out,
    );
  }

  late final _gapi_GComputation_apply_3Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GComputation, Mat, Mat, ffi.Pointer<Scalar>)>>(
      'gapi_GComputation_apply_3');
  late final _gapi_GComputation_apply_3 = _gapi_GComputation_apply_3Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GComputation, Mat, Mat, ffi.Pointer<Scalar>)>();

  void gapi_GMat_Close(
    GMatPtr mat,
  ) {
    return _gapi_GMat_Close(
      mat,
    );
  }

  late final _gapi_GMat_ClosePtr = _lookup<ffi.NativeFunction<ffi.Void Function(GMatPtr)>>('gapi_GMat_Close');
  late final _gapi_GMat_Close = _gapi_GMat_ClosePtr.asFunction<void Function(GMatPtr)>();

  ffi.Pointer<CvStatus> gapi_GMat_New_Empty(
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_GMat_New_Empty(
      rval,
    );
  }

  late final _gapi_GMat_New_EmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<GMat>)>>('gapi_GMat_New_Empty');
  late final _gapi_GMat_New_Empty =
      _gapi_GMat_New_EmptyPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_GMat_New_FromMat(
    Mat mat,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_GMat_New_FromMat(
      mat,
      rval,
    );
  }

  late final _gapi_GMat_New_FromMatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<GMat>)>>(
          'gapi_GMat_New_FromMat');
  late final _gapi_GMat_New_FromMat =
      _gapi_GMat_New_FromMatPtr.asFunction<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<GMat>)>();

  void gapi_GScalar_Close(
    GScalarPtr scalar,
  ) {
    return _gapi_GScalar_Close(
      scalar,
    );
  }

  late final _gapi_GScalar_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GScalarPtr)>>('gapi_GScalar_Close');
  late final _gapi_GScalar_Close = _gapi_GScalar_ClosePtr.asFunction<void Function(GScalarPtr)>();

  ffi.Pointer<CvStatus> gapi_GScalar_New_Empty(
    ffi.Pointer<GScalar> rval,
  ) {
    return _gapi_GScalar_New_Empty(
      rval,
    );
  }

  late final _gapi_GScalar_New_EmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<GScalar>)>>(
          'gapi_GScalar_New_Empty');
  late final _gapi_GScalar_New_Empty =
      _gapi_GScalar_New_EmptyPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<GScalar>)>();

  ffi.Pointer<CvStatus> gapi_GScalar_New_FromDouble(
    double v0,
    ffi.Pointer<GScalar> rval,
  ) {
    return _gapi_GScalar_New_FromDouble(
      v0,
      rval,
    );
  }

  late final _gapi_GScalar_New_FromDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Double, ffi.Pointer<GScalar>)>>(
          'gapi_GScalar_New_FromDouble');
  late final _gapi_GScalar_New_FromDouble = _gapi_GScalar_New_FromDoublePtr
      .asFunction<ffi.Pointer<CvStatus> Function(double, ffi.Pointer<GScalar>)>();

  ffi.Pointer<CvStatus> gapi_GScalar_New_FromScalar(
    Scalar scalar,
    ffi.Pointer<GScalar> rval,
  ) {
    return _gapi_GScalar_New_FromScalar(
      scalar,
      rval,
    );
  }

  late final _gapi_GScalar_New_FromScalarPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(Scalar, ffi.Pointer<GScalar>)>>(
          'gapi_GScalar_New_FromScalar');
  late final _gapi_GScalar_New_FromScalar = _gapi_GScalar_New_FromScalarPtr
      .asFunction<ffi.Pointer<CvStatus> Function(Scalar, ffi.Pointer<GScalar>)>();

  ffi.Pointer<CvStatus> gapi_I4202BGR(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_I4202BGR(
      src,
      rval,
    );
  }

  late final _gapi_I4202BGRPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_I4202BGR');
  late final _gapi_I4202BGR =
      _gapi_I4202BGRPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_I4202RGB(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_I4202RGB(
      src,
      rval,
    );
  }

  late final _gapi_I4202RGBPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_I4202RGB');
  late final _gapi_I4202RGB =
      _gapi_I4202RGBPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_LUT(
    GMat src,
    Mat lut,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_LUT(
      src,
      lut,
      rval,
    );
  }

  late final _gapi_LUTPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, Mat, ffi.Pointer<GMat>)>>('gapi_LUT');
  late final _gapi_LUT =
      _gapi_LUTPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, Mat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_LUV2BGR(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_LUV2BGR(
      src,
      rval,
    );
  }

  late final _gapi_LUV2BGRPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_LUV2BGR');
  late final _gapi_LUV2BGR =
      _gapi_LUV2BGRPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_Laplacian(
    GMat src,
    int ddepth,
    int ksize,
    double scale,
    double delta,
    int borderType,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_Laplacian(
      src,
      ddepth,
      ksize,
      scale,
      delta,
      borderType,
      rval,
    );
  }

  late final _gapi_LaplacianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int, ffi.Pointer<GMat>)>>('gapi_Laplacian');
  late final _gapi_Laplacian = _gapi_LaplacianPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, int, int, double, double, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_NV12toBGR(
    GMat src_y,
    GMat src_uv,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_NV12toBGR(
      src_y,
      src_uv,
      rval,
    );
  }

  late final _gapi_NV12toBGRPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_NV12toBGR');
  late final _gapi_NV12toBGR =
      _gapi_NV12toBGRPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_NV12toBGRp(
    GMat src_y,
    GMat src_uv,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_NV12toBGRp(
      src_y,
      src_uv,
      rval,
    );
  }

  late final _gapi_NV12toBGRpPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_NV12toBGRp');
  late final _gapi_NV12toBGRp =
      _gapi_NV12toBGRpPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_NV12toGray(
    GMat src_y,
    GMat src_uv,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_NV12toGray(
      src_y,
      src_uv,
      rval,
    );
  }

  late final _gapi_NV12toGrayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_NV12toGray');
  late final _gapi_NV12toGray =
      _gapi_NV12toGrayPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_NV12toRGB(
    GMat src_y,
    GMat src_uv,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_NV12toRGB(
      src_y,
      src_uv,
      rval,
    );
  }

  late final _gapi_NV12toRGBPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_NV12toRGB');
  late final _gapi_NV12toRGB =
      _gapi_NV12toRGBPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_NV12toRGBp(
    GMat src_y,
    GMat src_uv,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_NV12toRGBp(
      src_y,
      src_uv,
      rval,
    );
  }

  late final _gapi_NV12toRGBpPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_NV12toRGBp');
  late final _gapi_NV12toRGBp =
      _gapi_NV12toRGBpPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_RGB2Gray(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_RGB2Gray(
      src,
      rval,
    );
  }

  late final _gapi_RGB2GrayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_RGB2Gray');
  late final _gapi_RGB2Gray =
      _gapi_RGB2GrayPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_RGB2Gray_1(
    GMat src,
    double rY,
    double gY,
    double bY,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_RGB2Gray_1(
      src,
      rY,
      gY,
      bY,
      rval,
    );
  }

  late final _gapi_RGB2Gray_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Float, ffi.Float, ffi.Float, ffi.Pointer<GMat>)>>('gapi_RGB2Gray_1');
  late final _gapi_RGB2Gray_1 = _gapi_RGB2Gray_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, double, double, double, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_RGB2HSV(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_RGB2HSV(
      src,
      rval,
    );
  }

  late final _gapi_RGB2HSVPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_RGB2HSV');
  late final _gapi_RGB2HSV =
      _gapi_RGB2HSVPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_RGB2I420(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_RGB2I420(
      src,
      rval,
    );
  }

  late final _gapi_RGB2I420Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_RGB2I420');
  late final _gapi_RGB2I420 =
      _gapi_RGB2I420Ptr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_RGB2Lab(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_RGB2Lab(
      src,
      rval,
    );
  }

  late final _gapi_RGB2LabPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_RGB2Lab');
  late final _gapi_RGB2Lab =
      _gapi_RGB2LabPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_RGB2YUV(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_RGB2YUV(
      src,
      rval,
    );
  }

  late final _gapi_RGB2YUVPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_RGB2YUV');
  late final _gapi_RGB2YUV =
      _gapi_RGB2YUVPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_RGB2YUV422(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_RGB2YUV422(
      src,
      rval,
    );
  }

  late final _gapi_RGB2YUV422Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_RGB2YUV422');
  late final _gapi_RGB2YUV422 =
      _gapi_RGB2YUV422Ptr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_Sobel(
    GMat src,
    int ddepth,
    int dx,
    int dy,
    int ksize,
    double scale,
    double delta,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_Sobel(
      src,
      ddepth,
      dx,
      dy,
      ksize,
      scale,
      delta,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_SobelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Double, ffi.Double,
              ffi.Int, Scalar, ffi.Pointer<GMat>)>>('gapi_Sobel');
  late final _gapi_Sobel = _gapi_SobelPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GMat, int, int, int, int, double, double, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_SobelXY(
    GMat src,
    int ddepth,
    int order,
    int ksize,
    double scale,
    double delta,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
    ffi.Pointer<GMat> rval1,
  ) {
    return _gapi_SobelXY(
      src,
      ddepth,
      order,
      ksize,
      scale,
      delta,
      borderType,
      borderValue,
      rval,
      rval1,
    );
  }

  late final _gapi_SobelXYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int,
              Scalar, ffi.Pointer<GMat>, ffi.Pointer<GMat>)>>('gapi_SobelXY');
  late final _gapi_SobelXY = _gapi_SobelXYPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GMat, int, int, int, double, double, int, Scalar, ffi.Pointer<GMat>, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_YUV2BGR(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_YUV2BGR(
      src,
      rval,
    );
  }

  late final _gapi_YUV2BGRPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_YUV2BGR');
  late final _gapi_YUV2BGR =
      _gapi_YUV2BGRPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_YUV2RGB(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_YUV2RGB(
      src,
      rval,
    );
  }

  late final _gapi_YUV2RGBPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_YUV2RGB');
  late final _gapi_YUV2RGB =
      _gapi_YUV2RGBPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_add(
    GMat src1,
    GMat src2,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_add(
      src1,
      src2,
      ddepth,
      rval,
    );
  }

  late final _gapi_addPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_add');
  late final _gapi_add =
      _gapi_addPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_addC(
    GMat src,
    GScalar c,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_addC(
      src,
      c,
      ddepth,
      rval,
    );
  }

  late final _gapi_addCPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_addC');
  late final _gapi_addC =
      _gapi_addCPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_addC_1(
    GScalar c,
    GMat src,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_addC_1(
      c,
      src,
      ddepth,
      rval,
    );
  }

  late final _gapi_addC_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GScalar, GMat, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_addC_1');
  late final _gapi_addC_1 =
      _gapi_addC_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(GScalar, GMat, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_bilateralFilter(
    GMat src,
    int d,
    double sigmaColor,
    double sigmaSpace,
    int borderType,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_bilateralFilter(
      src,
      d,
      sigmaColor,
      sigmaSpace,
      borderType,
      rval,
    );
  }

  late final _gapi_bilateralFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Int, ffi.Double, ffi.Double, ffi.Int, ffi.Pointer<GMat>)>>('gapi_bilateralFilter');
  late final _gapi_bilateralFilter = _gapi_bilateralFilterPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, int, double, double, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_blur(
    GMat src,
    CvSize ksize,
    CvPoint anchor,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_blur(
      src,
      ksize,
      anchor,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_blurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, CvSize, CvPoint, ffi.Int, Scalar, ffi.Pointer<GMat>)>>('gapi_blur');
  late final _gapi_blur = _gapi_blurPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, CvSize, CvPoint, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_boundingRect(
    GArrayPoint2f src,
    ffi.Pointer<GOpaqueRect> rval,
  ) {
    return _gapi_boundingRect(
      src,
      rval,
    );
  }

  late final _gapi_boundingRectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GArrayPoint2f, ffi.Pointer<GOpaqueRect>)>>(
          'gapi_boundingRect');
  late final _gapi_boundingRect = _gapi_boundingRectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GArrayPoint2f, ffi.Pointer<GOpaqueRect>)>();

  ffi.Pointer<CvStatus> gapi_boundingRect_1(
    GArrayPoint2i src,
    ffi.Pointer<GOpaqueRect> rval,
  ) {
    return _gapi_boundingRect_1(
      src,
      rval,
    );
  }

  late final _gapi_boundingRect_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GArrayPoint2i, ffi.Pointer<GOpaqueRect>)>>(
          'gapi_boundingRect_1');
  late final _gapi_boundingRect_1 = _gapi_boundingRect_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GArrayPoint2i, ffi.Pointer<GOpaqueRect>)>();

  ffi.Pointer<CvStatus> gapi_boundingRect_2(
    GMat src,
    ffi.Pointer<GOpaqueRect> rval,
  ) {
    return _gapi_boundingRect_2(
      src,
      rval,
    );
  }

  late final _gapi_boundingRect_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GOpaqueRect>)>>(
          'gapi_boundingRect_2');
  late final _gapi_boundingRect_2 =
      _gapi_boundingRect_2Ptr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GOpaqueRect>)>();

  ffi.Pointer<CvStatus> gapi_boxFilter(
    GMat src,
    int dtype,
    CvSize ksize,
    CvPoint anchor,
    bool normalize,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_boxFilter(
      src,
      dtype,
      ksize,
      anchor,
      normalize,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_boxFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, CvSize, CvPoint, ffi.Bool, ffi.Int, Scalar,
              ffi.Pointer<GMat>)>>('gapi_boxFilter');
  late final _gapi_boxFilter = _gapi_boxFilterPtr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, int, CvSize, CvPoint, bool, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_cartToPolar(
    GMat x,
    GMat y,
    bool angleInDegrees,
    ffi.Pointer<GMat> rval,
    ffi.Pointer<GMat> rval1,
  ) {
    return _gapi_cartToPolar(
      x,
      y,
      angleInDegrees,
      rval,
      rval1,
    );
  }

  late final _gapi_cartToPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, GMat, ffi.Bool, ffi.Pointer<GMat>, ffi.Pointer<GMat>)>>('gapi_cartToPolar');
  late final _gapi_cartToPolar = _gapi_cartToPolarPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, bool, ffi.Pointer<GMat>, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_concatHor(
    GMat src1,
    GMat src2,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_concatHor(
      src1,
      src2,
      rval,
    );
  }

  late final _gapi_concatHorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_concatHor');
  late final _gapi_concatHor =
      _gapi_concatHorPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_concatVert(
    GMat src1,
    GMat src2,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_concatVert(
      src1,
      src2,
      rval,
    );
  }

  late final _gapi_concatVertPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_concatVert');
  late final _gapi_concatVert =
      _gapi_concatVertPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_convertTo(
    GMat src,
    int rdepth,
    double alpha,
    double beta,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_convertTo(
      src,
      rdepth,
      alpha,
      beta,
      rval,
    );
  }

  late final _gapi_convertToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Int, ffi.Double, ffi.Double, ffi.Pointer<GMat>)>>('gapi_convertTo');
  late final _gapi_convertTo = _gapi_convertToPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, int, double, double, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_copy_1(
    GMat in1,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_copy_1(
      in1,
      rval,
    );
  }

  late final _gapi_copy_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_copy_1');
  late final _gapi_copy_1 =
      _gapi_copy_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_crop(
    GMat src,
    CvRect rect,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_crop(
      src,
      rect,
      rval,
    );
  }

  late final _gapi_cropPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, CvRect, ffi.Pointer<GMat>)>>(
          'gapi_crop');
  late final _gapi_crop =
      _gapi_cropPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, CvRect, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_dilate(
    GMat src,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_dilate(
      src,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_dilatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, Mat, CvPoint, ffi.Int, ffi.Int, Scalar, ffi.Pointer<GMat>)>>('gapi_dilate');
  late final _gapi_dilate = _gapi_dilatePtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, Mat, CvPoint, int, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_dilate3x3(
    GMat src,
    int iterations,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_dilate3x3(
      src,
      iterations,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_dilate3x3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Int, Scalar, ffi.Pointer<GMat>)>>(
      'gapi_dilate3x3');
  late final _gapi_dilate3x3 = _gapi_dilate3x3Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, int, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_div(
    GMat src1,
    GMat src2,
    double scale,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_div(
      src1,
      src2,
      scale,
      ddepth,
      rval,
    );
  }

  late final _gapi_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Double, ffi.Int, ffi.Pointer<GMat>)>>('gapi_div');
  late final _gapi_div =
      _gapi_divPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, double, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_divC(
    GMat src,
    GScalar divisor,
    double scale,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_divC(
      src,
      divisor,
      scale,
      ddepth,
      rval,
    );
  }

  late final _gapi_divCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, GScalar, ffi.Double, ffi.Int, ffi.Pointer<GMat>)>>('gapi_divC');
  late final _gapi_divC = _gapi_divCPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, double, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_divRC(
    GScalar divident,
    GMat src,
    double scale,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_divRC(
      divident,
      src,
      scale,
      ddepth,
      rval,
    );
  }

  late final _gapi_divRCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GScalar, GMat, ffi.Double, ffi.Int, ffi.Pointer<GMat>)>>('gapi_divRC');
  late final _gapi_divRC = _gapi_divRCPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GScalar, GMat, double, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_erode(
    GMat src,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_erode(
      src,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_erodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, Mat, CvPoint, ffi.Int, ffi.Int, Scalar, ffi.Pointer<GMat>)>>('gapi_erode');
  late final _gapi_erode = _gapi_erodePtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, Mat, CvPoint, int, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_erode3x3(
    GMat src,
    int iterations,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_erode3x3(
      src,
      iterations,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_erode3x3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Int, Scalar, ffi.Pointer<GMat>)>>(
      'gapi_erode3x3');
  late final _gapi_erode3x3 = _gapi_erode3x3Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, int, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_filter2D(
    GMat src,
    int ddepth,
    Mat kernel,
    CvPoint anchor,
    Scalar delta,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_filter2D(
      src,
      ddepth,
      kernel,
      anchor,
      delta,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_filter2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Int, Mat, CvPoint, Scalar, ffi.Int, Scalar, ffi.Pointer<GMat>)>>('gapi_filter2D');
  late final _gapi_filter2D = _gapi_filter2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, int, Mat, CvPoint, Scalar, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_findContours(
    GMat src,
    int mode,
    int method,
    ffi.Pointer<GArrayGArrayPoint> rval,
  ) {
    return _gapi_findContours(
      src,
      mode,
      method,
      rval,
    );
  }

  late final _gapi_findContoursPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Int, ffi.Int, ffi.Pointer<GArrayGArrayPoint>)>>('gapi_findContours');
  late final _gapi_findContours = _gapi_findContoursPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, int, int, ffi.Pointer<GArrayGArrayPoint>)>();

  ffi.Pointer<CvStatus> gapi_findContoursH(
    GMat src,
    int mode,
    int method,
    ffi.Pointer<GArrayGArrayPoint> rval,
    ffi.Pointer<GArrayVec4i> rval1,
  ) {
    return _gapi_findContoursH(
      src,
      mode,
      method,
      rval,
      rval1,
    );
  }

  late final _gapi_findContoursHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Int, ffi.Pointer<GArrayGArrayPoint>,
              ffi.Pointer<GArrayVec4i>)>>('gapi_findContoursH');
  late final _gapi_findContoursH = _gapi_findContoursHPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GMat, int, int, ffi.Pointer<GArrayGArrayPoint>, ffi.Pointer<GArrayVec4i>)>();

  ffi.Pointer<CvStatus> gapi_findContoursH_1(
    GMat src,
    int mode,
    int method,
    GOpaquePoint offset,
    ffi.Pointer<GArrayGArrayPoint> rval,
    ffi.Pointer<GArrayVec4i> rval1,
  ) {
    return _gapi_findContoursH_1(
      src,
      mode,
      method,
      offset,
      rval,
      rval1,
    );
  }

  late final _gapi_findContoursH_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Int, GOpaquePoint, ffi.Pointer<GArrayGArrayPoint>,
              ffi.Pointer<GArrayVec4i>)>>('gapi_findContoursH_1');
  late final _gapi_findContoursH_1 = _gapi_findContoursH_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GMat, int, int, GOpaquePoint, ffi.Pointer<GArrayGArrayPoint>, ffi.Pointer<GArrayVec4i>)>();

  ffi.Pointer<CvStatus> gapi_findContours_1(
    GMat src,
    int mode,
    int method,
    GOpaquePoint offset,
    ffi.Pointer<GArrayGArrayPoint> rval,
  ) {
    return _gapi_findContours_1(
      src,
      mode,
      method,
      offset,
      rval,
    );
  }

  late final _gapi_findContours_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Int, ffi.Int, GOpaquePoint, ffi.Pointer<GArrayGArrayPoint>)>>('gapi_findContours_1');
  late final _gapi_findContours_1 = _gapi_findContours_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, int, int, GOpaquePoint, ffi.Pointer<GArrayGArrayPoint>)>();

  ffi.Pointer<CvStatus> gapi_fitLine2D(
    GArrayPoint2d src,
    int distType,
    double param,
    double reps,
    double aeps,
    ffi.Pointer<GOpaqueVec4f> rval,
  ) {
    return _gapi_fitLine2D(
      src,
      distType,
      param,
      reps,
      aeps,
      rval,
    );
  }

  late final _gapi_fitLine2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GArrayPoint2d, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<GOpaqueVec4f>)>>('gapi_fitLine2D');
  late final _gapi_fitLine2D = _gapi_fitLine2DPtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GArrayPoint2d, int, double, double, double, ffi.Pointer<GOpaqueVec4f>)>();

  ffi.Pointer<CvStatus> gapi_fitLine2D_1(
    GArrayPoint2f src,
    int distType,
    double param,
    double reps,
    double aeps,
    ffi.Pointer<GOpaqueVec4f> rval,
  ) {
    return _gapi_fitLine2D_1(
      src,
      distType,
      param,
      reps,
      aeps,
      rval,
    );
  }

  late final _gapi_fitLine2D_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GArrayPoint2f, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<GOpaqueVec4f>)>>('gapi_fitLine2D_1');
  late final _gapi_fitLine2D_1 = _gapi_fitLine2D_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GArrayPoint2f, int, double, double, double, ffi.Pointer<GOpaqueVec4f>)>();

  ffi.Pointer<CvStatus> gapi_fitLine2D_2(
    GArrayPoint2i src,
    int distType,
    double param,
    double reps,
    double aeps,
    ffi.Pointer<GOpaqueVec4f> rval,
  ) {
    return _gapi_fitLine2D_2(
      src,
      distType,
      param,
      reps,
      aeps,
      rval,
    );
  }

  late final _gapi_fitLine2D_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GArrayPoint2i, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<GOpaqueVec4f>)>>('gapi_fitLine2D_2');
  late final _gapi_fitLine2D_2 = _gapi_fitLine2D_2Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GArrayPoint2i, int, double, double, double, ffi.Pointer<GOpaqueVec4f>)>();

  ffi.Pointer<CvStatus> gapi_fitLine2D_3(
    GMat src,
    int distType,
    double param,
    double reps,
    double aeps,
    ffi.Pointer<GOpaqueVec4f> rval,
  ) {
    return _gapi_fitLine2D_3(
      src,
      distType,
      param,
      reps,
      aeps,
      rval,
    );
  }

  late final _gapi_fitLine2D_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<GOpaqueVec4f>)>>('gapi_fitLine2D_3');
  late final _gapi_fitLine2D_3 = _gapi_fitLine2D_3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, int, double, double, double, ffi.Pointer<GOpaqueVec4f>)>();

  ffi.Pointer<CvStatus> gapi_fitLine3D_1(
    GArrayPoint3d src,
    int distType,
    double param,
    double reps,
    double aeps,
    ffi.Pointer<GOpaqueVec4f> rval,
  ) {
    return _gapi_fitLine3D_1(
      src,
      distType,
      param,
      reps,
      aeps,
      rval,
    );
  }

  late final _gapi_fitLine3D_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GArrayPoint3d, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<GOpaqueVec4f>)>>('gapi_fitLine3D_1');
  late final _gapi_fitLine3D_1 = _gapi_fitLine3D_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GArrayPoint3d, int, double, double, double, ffi.Pointer<GOpaqueVec4f>)>();

  ffi.Pointer<CvStatus> gapi_fitLine3D_2(
    GArrayPoint3f src,
    int distType,
    double param,
    double reps,
    double aeps,
    ffi.Pointer<GOpaqueVec4f> rval,
  ) {
    return _gapi_fitLine3D_2(
      src,
      distType,
      param,
      reps,
      aeps,
      rval,
    );
  }

  late final _gapi_fitLine3D_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GArrayPoint3f, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<GOpaqueVec4f>)>>('gapi_fitLine3D_2');
  late final _gapi_fitLine3D_2 = _gapi_fitLine3D_2Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GArrayPoint3f, int, double, double, double, ffi.Pointer<GOpaqueVec4f>)>();

  ffi.Pointer<CvStatus> gapi_fitLine3D_3(
    GArrayPoint3i src,
    int distType,
    double param,
    double reps,
    double aeps,
    ffi.Pointer<GOpaqueVec4f> rval,
  ) {
    return _gapi_fitLine3D_3(
      src,
      distType,
      param,
      reps,
      aeps,
      rval,
    );
  }

  late final _gapi_fitLine3D_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GArrayPoint3i, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<GOpaqueVec4f>)>>('gapi_fitLine3D_3');
  late final _gapi_fitLine3D_3 = _gapi_fitLine3D_3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GArrayPoint3i, int, double, double, double, ffi.Pointer<GOpaqueVec4f>)>();

  ffi.Pointer<CvStatus> gapi_fitLine3D_4(
    GMat src,
    int distType,
    double param,
    double reps,
    double aeps,
    ffi.Pointer<GOpaqueVec4f> rval,
  ) {
    return _gapi_fitLine3D_4(
      src,
      distType,
      param,
      reps,
      aeps,
      rval,
    );
  }

  late final _gapi_fitLine3D_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<GOpaqueVec4f>)>>('gapi_fitLine3D_4');
  late final _gapi_fitLine3D_4 = _gapi_fitLine3D_4Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, int, double, double, double, ffi.Pointer<GOpaqueVec4f>)>();

  ffi.Pointer<CvStatus> gapi_flip(
    GMat src,
    int flipCode,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_flip(
      src,
      flipCode,
      rval,
    );
  }

  late final _gapi_flipPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_flip');
  late final _gapi_flip =
      _gapi_flipPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_gaussianBlur(
    GMat src,
    CvSize ksize,
    double sigmaX,
    double sigmaY,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_gaussianBlur(
      src,
      ksize,
      sigmaX,
      sigmaY,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_gaussianBlurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, CvSize, ffi.Double, ffi.Double, ffi.Int, Scalar,
              ffi.Pointer<GMat>)>>('gapi_gaussianBlur');
  late final _gapi_gaussianBlur = _gapi_gaussianBlurPtr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, CvSize, double, double, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_goodFeaturesToTrack(
    GMat image,
    int maxCorners,
    double qualityLevel,
    double minDistance,
    Mat mask,
    int blockSize,
    bool useHarrisDetector,
    double k,
  ) {
    return _gapi_goodFeaturesToTrack(
      image,
      maxCorners,
      qualityLevel,
      minDistance,
      mask,
      blockSize,
      useHarrisDetector,
      k,
    );
  }

  late final _gapi_goodFeaturesToTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Double, ffi.Double, Mat, ffi.Int, ffi.Bool,
              ffi.Double)>>('gapi_goodFeaturesToTrack');
  late final _gapi_goodFeaturesToTrack = _gapi_goodFeaturesToTrackPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, int, double, double, Mat, int, bool, double)>();

  ffi.Pointer<CvStatus> gapi_mask(
    GMat src,
    GMat mask,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_mask(
      src,
      mask,
      rval,
    );
  }

  late final _gapi_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>>('gapi_mask');
  late final _gapi_mask =
      _gapi_maskPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_mean(
    GMat src,
    ffi.Pointer<GScalar> rval,
  ) {
    return _gapi_mean(
      src,
      rval,
    );
  }

  late final _gapi_meanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GScalar>)>>('gapi_mean');
  late final _gapi_mean =
      _gapi_meanPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GScalar>)>();

  ffi.Pointer<CvStatus> gapi_medianBlur(
    GMat src,
    int ksize,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_medianBlur(
      src,
      ksize,
      rval,
    );
  }

  late final _gapi_medianBlurPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_medianBlur');
  late final _gapi_medianBlur =
      _gapi_medianBlurPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_merge3(
    GMat src1,
    GMat src2,
    GMat src3,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_merge3(
      src1,
      src2,
      src3,
      rval,
    );
  }

  late final _gapi_merge3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_merge3');
  late final _gapi_merge3 =
      _gapi_merge3Ptr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_merge4(
    GMat src1,
    GMat src2,
    GMat src3,
    GMat src4,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_merge4(
      src1,
      src2,
      src3,
      src4,
      rval,
    );
  }

  late final _gapi_merge4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, GMat, GMat, ffi.Pointer<GMat>)>>(
          'gapi_merge4');
  late final _gapi_merge4 =
      _gapi_merge4Ptr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, GMat, GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_morphologyEx(
    GMat src,
    int op,
    Mat kernel,
    CvPoint anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_morphologyEx(
      src,
      op,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_morphologyExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, Mat, CvPoint, ffi.Int, ffi.Int, Scalar,
              ffi.Pointer<GMat>)>>('gapi_morphologyEx');
  late final _gapi_morphologyEx = _gapi_morphologyExPtr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, int, Mat, CvPoint, int, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_mul(
    GMat src1,
    GMat src2,
    double scale,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_mul(
      src1,
      src2,
      scale,
      ddepth,
      rval,
    );
  }

  late final _gapi_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Double, ffi.Int, ffi.Pointer<GMat>)>>('gapi_mul');
  late final _gapi_mul =
      _gapi_mulPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, double, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_mulC(
    GMat src,
    GScalar multiplier,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_mulC(
      src,
      multiplier,
      ddepth,
      rval,
    );
  }

  late final _gapi_mulCPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_mulC');
  late final _gapi_mulC =
      _gapi_mulCPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_mulC_1(
    GMat src,
    double multiplier,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_mulC_1(
      src,
      multiplier,
      ddepth,
      rval,
    );
  }

  late final _gapi_mulC_1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Double, ffi.Int, ffi.Pointer<GMat>)>>(
      'gapi_mulC_1');
  late final _gapi_mulC_1 =
      _gapi_mulC_1Ptr.asFunction<ffi.Pointer<CvStatus> Function(GMat, double, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_mulC_2(
    GScalar multiplier,
    GMat src,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_mulC_2(
      multiplier,
      src,
      ddepth,
      rval,
    );
  }

  late final _gapi_mulC_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GScalar, GMat, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_mulC_2');
  late final _gapi_mulC_2 =
      _gapi_mulC_2Ptr.asFunction<ffi.Pointer<CvStatus> Function(GScalar, GMat, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_normalize(
    GMat src,
    double alpha,
    double beta,
    int norm_type,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_normalize(
      src,
      alpha,
      beta,
      norm_type,
      ddepth,
      rval,
    );
  }

  late final _gapi_normalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Double, ffi.Double, ffi.Int, ffi.Int, ffi.Pointer<GMat>)>>('gapi_normalize');
  late final _gapi_normalize = _gapi_normalizePtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, double, double, int, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_phase(
    GMat x,
    GMat y,
    bool angleInDegrees,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_phase(
      x,
      y,
      angleInDegrees,
      rval,
    );
  }

  late final _gapi_phasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Bool, ffi.Pointer<GMat>)>>(
          'gapi_phase');
  late final _gapi_phase =
      _gapi_phasePtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, bool, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_polarToCart(
    GMat magnitude,
    GMat angle,
    bool angleInDegrees,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_polarToCart(
      magnitude,
      angle,
      angleInDegrees,
      rval,
    );
  }

  late final _gapi_polarToCartPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Bool, ffi.Pointer<GMat>)>>(
          'gapi_polarToCart');
  late final _gapi_polarToCart =
      _gapi_polarToCartPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, bool, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_remap(
    GMat src,
    Mat map1,
    Mat map2,
    int interpolation,
    int borderMode,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_remap(
      src,
      map1,
      map2,
      interpolation,
      borderMode,
      borderValue,
      rval,
    );
  }

  late final _gapi_remapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, Mat, Mat, ffi.Int, ffi.Int, Scalar, ffi.Pointer<GMat>)>>('gapi_remap');
  late final _gapi_remap = _gapi_remapPtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, Mat, Mat, int, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_resize(
    GMat src,
    CvSize dsize,
    double fx,
    double fy,
    int interpolation,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_resize(
      src,
      dsize,
      fx,
      fy,
      interpolation,
      rval,
    );
  }

  late final _gapi_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, CvSize, ffi.Double, ffi.Double, ffi.Int, ffi.Pointer<GMat>)>>('gapi_resize');
  late final _gapi_resize = _gapi_resizePtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, CvSize, double, double, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_resizeP(
    GMat src,
    CvSize dsize,
    int interpolation,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_resizeP(
      src,
      dsize,
      interpolation,
      rval,
    );
  }

  late final _gapi_resizePPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, CvSize, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_resizeP');
  late final _gapi_resizeP =
      _gapi_resizePPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, CvSize, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_sepFilter(
    GMat src,
    int ddepth,
    Mat kernelX,
    Mat kernelY,
    CvPoint anchor,
    Scalar delta,
    int borderType,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_sepFilter(
      src,
      ddepth,
      kernelX,
      kernelY,
      anchor,
      delta,
      borderType,
      borderValue,
      rval,
    );
  }

  late final _gapi_sepFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Int, Mat, Mat, CvPoint, Scalar, ffi.Int, Scalar,
              ffi.Pointer<GMat>)>>('gapi_sepFilter');
  late final _gapi_sepFilter = _gapi_sepFilterPtr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, int, Mat, Mat, CvPoint, Scalar, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_split3(
    GMat src,
    ffi.Pointer<GMat> rval,
    ffi.Pointer<GMat> rval1,
    ffi.Pointer<GMat> rval2,
  ) {
    return _gapi_split3(
      src,
      rval,
      rval1,
      rval2,
    );
  }

  late final _gapi_split3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, ffi.Pointer<GMat>, ffi.Pointer<GMat>, ffi.Pointer<GMat>)>>('gapi_split3');
  late final _gapi_split3 = _gapi_split3Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>, ffi.Pointer<GMat>, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_split4(
    GMat src,
    ffi.Pointer<GMat> rval,
    ffi.Pointer<GMat> rval1,
    ffi.Pointer<GMat> rval2,
    ffi.Pointer<GMat> rval3,
  ) {
    return _gapi_split4(
      src,
      rval,
      rval1,
      rval2,
      rval3,
    );
  }

  late final _gapi_split4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>, ffi.Pointer<GMat>, ffi.Pointer<GMat>,
              ffi.Pointer<GMat>)>>('gapi_split4');
  late final _gapi_split4 = _gapi_split4Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          GMat, ffi.Pointer<GMat>, ffi.Pointer<GMat>, ffi.Pointer<GMat>, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_sqrt(
    GMat src,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_sqrt(
      src,
      rval,
    );
  }

  late final _gapi_sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>>('gapi_sqrt');
  late final _gapi_sqrt = _gapi_sqrtPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_sub(
    GMat src1,
    GMat src2,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_sub(
      src1,
      src2,
      ddepth,
      rval,
    );
  }

  late final _gapi_subPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_sub');
  late final _gapi_sub =
      _gapi_subPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GMat, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_subC(
    GMat src,
    GScalar c,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_subC(
      src,
      c,
      ddepth,
      rval,
    );
  }

  late final _gapi_subCPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_subC');
  late final _gapi_subC =
      _gapi_subCPtr.asFunction<ffi.Pointer<CvStatus> Function(GMat, GScalar, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_subRC(
    GScalar c,
    GMat src,
    int ddepth,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_subRC(
      c,
      src,
      ddepth,
      rval,
    );
  }

  late final _gapi_subRCPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(GScalar, GMat, ffi.Int, ffi.Pointer<GMat>)>>(
          'gapi_subRC');
  late final _gapi_subRC =
      _gapi_subRCPtr.asFunction<ffi.Pointer<CvStatus> Function(GScalar, GMat, int, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_warpAffine(
    GMat src,
    Mat M,
    CvSize dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_warpAffine(
      src,
      M,
      dsize,
      flags,
      borderMode,
      borderValue,
      rval,
    );
  }

  late final _gapi_warpAffinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, Mat, CvSize, ffi.Int, ffi.Int, Scalar, ffi.Pointer<GMat>)>>('gapi_warpAffine');
  late final _gapi_warpAffine = _gapi_warpAffinePtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, Mat, CvSize, int, int, Scalar, ffi.Pointer<GMat>)>();

  ffi.Pointer<CvStatus> gapi_warpPerspective(
    GMat src,
    Mat M,
    CvSize dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
    ffi.Pointer<GMat> rval,
  ) {
    return _gapi_warpPerspective(
      src,
      M,
      dsize,
      flags,
      borderMode,
      borderValue,
      rval,
    );
  }

  late final _gapi_warpPerspectivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              GMat, Mat, CvSize, ffi.Int, ffi.Int, Scalar, ffi.Pointer<GMat>)>>('gapi_warpPerspective');
  late final _gapi_warpPerspective = _gapi_warpPerspectivePtr
      .asFunction<ffi.Pointer<CvStatus> Function(GMat, Mat, CvSize, int, int, Scalar, ffi.Pointer<GMat>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNativeGapi _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VecPrimPtr)>> get VecPrim_Close =>
      _library._VecPrim_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GComputationPtr)>> get gapi_GComputation_Close =>
      _library._gapi_GComputation_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GMatPtr)>> get gapi_GMat_Close =>
      _library._gapi_GMat_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GScalarPtr)>> get gapi_GScalar_Close =>
      _library._gapi_GScalar_ClosePtr;
}

typedef CvPoint = imp1.CvPoint;
typedef CvRect = imp1.CvRect;
typedef CvSize = imp1.CvSize;
typedef CvStatus = imp1.CvStatus;

final class GArrayGArrayPoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayGArrayPointPtr = ffi.Pointer<GArrayGArrayPoint>;

final class GArrayPoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class GArrayPoint2d extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayPoint2dPtr = ffi.Pointer<GArrayPoint2d>;

final class GArrayPoint2f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayPoint2fPtr = ffi.Pointer<GArrayPoint2f>;

final class GArrayPoint2i extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayPoint2iPtr = ffi.Pointer<GArrayPoint2i>;

final class GArrayPoint3d extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayPoint3dPtr = ffi.Pointer<GArrayPoint3d>;

final class GArrayPoint3f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayPoint3fPtr = ffi.Pointer<GArrayPoint3f>;

final class GArrayPoint3i extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayPoint3iPtr = ffi.Pointer<GArrayPoint3i>;
typedef GArrayPointPtr = ffi.Pointer<GArrayPoint>;

final class GArrayPrim extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayPrimPtr = ffi.Pointer<GArrayPrim>;

final class GArrayVec4i extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GArrayVec4iPtr = ffi.Pointer<GArrayVec4i>;

final class GComputation extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GComputationPtr = ffi.Pointer<GComputation>;

final class GFrame extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GFramePtr = ffi.Pointer<GFrame>;

final class GMat extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GMatPtr = ffi.Pointer<GMat>;

final class GOpaquePoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GOpaquePointPtr = ffi.Pointer<GOpaquePoint>;

final class GOpaqueRect extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GOpaqueRectPtr = ffi.Pointer<GOpaqueRect>;

final class GOpaqueVec4f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GOpaqueVec4fPtr = ffi.Pointer<GOpaqueVec4f>;

final class GOpaqueVec6f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GOpaqueVec6fPtr = ffi.Pointer<GOpaqueVec6f>;

final class GScalar extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GScalarPtr = ffi.Pointer<GScalar>;
typedef Mat = imp1.Mat;

final class Prim extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef PrimPtr = ffi.Pointer<Prim>;
typedef Prims = VecPrim;
typedef Scalar = imp1.Scalar;

final class VecGMat extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecGMatPtr = ffi.Pointer<VecGMat>;
typedef VecPoint = imp1.VecPoint;

final class VecPrim extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecPrimPtr = ffi.Pointer<VecPrim>;
typedef VecVec4i = imp1.VecVec4i;
typedef VecVecPoint = imp1.VecVecPoint;
