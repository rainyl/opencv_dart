// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Highgui
///
class CvNativeHighgui {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeHighgui(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeHighgui.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  ffi.Pointer<CvStatus> cv_createTrackbar(
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Char> winname,
    int max,
  ) {
    return _cv_createTrackbar(
      trackname,
      winname,
      max,
    );
  }

  late final _cv_createTrackbarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('cv_createTrackbar');
  late final _cv_createTrackbar = _cv_createTrackbarPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> cv_createTrackbar_1(
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Int> value,
    int max,
    cv_TrackbarCallback onChange,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _cv_createTrackbar_1(
      trackname,
      winname,
      value,
      max,
      onChange,
      userdata,
    );
  }

  late final _cv_createTrackbar_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int, cv_TrackbarCallback, ffi.Pointer<ffi.Void>)>>('cv_createTrackbar_1');
  late final _cv_createTrackbar_1 = _cv_createTrackbar_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int,
          cv_TrackbarCallback, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> cv_currentUIFramework() {
    return _cv_currentUIFramework();
  }

  late final _cv_currentUIFrameworkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('cv_currentUIFramework');
  late final _cv_currentUIFramework =
      _cv_currentUIFrameworkPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<CvStatus> cv_destroyAllWindows() {
    return _cv_destroyAllWindows();
  }

  late final _cv_destroyAllWindowsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function()>>('cv_destroyAllWindows');
  late final _cv_destroyAllWindows = _cv_destroyAllWindowsPtr.asFunction<ffi.Pointer<CvStatus> Function()>();

  ffi.Pointer<CvStatus> cv_destroyWindow(
    ffi.Pointer<ffi.Char> winname,
  ) {
    return _cv_destroyWindow(
      winname,
    );
  }

  late final _cv_destroyWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>)>>('cv_destroyWindow');
  late final _cv_destroyWindow =
      _cv_destroyWindowPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>)>();

  int cv_getMouseWheelDelta(
    int flags,
  ) {
    return _cv_getMouseWheelDelta(
      flags,
    );
  }

  late final _cv_getMouseWheelDeltaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('cv_getMouseWheelDelta');
  late final _cv_getMouseWheelDelta = _cv_getMouseWheelDeltaPtr.asFunction<int Function(int)>();

  ffi.Pointer<CvStatus> cv_getTrackbarPos(
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Int> rval,
  ) {
    return _cv_getTrackbarPos(
      trackname,
      winname,
      rval,
    );
  }

  late final _cv_getTrackbarPosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('cv_getTrackbarPos');
  late final _cv_getTrackbarPos = _cv_getTrackbarPosPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<CvStatus> cv_getWindowImageRect(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<CvRect> rval,
  ) {
    return _cv_getWindowImageRect(
      winname,
      rval,
    );
  }

  late final _cv_getWindowImageRectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CvRect>)>>(
          'cv_getWindowImageRect');
  late final _cv_getWindowImageRect = _cv_getWindowImageRectPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CvRect>)>();

  ffi.Pointer<CvStatus> cv_getWindowProperty(
    ffi.Pointer<ffi.Char> winname,
    int flag,
    ffi.Pointer<ffi.Double> rval,
  ) {
    return _cv_getWindowProperty(
      winname,
      flag,
      rval,
    );
  }

  late final _cv_getWindowPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Double>)>>('cv_getWindowProperty');
  late final _cv_getWindowProperty = _cv_getWindowPropertyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<CvStatus> cv_imshow(
    ffi.Pointer<ffi.Char> winname,
    Mat mat,
  ) {
    return _cv_imshow(
      winname,
      mat,
    );
  }

  late final _cv_imshowPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat)>>('cv_imshow');
  late final _cv_imshow =
      _cv_imshowPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat)>();

  ffi.Pointer<CvStatus> cv_moveWindow(
    ffi.Pointer<ffi.Char> winname,
    int x,
    int y,
  ) {
    return _cv_moveWindow(
      winname,
      x,
      y,
    );
  }

  late final _cv_moveWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>(
          'cv_moveWindow');
  late final _cv_moveWindow =
      _cv_moveWindowPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<CvStatus> cv_namedWindow(
    ffi.Pointer<ffi.Char> winname,
    int flags,
  ) {
    return _cv_namedWindow(
      winname,
      flags,
    );
  }

  late final _cv_namedWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
          'cv_namedWindow');
  late final _cv_namedWindow =
      _cv_namedWindowPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int)>();

  int cv_pollKey() {
    return _cv_pollKey();
  }

  late final _cv_pollKeyPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('cv_pollKey');
  late final _cv_pollKey = _cv_pollKeyPtr.asFunction<int Function()>();

  ffi.Pointer<CvStatus> cv_resizeWindow(
    ffi.Pointer<ffi.Char> winname,
    int width,
    int height,
  ) {
    return _cv_resizeWindow(
      winname,
      width,
      height,
    );
  }

  late final _cv_resizeWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>(
          'cv_resizeWindow');
  late final _cv_resizeWindow =
      _cv_resizeWindowPtr.asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<CvStatus> cv_selectROI(
    ffi.Pointer<ffi.Char> winname,
    Mat img,
    bool showCrosshair,
    bool fromCenter,
    bool printNotice,
    ffi.Pointer<CvRect> rval,
  ) {
    return _cv_selectROI(
      winname,
      img,
      showCrosshair,
      fromCenter,
      printNotice,
      rval,
    );
  }

  late final _cv_selectROIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, ffi.Bool, ffi.Bool, ffi.Bool,
              ffi.Pointer<CvRect>)>>('cv_selectROI');
  late final _cv_selectROI = _cv_selectROIPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, bool, bool, bool, ffi.Pointer<CvRect>)>();

  ffi.Pointer<CvStatus> cv_selectROI_1(
    Mat img,
    bool showCrosshair,
    bool fromCenter,
    bool printNotice,
    ffi.Pointer<CvRect> rval,
  ) {
    return _cv_selectROI_1(
      img,
      showCrosshair,
      fromCenter,
      printNotice,
      rval,
    );
  }

  late final _cv_selectROI_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              Mat, ffi.Bool, ffi.Bool, ffi.Bool, ffi.Pointer<CvRect>)>>('cv_selectROI_1');
  late final _cv_selectROI_1 = _cv_selectROI_1Ptr
      .asFunction<ffi.Pointer<CvStatus> Function(Mat, bool, bool, bool, ffi.Pointer<CvRect>)>();

  ffi.Pointer<CvStatus> cv_selectROIs(
    ffi.Pointer<ffi.Char> winname,
    Mat img,
    ffi.Pointer<VecRect> rval,
    bool showCrosshair,
    bool fromCenter,
    bool printNotice,
  ) {
    return _cv_selectROIs(
      winname,
      img,
      rval,
      showCrosshair,
      fromCenter,
      printNotice,
    );
  }

  late final _cv_selectROIsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<VecRect>, ffi.Bool, ffi.Bool,
              ffi.Bool)>>('cv_selectROIs');
  late final _cv_selectROIs = _cv_selectROIsPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<VecRect>, bool, bool, bool)>();

  ffi.Pointer<CvStatus> cv_setMouseCallback(
    ffi.Pointer<ffi.Char> winname,
    cv_MouseCallback onMouse,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _cv_setMouseCallback(
      winname,
      onMouse,
      userdata,
    );
  }

  late final _cv_setMouseCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, cv_MouseCallback, ffi.Pointer<ffi.Void>)>>('cv_setMouseCallback');
  late final _cv_setMouseCallback = _cv_setMouseCallbackPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, cv_MouseCallback, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<CvStatus> cv_setTrackbarMax(
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Char> winname,
    int val,
  ) {
    return _cv_setTrackbarMax(
      trackname,
      winname,
      val,
    );
  }

  late final _cv_setTrackbarMaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('cv_setTrackbarMax');
  late final _cv_setTrackbarMax = _cv_setTrackbarMaxPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> cv_setTrackbarMin(
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Char> winname,
    int val,
  ) {
    return _cv_setTrackbarMin(
      trackname,
      winname,
      val,
    );
  }

  late final _cv_setTrackbarMinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('cv_setTrackbarMin');
  late final _cv_setTrackbarMin = _cv_setTrackbarMinPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> cv_setTrackbarPos(
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Char> winname,
    int pos,
  ) {
    return _cv_setTrackbarPos(
      trackname,
      winname,
      pos,
    );
  }

  late final _cv_setTrackbarPosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('cv_setTrackbarPos');
  late final _cv_setTrackbarPos = _cv_setTrackbarPosPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> cv_setWindowProperty(
    ffi.Pointer<ffi.Char> winname,
    int flag,
    double value,
  ) {
    return _cv_setWindowProperty(
      winname,
      flag,
      value,
    );
  }

  late final _cv_setWindowPropertyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double)>>(
          'cv_setWindowProperty');
  late final _cv_setWindowProperty = _cv_setWindowPropertyPtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, double)>();

  ffi.Pointer<CvStatus> cv_setWindowTitle(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _cv_setWindowTitle(
      winname,
      title,
    );
  }

  late final _cv_setWindowTitlePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'cv_setWindowTitle');
  late final _cv_setWindowTitle = _cv_setWindowTitlePtr
      .asFunction<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cv_waitKey(
    int delay,
  ) {
    return _cv_waitKey(
      delay,
    );
  }

  late final _cv_waitKeyPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('cv_waitKey');
  late final _cv_waitKey = _cv_waitKeyPtr.asFunction<int Function(int)>();

  int cv_waitKeyEx(
    int delay,
  ) {
    return _cv_waitKeyEx(
      delay,
    );
  }

  late final _cv_waitKeyExPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('cv_waitKeyEx');
  late final _cv_waitKeyEx = _cv_waitKeyExPtr.asFunction<int Function(int)>();
}

typedef CvRect = imp1.CvRect;
typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef VecRect = imp1.VecRect;
typedef cv_ButtonCallback = ffi.Pointer<ffi.NativeFunction<cv_ButtonCallbackFunction>>;
typedef cv_ButtonCallbackFunction = ffi.Void Function(ffi.Int state, ffi.Pointer<ffi.Void> userdata);
typedef Dartcv_ButtonCallbackFunction = void Function(int state, ffi.Pointer<ffi.Void> userdata);
typedef cv_MouseCallback = ffi.Pointer<ffi.NativeFunction<cv_MouseCallbackFunction>>;
typedef cv_MouseCallbackFunction = ffi.Void Function(
    ffi.Int event, ffi.Int x, ffi.Int y, ffi.Int flags, ffi.Pointer<ffi.Void> userdata);
typedef Dartcv_MouseCallbackFunction = void Function(
    int event, int x, int y, int flags, ffi.Pointer<ffi.Void> userdata);
typedef cv_OpenGlDrawCallback = ffi.Pointer<ffi.NativeFunction<cv_OpenGlDrawCallbackFunction>>;
typedef cv_OpenGlDrawCallbackFunction = ffi.Void Function(ffi.Pointer<ffi.Void> userdata);
typedef Dartcv_OpenGlDrawCallbackFunction = void Function(ffi.Pointer<ffi.Void> userdata);
typedef cv_TrackbarCallback = ffi.Pointer<ffi.NativeFunction<cv_TrackbarCallbackFunction>>;
typedef cv_TrackbarCallbackFunction = ffi.Void Function(ffi.Int pos, ffi.Pointer<ffi.Void> userdata);
typedef Dartcv_TrackbarCallbackFunction = void Function(int pos, ffi.Pointer<ffi.Void> userdata);
