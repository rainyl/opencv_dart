// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;

/// Native bindings for OpenCV - Imgcodecs
///
class CvNativeImgcodecs {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNativeImgcodecs(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNativeImgcodecs.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  bool cv_haveImageReader(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _cv_haveImageReader(
      filename,
    );
  }

  late final _cv_haveImageReaderPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>('cv_haveImageReader');
  late final _cv_haveImageReader = _cv_haveImageReaderPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool cv_haveImageWriter(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _cv_haveImageWriter(
      filename,
    );
  }

  late final _cv_haveImageWriterPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>('cv_haveImageWriter');
  late final _cv_haveImageWriter = _cv_haveImageWriterPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  int cv_imcount(
    ffi.Pointer<ffi.Char> filename,
    int flags,
  ) {
    return _cv_imcount(
      filename,
      flags,
    );
  }

  late final _cv_imcountPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('cv_imcount');
  late final _cv_imcount = _cv_imcountPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CvStatus> cv_imdecode(
    VecUChar buf,
    int flags,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_imdecode(
      buf,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_imdecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              VecUChar, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_imdecode');
  late final _cv_imdecode = _cv_imdecodePtr
      .asFunction<ffi.Pointer<CvStatus> Function(VecUChar, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_imencode(
    ffi.Pointer<ffi.Char> fileExt,
    Mat img,
    ffi.Pointer<ffi.Bool> success,
    ffi.Pointer<VecUChar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_imencode(
      fileExt,
      img,
      success,
      rval,
      callback,
    );
  }

  late final _cv_imencodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Bool>,
              ffi.Pointer<VecUChar>, imp1.CvCallback_0)>>('cv_imencode');
  late final _cv_imencode = _cv_imencodePtr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Bool>, ffi.Pointer<VecUChar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_imencode_1(
    ffi.Pointer<ffi.Char> fileExt,
    Mat img,
    VecI32 params,
    ffi.Pointer<ffi.Bool> success,
    ffi.Pointer<VecUChar> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_imencode_1(
      fileExt,
      img,
      params,
      success,
      rval,
      callback,
    );
  }

  late final _cv_imencode_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, VecI32, ffi.Pointer<ffi.Bool>,
              ffi.Pointer<VecUChar>, imp1.CvCallback_0)>>('cv_imencode_1');
  late final _cv_imencode_1 = _cv_imencode_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, VecI32, ffi.Pointer<ffi.Bool>,
          ffi.Pointer<VecUChar>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_imread(
    ffi.Pointer<ffi.Char> filename,
    int flags,
    ffi.Pointer<Mat> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_imread(
      filename,
      flags,
      rval,
      callback,
    );
  }

  late final _cv_imreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<Mat>, imp1.CvCallback_0)>>('cv_imread');
  late final _cv_imread = _cv_imreadPtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<Mat>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_imwrite(
    ffi.Pointer<ffi.Char> filename,
    Mat img,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_imwrite(
      filename,
      img,
      rval,
      callback,
    );
  }

  late final _cv_imwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>>('cv_imwrite');
  late final _cv_imwrite = _cv_imwritePtr.asFunction<
      ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();

  ffi.Pointer<CvStatus> cv_imwrite_1(
    ffi.Pointer<ffi.Char> filename,
    Mat img,
    VecI32 params,
    ffi.Pointer<ffi.Bool> rval,
    imp1.CvCallback_0 callback,
  ) {
    return _cv_imwrite_1(
      filename,
      img,
      params,
      rval,
      callback,
    );
  }

  late final _cv_imwrite_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CvStatus> Function(
              ffi.Pointer<ffi.Char>, Mat, VecI32, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>>('cv_imwrite_1');
  late final _cv_imwrite_1 = _cv_imwrite_1Ptr.asFunction<
      ffi.Pointer<CvStatus> Function(
          ffi.Pointer<ffi.Char>, Mat, VecI32, ffi.Pointer<ffi.Bool>, imp1.CvCallback_0)>();
}

typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef VecI32 = imp1.VecI32;
typedef VecUChar = imp1.VecUChar;
